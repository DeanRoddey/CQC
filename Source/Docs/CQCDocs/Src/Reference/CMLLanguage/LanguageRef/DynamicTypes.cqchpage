<?xml version="1.0" encoding="Latin1"?>
<!DOCTYPE HelpPage PUBLIC "urn:charmedquark.com:CQC-Documentation.DTD" "CQCDocs.DTD">

<HelpPage>
    <Title>Dynamic Types</Title>

    <HelpText>

        <P>There are some circumstances where you would like to use one of a set of classes derived from some common base class, and you would like to force the use of a given derivative from outside of the class. To support this type of functionality, CML has a DynTypeRef() keyword. This keyword is accepted in the Imports and Members block and allows you to indicate the use of type indirectly via an immediate string or string literal.</P>

        <P>So you can import a class like this:</P>

        <Code>
        Imports=
            MEng.User.MyMacros.MyTypes;
            DynTypeRef(MyTypes.kTypeToUse);
        EndImports;
        </Code>

        <P>In this case, we have a class, MyTypes, which provides one or more string literals that should be used. We then use DynTypeRef to import a type based on the value of one of those string literals. This allows a whole group of macros to be forced to use one or another type by just changing the values of the literals in one class.</P>

        <P>You can then use the same mechanism in the Members block to create the actual object, like this:</P>

        <Code>
        Members=
            DynTypeRef(MyTypes.kTypeToUse)  m_MyObject;
        EndMembers;
        </Code>

        <P>You can also use an immediate string in the DynTypeRef statement, e.g. "MEng.User.TypeToUse", instead of a defined literal, but of course it wouldn't have quite the utility that a literal does since the literal can be brought in from the outside.</P>

  </HelpText>

</HelpPage>
