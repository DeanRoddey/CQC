<?xml version="1.0" encoding="Latin1"?>
<!DOCTYPE IntfWidget PUBLIC "urn:charmedquark.com:CQC-Documentation.DTD" "CQCDocs.DTD">

<IntfWidget>

    <Title>Volume Knob</Title>

    <WdgDescr>

        <P>Volume knob widgets are input widgets which allow you to adjust the value of a range based numeric fields or variables. Generally speaking, volume fields are most likely to fall into this category, hence the name. But, any field or variable which is of numeric type, and which has a range based limit that has a reasonably limited range that would make sense for this type of widget can be used. There is also a static version that just maintains an internal value, in which case you are allowed to configure the min/max values it should move within. </P>

        <P>You have to provide some meaningful background image against which that rotating LED is viewed. It can be set as the background image of this widget, or part of some underlying image this widget is layered over.</P>

        <P>It also allows you to control a number of attributes of the volume knob. First are the Radius and Range settings. The Radius allows you to control how far out from the center of the widget the LED will be, so that you can place it at the appropriate place within the background image. The range controls the range of travel around the center, from bottom left (minimum value) to bottom right (maximum value), so that you can make the min/max points of travel line up with any min/max tick marks that might be in the underlying knob image.</P>

        <P>You can also provide per-user type range limits for this type of widget, which allows you to limit the range of settings available to different types of users. For instance, you might want to prevent any but system administrators from turning the volume up past -5db, for instance. If you don't enabled the user limits, then the full range of the field will be available to all users.</P>

        <Image Ref="Reference/IntfWidgets/VolumeKnob.png" Type="FloatRight"/>

        <P>Here is an example of the volume knob to the right. In this case, a background image has been placed behind it, and the radius adjusted so that the LED travels just inside the rotating part of the knob, and the travel range has been adjusted so that the min/max ticks line up. When you are in the designer, the value will be set to the maximum value of the field's range so that you can correctly align the LED with the maximum tick mark during range adjustment.</P>

        <P>To use the volume knob widget at runtime, you can either just click where you want the LED to go to, or you can press and drag left/right (or up/down) to lower or raise the value. When  you release, the new value you have selected will be written to the field or variable, or the internal state if a static one.</P>

    </WdgDescr>

    <IntfEvents>

        <IntfEvent Name="OnPress">
            This event is generated when the user first touches the widget. This is typically used to set up some widget that is going to display the value as the user drags.
        </IntfEvent>

        <IntfEvent Name="OnDrag">
            This event is generated as the the user drags his finger around. This is typically used to update some widget that is displaying the current value represented by where the user's finger is. Do not try to update a field from this event. A variable is fine since it is local, but a field cannot updated remotely this fast and will make the drag operation very jerky.
        </IntfEvent>

        <IntfEvent Name="OnRelease">
            This event is generated when the users lifts his finger. This is typically used to hide a current drag value display.
        </IntfEvent>

        <IntfEvent Name="OnSet">
            This event is generated at the end, when the user finally lifts his finger, if he finger is still within the palette. If he moves out of the palette and lifts you won't get this, which gives him a change to back out of the operation. This is intended to be the 'ok, accept this new value permanently' indicator. .
        </IntfEvent>

    </IntfEvents>

    <IntfCmds>

        <WdgDescr>
            Commands marked with [*] return a True/False status and can be used in If/Else type commands.
        </WdgDescr>

        <CQCActCmd Name="LinkToField">
            <ActDescr>
                For field based check boxes you can dynamically change the associated field at viewing time.
            </ActDescr>
            <CQCActParm Name="newfld" Descr="The name of the new field in moniker.field form"/>
        </CQCActCmd>

        <CQCActCmd Name="LinkToVar">
            <ActDescr>
                For variable based check boxes you can dynamically change the associated global variable at viewing time.
            </ActDescr>
            <CQCActParm Name="newvar" Descr="The name of the global variable to associated with."/>
        </CQCActCmd>

        <CQCActCmd Name="SetValue">
            <ActDescr>
                Only available for the static version, this allows you to change the value programmatically, such as to get it initially in sync with some previously saved value that you are now allowing the user to edit again. It must of course be within the range set for this widget or it will fail.
            </ActDescr>
            <CQCActParm Name="newval" Descr="The new current value to set"/>
        </CQCActCmd>

    </IntfCmds>


    <IntfRTVs>

        <IntfRTV Name="StdRTV:CurValue">
            The current value of the slider . During dragging this is the value you've dragged to, not the value actually set.
        </IntfRTV>

    </IntfRTVs>

</IntfWidget>
