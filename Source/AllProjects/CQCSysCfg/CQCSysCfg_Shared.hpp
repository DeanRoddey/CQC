// ----------------------------------------------------------------------------
//  FILE: CQCSysCfg_Shared.hpp
//  DATE: Fri, Feb 14 18:49:46 2020 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------
#pragma once

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tCQCSysCfg
{
    
    // ------------------------------------------------------------------------
    //  This is used in the layout class to reference various lists that it
    //  maintains. Not persisted directly, but add new ones at the end.
    //                  
    // ------------------------------------------------------------------------
    enum class ECfgLists
    {
        Lighting
        , Media
        , Security
        , Weather
        , XOvers
        , HVAC
        , Count
        , Min = Lighting
        , Max = HVAC
    };
    CQCSYSCFGEXP ECfgLists eXlatECfgLists(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CQCSYSCFGEXP const TString& strXlatECfgLists(const ECfgLists eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCSYSCFGEXP tCIDLib::TBoolean bIsValidEnum(const ECfgLists eVal);

    
    // ------------------------------------------------------------------------
    //  Each room can have a list of global actions that can be invoked
    //  at various places. This is used as an index into that list.
    //  
    //  This is persisted in room config so add new ones at the end!
    //                  
    // ------------------------------------------------------------------------
    enum class EGlobActs
    {
        OnRoomLoad
        , OnIVExit
        , PreMovie
        , PreMusic
        , MusicPowerOff
        , MusicPowerOn
        , MoviePowerOff
        , MoviePowerOn
        , Count
        , Min = OnRoomLoad
        , Max = MoviePowerOn
    };
    CQCSYSCFGEXP EGlobActs eXlatEGlobActs(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CQCSYSCFGEXP const TString& strXlatEGlobActs(const EGlobActs eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCSYSCFGEXP tCIDLib::TBoolean bIsValidEnum(const EGlobActs eVal);

    
    // ------------------------------------------------------------------------
    //  This is used in the room class to store some info based on the various
    //  pre-defined functional areas we support per room. Not directly persisted
    //  but indirectly so, since the object arrays that hold the stuff indexed
    //  by these are persisted.
    //                  
    // ------------------------------------------------------------------------
    enum class ERmFuncs
    {
        Lighting
        , Movies
        , Music
        , Security
        , Weather
        , HVAC
        , Count
        , Min = Lighting
        , Max = HVAC
    };
    CQCSYSCFGEXP ERmFuncs eXlatERmFuncs(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CQCSYSCFGEXP const TString& strXlatERmFuncs(const ERmFuncs eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCSYSCFGEXP tCIDLib::TBoolean bIsValidEnum(const ERmFuncs eVal);

}

#pragma CIDLIB_POPPACK


CQCSYSCFGEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCSysCfg::EGlobActs eToStream);
CQCSYSCFGEXP TBinInStream& operator>>(TBinInStream& strmSrc, tCQCSysCfg::EGlobActs& eToFill);
CQCSYSCFGEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCSysCfg::EGlobActs* const aeList, const tCIDLib::TCard4 c4Count);
CQCSYSCFGEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCSysCfg::EGlobActs* const aeList, const tCIDLib::TCard4 c4Count);
CQCSYSCFGEXP tCQCSysCfg::EGlobActs operator++(tCQCSysCfg::EGlobActs& eVal, int);

CQCSYSCFGEXP tCQCSysCfg::ERmFuncs operator++(tCQCSysCfg::ERmFuncs& eVal, int);

