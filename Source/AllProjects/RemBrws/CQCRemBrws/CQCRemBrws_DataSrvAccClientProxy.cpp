// ----------------------------------------------------------------------------
//  FILE: CQCRemBrws_DataSrvAccClientProxy.cpp
//  DATE: Fri, Feb 12 21:14:14 2021 -0500
//    ID: EE2558A6FCEB5778-42F61F03A90E99D3
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCRemBrws_.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
AdvRTTIDecls(TDataSrvAccClientProxy,TOrbClientBase)


// ----------------------------------------------------------------------------
// TDataSrvAccClientProxy: Public, static data
// ----------------------------------------------------------------------------
const TString TDataSrvAccClientProxy::strInterfaceId(L"EE2558A6FCEB5778-42F61F03A90E99D3");
const TString TDataSrvAccClientProxy::strBinding(L"/CQC/CQCDataServer/FileAcc");



// ----------------------------------------------------------------------------
// TDataSrvAccClientProxy: Constructors and Destructor
// ----------------------------------------------------------------------------
TDataSrvAccClientProxy::TDataSrvAccClientProxy()
{
}

TDataSrvAccClientProxy::
TDataSrvAccClientProxy(const TOrbObjId& ooidSrc, const TString& strNSBinding)
{
    #if CID_DEBUG_ON
    if (!ooidSrc.oidKey().bIsInterfaceId(strInterfaceId))
    {
        facCIDOrb().ThrowErr
        (
            CID_FILE
            , CID_LINE
            , kOrbErrs::errcClient_BadIntfId
            , tCIDLib::ESeverities::Failed
            , tCIDLib::EErrClasses::BadParms
            , ooidSrc.oidKey().mhashInterface()
            , strInterfaceId
        );
    }
    #endif
    SetObjId(ooidSrc, strNSBinding, kCIDLib::False);
}

TDataSrvAccClientProxy::~TDataSrvAccClientProxy()
{
}

// ----------------------------------------------------------------------------
// TDataSrvAccClientProxy: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TBoolean TDataSrvAccClientProxy::bFind
(
    const TString& strHPath
    , COP TFindBuf& fndbToFill
    , const tCIDLib::TBoolean bIsScope)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bFind");
        ocmdToUse.strmOut() << strHPath;
        ocmdToUse.strmOut() << bIsScope;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> fndbToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TDataSrvAccClientProxy::bExists
(
    const TString& strHPath
    , const tCIDLib::TBoolean bIsScope)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bExists");
        ocmdToUse.strmOut() << strHPath;
        ocmdToUse.strmOut() << bIsScope;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TDataSrvAccClientProxy::bIsScope
(
    const TString& strHToCheck)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bIsScope");
        ocmdToUse.strmOut() << strHToCheck;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TDataSrvAccClientProxy::bQueryExtChunk
(
    CIOP tCIDLib::TCard4& c4SerialNum
    , const TString& strHPath
    , const TString& strExtChunkId
    , tCIDLib::TCard4& c4BufSz_mbufExtChunk
    , THeapBuf& mbufExtChunk
    , const TCQCSecToken& sectUser
    , const tCIDLib::TBoolean bNoCache)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryExtChunk");
        ocmdToUse.strmOut() << c4SerialNum;
        ocmdToUse.strmOut() << strHPath;
        ocmdToUse.strmOut() << strExtChunkId;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << bNoCache;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4SerialNum;
            ocmdToUse.strmIn() >> c4BufSz_mbufExtChunk;
            ocmdToUse.strmIn().c4ReadBuffer(mbufExtChunk, c4BufSz_mbufExtChunk);
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TDataSrvAccClientProxy::bQueryFileFirst
(
    CIOP tCIDLib::TCard4& c4SerialNum
    , const TString& strHPath
    , tCIDLib::TCard4& c4Cookie
    , tCIDLib::TCard4& c4FullDataSz
    , TVector<TKeyValFPair>& colMeta
    , tCIDLib::TCard4& c4BufSz_mbufFirstBlock
    , THeapBuf& mbufFirstBlock
    , TString& strExtChunkId
    , tCIDLib::TCard4& c4BufSz_mbufExtChunk
    , THeapBuf& mbufExtChunk
    , CIOP tCIDLib::TCard4& c4Flags
    , tCIDLib::TCard8& lastChange
    , const TCQCSecToken& sectUser)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryFileFirst");
        ocmdToUse.strmOut() << c4SerialNum;
        ocmdToUse.strmOut() << strHPath;
        ocmdToUse.strmOut() << c4Flags;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4SerialNum;
            ocmdToUse.strmIn() >> c4Cookie;
            ocmdToUse.strmIn() >> c4FullDataSz;
            ocmdToUse.strmIn() >> colMeta;
            ocmdToUse.strmIn() >> c4BufSz_mbufFirstBlock;
            ocmdToUse.strmIn().c4ReadBuffer(mbufFirstBlock, c4BufSz_mbufFirstBlock);
            ocmdToUse.strmIn() >> strExtChunkId;
            ocmdToUse.strmIn() >> c4BufSz_mbufExtChunk;
            ocmdToUse.strmIn().c4ReadBuffer(mbufExtChunk, c4BufSz_mbufExtChunk);
            ocmdToUse.strmIn() >> c4Flags;
            ocmdToUse.strmIn() >> lastChange;
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TDataSrvAccClientProxy::bQueryFileNext
(
    const tCIDLib::TCard4 c4Cookie
    , tCIDLib::TCard4& c4BufSz_mbufData
    , COP THeapBuf& mbufData)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryFileNext");
        ocmdToUse.strmOut() << c4Cookie;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> c4BufSz_mbufData;
        ocmdToUse.strmIn().c4ReadBuffer(mbufData, c4BufSz_mbufData);
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TDataSrvAccClientProxy::bQueryItemMeta
(
    const TString& strPath
    , COP TVector<TKeyValFPair>& colMetaVals
    , COP TVector<TString>& colChunkIds
    , COP TFundVector<tCIDLib::TCard4>& fcolChunkSizes
    , COP tCIDLib::TCard4& c4SerialNum
    , COP tCIDLib::TCard8& enctLastChange
    , const tCIDLib::TBoolean bThrowIfNot
    , const TCQCSecToken& sectUser)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryItemMeta");
        ocmdToUse.strmOut() << strPath;
        ocmdToUse.strmOut() << bThrowIfNot;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> colMetaVals;
        ocmdToUse.strmIn() >> colChunkIds;
        ocmdToUse.strmIn() >> fcolChunkSizes;
        ocmdToUse.strmIn() >> c4SerialNum;
        ocmdToUse.strmIn() >> enctLastChange;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TDataSrvAccClientProxy::bQueryScopeNames
(
    CIOP tCIDLib::TCard4& c4ScopeId
    , const TString& strPath
    , TVector<TString>& colNames
    , const tCQCRemBrws::EQSFlags eQSFlags
    , const TCQCSecToken& sectUser)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryScopeNames");
        ocmdToUse.strmOut() << c4ScopeId;
        ocmdToUse.strmOut() << strPath;
        ocmdToUse.strmOut() << eQSFlags;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4ScopeId;
            ocmdToUse.strmIn() >> colNames;
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TVoid TDataSrvAccClientProxy::DeletePath
(
    const TString& strPath
    , const tCIDLib::TBoolean bIsScope
    , const tCIDLib::TBoolean bMustExist
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"DeletePath");
        ocmdToUse.strmOut() << strPath;
        ocmdToUse.strmOut() << bIsScope;
        ocmdToUse.strmOut() << bMustExist;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::ERenameRes TDataSrvAccClientProxy::eRenameItem
(
    const TString& strParPath
    , const TString& strOldName
    , const TString& strNewName
    , const tCIDLib::TBoolean bIsScope
    , COP tCIDLib::TCard4& c4ParScopeId
    , COP tCIDLib::TCard4& c4TarItemId
    , const TCQCSecToken& sectUser)
{
    #pragma warning(suppress : 26494)
    tCIDLib::ERenameRes retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"eRenameItem");
        ocmdToUse.strmOut() << strParPath;
        ocmdToUse.strmOut() << strOldName;
        ocmdToUse.strmOut() << strNewName;
        ocmdToUse.strmOut() << bIsScope;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> c4ParScopeId;
        ocmdToUse.strmIn() >> c4TarItemId;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TVoid TDataSrvAccClientProxy::GenerateReport
(
    const TString& strDescription
    , const TFundVector<tCQCRemBrws::EDTypes>& fcolTypes
    , tCIDLib::TCard4& c4BufSz_mbufReportData
    , COP THeapBuf& mbufReportData
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"GenerateReport");
        ocmdToUse.strmOut() << strDescription;
        ocmdToUse.strmOut() << fcolTypes;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4BufSz_mbufReportData;
        ocmdToUse.strmIn().c4ReadBuffer(mbufReportData, c4BufSz_mbufReportData);
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::GenerateTypeReport
(
    const TString& strDescription
    , const TString& strHPathScope
    , const tCIDLib::TBoolean bRecurse
    , tCIDLib::TCard4& c4BufSz_mbufReportData
    , COP THeapBuf& mbufReportData
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"GenerateTypeReport");
        ocmdToUse.strmOut() << strDescription;
        ocmdToUse.strmOut() << strHPathScope;
        ocmdToUse.strmOut() << bRecurse;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4BufSz_mbufReportData;
        ocmdToUse.strmIn().c4ReadBuffer(mbufReportData, c4BufSz_mbufReportData);
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::MakeNewScope
(
    const TString& strParScope
    , const TString& strNewSubScope
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"MakeNewScope");
        ocmdToUse.strmOut() << strParScope;
        ocmdToUse.strmOut() << strNewSubScope;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::MakePath
(
    const TString& strPath
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"MakePath");
        ocmdToUse.strmOut() << strPath;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::PastePath
(
    const TString& strSrcPath
    , const TString& strTarScope
    , const tCIDLib::TBoolean bSrcIsScope
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"PastePath");
        ocmdToUse.strmOut() << strSrcPath;
        ocmdToUse.strmOut() << strTarScope;
        ocmdToUse.strmOut() << bSrcIsScope;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::Ping()
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"Ping");
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::QueryItemInfo
(
    const TString& strPath
    , COP tCIDLib::TBoolean& bIsScope
    , COP TFundVector<tCIDLib::TCard4>& fcolPathIds
    , COP TDSBrowseItem& dsbiToFill
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryItemInfo");
        ocmdToUse.strmOut() << strPath;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> bIsScope;
        ocmdToUse.strmIn() >> fcolPathIds;
        ocmdToUse.strmIn() >> dsbiToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::QueryItemInfo2
(
    const TString& strPath
    , COP tCIDLib::TBoolean& bIsScope
    , COP TFundVector<tCIDLib::TCard4>& fcolPathIds
    , COP TDSBrowseItem& dsbiTarget
    , COP TDSBrowseItem& dsbiParScope
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryItemInfo2");
        ocmdToUse.strmOut() << strPath;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> bIsScope;
        ocmdToUse.strmIn() >> fcolPathIds;
        ocmdToUse.strmIn() >> dsbiTarget;
        ocmdToUse.strmIn() >> dsbiParScope;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::QueryPathIds
(
    const TString& strPath
    , COP tCIDLib::TBoolean& bIsScope
    , COP tCIDLib::TCard4& c4ItemId
    , COP tCIDLib::TCard4& c4ScopeId
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryPathIds");
        ocmdToUse.strmOut() << strPath;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> bIsScope;
        ocmdToUse.strmIn() >> c4ItemId;
        ocmdToUse.strmIn() >> c4ScopeId;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::QueryPathIds
(
    const TString& strPath
    , COP tCIDLib::TBoolean& bIsScope
    , COP TFundVector<tCIDLib::TCard4>& fcolPathIds
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryPathIds1");
        ocmdToUse.strmOut() << strPath;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> bIsScope;
        ocmdToUse.strmIn() >> fcolPathIds;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::QueryScopeItems
(
    const TString& strPath
    , COP TFundVector<tCIDLib::TCard4>& fcolPathIds
    , COP TVector<TDSBrowseItem>& colItems
    , const tCIDLib::TBoolean bItemsOnly
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryScopeItems");
        ocmdToUse.strmOut() << strPath;
        ocmdToUse.strmOut() << bItemsOnly;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> fcolPathIds;
        ocmdToUse.strmIn() >> colItems;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::QueryTree
(
    const TString& strStartScope
    , COP TString& strXML
    , const tCIDLib::TBoolean bSparse
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryTree");
        ocmdToUse.strmOut() << strStartScope;
        ocmdToUse.strmOut() << bSparse;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> strXML;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::QueryTree2
(
    const TString& strStartScope
    , COP TVector<TString>& colList
    , const tCIDLib::TBoolean bSparse
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryTree2");
        ocmdToUse.strmOut() << strStartScope;
        ocmdToUse.strmOut() << bSparse;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> colList;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::SetEventPauseState
(
    const TString& strHPath
    , COP tCIDLib::TCard4& c4NewSerialNum
    , COP tCIDLib::TCard8& enctLastChange
    , const tCIDLib::TBoolean bToSet
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"SetEventPauseState");
        ocmdToUse.strmOut() << strHPath;
        ocmdToUse.strmOut() << bToSet;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4NewSerialNum;
        ocmdToUse.strmIn() >> enctLastChange;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::SetPeriodicEvTime
(
    const TString& strHPath
    , COP tCIDLib::TCard4& c4NewSerialNum
    , COP tCIDLib::TCard8& enctLastChange
    , const tCIDLib::TCard4 c4Period
    , const tCIDLib::TCard8 enctStartAt
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"SetPeriodicEvTime");
        ocmdToUse.strmOut() << strHPath;
        ocmdToUse.strmOut() << c4Period;
        ocmdToUse.strmOut() << enctStartAt;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4NewSerialNum;
        ocmdToUse.strmIn() >> enctLastChange;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::SetScheduledEvTime
(
    const TString& strHPath
    , COP tCIDLib::TCard4& c4NewSerialNum
    , COP tCIDLib::TCard8& enctLastChange
    , const tCIDLib::TCard4 c4Day
    , const tCIDLib::TCard4 c4Hour
    , const tCIDLib::TCard4 c4Minute
    , const tCIDLib::TCard4 c4Mask
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"SetScheduledEvTime");
        ocmdToUse.strmOut() << strHPath;
        ocmdToUse.strmOut() << c4Day;
        ocmdToUse.strmOut() << c4Hour;
        ocmdToUse.strmOut() << c4Minute;
        ocmdToUse.strmOut() << c4Mask;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4NewSerialNum;
        ocmdToUse.strmIn() >> enctLastChange;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::SetSunBasedEvOffset
(
    const TString& strHPath
    , COP tCIDLib::TCard4& c4NewSerialNum
    , COP tCIDLib::TCard8& enctLastChange
    , const tCIDLib::TInt4 i4Offset
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"SetSunBasedEvOffset");
        ocmdToUse.strmOut() << strHPath;
        ocmdToUse.strmOut() << i4Offset;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4NewSerialNum;
        ocmdToUse.strmIn() >> enctLastChange;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::UploadFirst
(
    const TString& strHPath
    , COP tCIDLib::TCard4& c4Cookie
    , COP tCIDLib::TCard4& c4SerialNum
    , const tCIDLib::TCard4 c4DataChunkSz
    , const TVector<TKeyValFPair>& colMetaVals
    , const tCIDLib::TCard4 c4BufSz_mbufFirstBlock
    , const TMemBuf& mbufFirstBlock
    , const TString& strExtChunkId
    , const tCIDLib::TCard4 c4BufSz_mbufExtChunk
    , const TMemBuf& mbufExtChunk
    , const tCIDLib::TCard4 c4Flags
    , COP tCIDLib::TCard8& enctLastChange
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"UploadFirst");
        ocmdToUse.strmOut() << strHPath;
        ocmdToUse.strmOut() << c4DataChunkSz;
        ocmdToUse.strmOut() << colMetaVals;
        ocmdToUse.strmOut() << c4BufSz_mbufFirstBlock;
        ocmdToUse.strmOut().c4WriteBuffer(mbufFirstBlock, c4BufSz_mbufFirstBlock);
        ocmdToUse.strmOut() << strExtChunkId;
        ocmdToUse.strmOut() << c4BufSz_mbufExtChunk;
        ocmdToUse.strmOut().c4WriteBuffer(mbufExtChunk, c4BufSz_mbufExtChunk);
        ocmdToUse.strmOut() << c4Flags;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4Cookie;
        ocmdToUse.strmIn() >> c4SerialNum;
        ocmdToUse.strmIn() >> enctLastChange;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TDataSrvAccClientProxy::UploadNext
(
    const tCIDLib::TCard4 c4BufSz_mbufData
    , const THeapBuf& mbufData
    , const tCIDLib::TCard4 c4Cookie
    , const tCIDLib::TBoolean bLast
    , COP tCIDLib::TCard4& c4SerialNum
    , COP tCIDLib::TCard8& enctLastChange)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"UploadNext");
        ocmdToUse.strmOut() << c4BufSz_mbufData;
        ocmdToUse.strmOut().c4WriteBuffer(mbufData, c4BufSz_mbufData);
        ocmdToUse.strmOut() << c4Cookie;
        ocmdToUse.strmOut() << bLast;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4SerialNum;
        ocmdToUse.strmIn() >> enctLastChange;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

