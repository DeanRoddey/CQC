// ----------------------------------------------------------------------------
//  FILE: CQCRemBrws_AppShellAdminClientProxy.cpp
//  DATE: Fri, Feb 14 18:49:45 2020 -0500
//    ID: 78E315ECD585BF17-A16F26D604EC670D
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCRemBrws_.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
AdvRTTIDecls(TCQCAppShellAdminClientProxy,TOrbClientBase)


// ----------------------------------------------------------------------------
// TCQCAppShellAdminClientProxy: Public, static data
// ----------------------------------------------------------------------------
const TString TCQCAppShellAdminClientProxy::strInterfaceId(L"78E315ECD585BF17-A16F26D604EC670D");
const TString TCQCAppShellAdminClientProxy::strScope(L"/CQC/CQCAppShell");



// ----------------------------------------------------------------------------
// TCQCAppShellAdminClientProxy: Constructors and Destructor
// ----------------------------------------------------------------------------
TCQCAppShellAdminClientProxy::TCQCAppShellAdminClientProxy()
{
}

TCQCAppShellAdminClientProxy::
TCQCAppShellAdminClientProxy(const TOrbObjId& ooidSrc, const TString& strNSBinding)
{
    #if CID_DEBUG_ON
    if (!ooidSrc.oidKey().bIsInterfaceId(strInterfaceId))
    {
        facCIDOrb().ThrowErr
        (
            CID_FILE
            , CID_LINE
            , kOrbErrs::errcClient_BadIntfId
            , tCIDLib::ESeverities::Failed
            , tCIDLib::EErrClasses::BadParms
            , ooidSrc.oidKey().mhashInterface()
            , strInterfaceId
        );
    }
    #endif
    SetObjId(ooidSrc, strNSBinding, kCIDLib::False);
}

TCQCAppShellAdminClientProxy::~TCQCAppShellAdminClientProxy()
{
}

// ----------------------------------------------------------------------------
// TCQCAppShellAdminClientProxy: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TBoolean TCQCAppShellAdminClientProxy::bQueryNewMsgs
(
    tCIDLib::TCard4& c4MsgIndex
    , TVector<TString>& colMsgs
    , const tCIDLib::TBoolean bAddNewLines)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryNewMsgs");
        ocmdToUse.strmOut() << c4MsgIndex;
        ocmdToUse.strmOut() << bAddNewLines;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4MsgIndex;
            ocmdToUse.strmIn() >> colMsgs;
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCAppShellAdminClientProxy::c4QueryApps
(
    TVector<TKeyValuePair>& colApps)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QueryApps");
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> colApps;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TVoid TCQCAppShellAdminClientProxy::CycleApps()
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"CycleApps");
        Dispatch(60000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

