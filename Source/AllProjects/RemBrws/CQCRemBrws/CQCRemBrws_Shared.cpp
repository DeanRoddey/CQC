// ----------------------------------------------------------------------------
//  FILE: CQCRemBrws_Shared.cpp
//  DATE: Fri, Feb 12 21:14:14 2021 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

#include "CQCRemBrws_.hpp"

const TString kCQCRemBrws::strPath_Root(L"/");
const TString kCQCRemBrws::strPath_Accounts(L"/Configure/Accounts");
const TString kCQCRemBrws::strPath_Configure(L"/Configure");
const TString kCQCRemBrws::strPath_Customize(L"/Customize");
const TString kCQCRemBrws::strPath_Devices(L"/Devices");
const TString kCQCRemBrws::strPath_ExploreLogs(L"/System/Explore Logs");
const TString kCQCRemBrws::strPath_Help(L"/Help");
const TString kCQCRemBrws::strPath_Help_About(L"/Help/About");
const TString kCQCRemBrws::strPath_Help_Actions(L"/Help/Docs/Actions");
const TString kCQCRemBrws::strPath_Help_Acts_BigPicture(L"/Help/Docs/Actions/Big Picture");
const TString kCQCRemBrws::strPath_Help_Acts_Reference(L"/Help/Docs/Actions/Reference");
const TString kCQCRemBrws::strPath_Help_CML(L"/Help/Docs/CML");
const TString kCQCRemBrws::strPath_Help_CML_BigPicture(L"/Help/Docs/CML/Big Picture");
const TString kCQCRemBrws::strPath_Help_CML_Reference(L"/Help/Docs/CML/Reference");
const TString kCQCRemBrws::strPath_Help_Interface(L"/Help/Docs/Interface");
const TString kCQCRemBrws::strPath_Help_Interface_BigPicture(L"/Help/Docs/Interface/Big Picture");
const TString kCQCRemBrws::strPath_Help_Interface_Reference(L"/Help/Docs/Interface/Reference");
const TString kCQCRemBrws::strPath_Help_Docs(L"/Help/Docs");
const TString kCQCRemBrws::strPath_Help_Home(L"/Help/Docs/Home");
const TString kCQCRemBrws::strPath_Help_Intro(L"/Help/Docs/Introduction");
const TString kCQCRemBrws::strPath_Help_Install(L"/Help/Docs/Installation");
const TString kCQCRemBrws::strPath_Help_Drivers(L"/Help/Docs/Drivers");
const TString kCQCRemBrws::strPath_Help_Drivers_BigPicture(L"/Help/Docs/Drivers/Big Picture");
const TString kCQCRemBrws::strPath_Help_Drivers_Reference(L"/Help/Docs/Drivers/Reference");
const TString kCQCRemBrws::strPath_Help_Tools(L"/Help/Docs/Tools");
const TString kCQCRemBrws::strPath_Help_Videos(L"/Help/Docs/Videos");
const TString kCQCRemBrws::strPath_Help_V2Classes(L"/Help/Docs/V2 Classes");
const TString kCQCRemBrws::strPath_Help_VoiceControl(L"/Help/Docs/Voice Control");
const TString kCQCRemBrws::strPath_Help_VoiceControl_BigPicture(L"/Help/Docs/Voice Control/Overview");
const TString kCQCRemBrws::strPath_Help_VoiceControl_Echo(L"/Help/Docs/Voice Control/Echo");
const TString kCQCRemBrws::strPath_Help_VoiceControl_CQCVoice(L"/Help/Docs/Voice Control/CQCVoice");
const TString kCQCRemBrws::strPath_EMailAccts(L"/Configure/Accounts/EMail");
const TString kCQCRemBrws::strPath_EvMonitors(L"/Customize/Events/Monitors");
const TString kCQCRemBrws::strPath_Events(L"/Customize/Events");
const TString kCQCRemBrws::strPath_Location(L"/Configure/Location");
const TString kCQCRemBrws::strPath_LogicSrv(L"/Configure/LogicSrv");
const TString kCQCRemBrws::strPath_System_Monitor(L"/System/Monitor");
const TString kCQCRemBrws::strPath_MonitorEvTriggers(L"/System/Monitor/Event Triggers");
const TString kCQCRemBrws::strPath_Ports(L"/Configure/Ports");
const TString kCQCRemBrws::strPath_GC100Ports(L"/Configure/Ports/GC-100");
const TString kCQCRemBrws::strPath_JAPwrPorts(L"/Configure/Ports/JustAddPwr");
const TString kCQCRemBrws::strPath_SchEvents(L"/Customize/Events/Scheduled");
const TString kCQCRemBrws::strPath_System(L"/System");
const TString kCQCRemBrws::strPath_SystemCfg(L"/Configure/SystemCfg");
const TString kCQCRemBrws::strPath_TrgEvents(L"/Customize/Events/Triggered");
const TString kCQCRemBrws::strPath_Users(L"/Configure/Users");
const TString kCQCRemBrws::strItem_Actions(L"Actions");
const TString kCQCRemBrws::strItem_CML(L"CML");
const TString kCQCRemBrws::strItem_Configure(L"Configure");
const TString kCQCRemBrws::strItem_Customize(L"Customize");
const TString kCQCRemBrws::strItem_Devices(L"Devices");
const TString kCQCRemBrws::strItem_Docs(L"Docs");
const TString kCQCRemBrws::strItem_Drivers(L"Drivers");
const TString kCQCRemBrws::strItem_Help(L"Help");
const TString kCQCRemBrws::strItem_Interface(L"Interface");
const TString kCQCRemBrws::strItem_System(L"System");
const TString kCQCRemBrws::strItem_VoiceControl(L"Voice Control");
const TString kCQCRemBrws::strChunkId_Thumbnail(L"/CQC/ImgStore/Thumb");
const TString kCQCRemBrws::strChunkId_Key(L"/CQC/DataSrv/Redun");
const TString kCQCRemBrws::strChunkId_PlainLen(L"/CQC/DataSrv/OrgLen");
const TString kCQCRemBrws::strMetaKey_MinRole(L"/CQC/Data/MinRole");
const TString kCQCRemBrws::strMetaKey_Encrypted(L"/CQC/Data/Encrypted");
const TString kCQCRemBrws::strMetaKey_ImgDepth(L"/CQC/Img/Depth");
const TString kCQCRemBrws::strMetaKey_ImgFormat(L"/CQC/Img/Format");
const TString kCQCRemBrws::strMetaKey_ImgSize(L"/CQC/Img/Size");
const TString kCQCRemBrws::strMetaKey_Paused(L"/CQC/Data/Paused");
const TString kCQCRemBrws::strMetaKey_Plain(L"/CQC/Data/Plain");
const TString kCQCRemBrws::strMetaKey_ThumbSize(L"/CQC/Img/ThumbSize");


static TEnumMap::TEnumValItem aeitemValues_EDTypes[18] = 
{
    {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::Driver), 0, 0,  { L"", L"/Devices", L"", L"Driver", L"EDTypes::Driver", L"device driver" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::EMailAccount), 0, 0,  { L"", L"/Configure/Accounts/EMail", L"", L"EMailAccount", L"EDTypes::EMailAccount", L"EMail account" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::EvMonitor), 0, 0,  { L"", L"/Customize/Events/Monitors", L"", L"EvMonitor", L"EDTypes::EvMonitor", L"event monitor" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::GlobalAct), 0, 0,  { L"", L"/Customize/GlobalActs", L"", L"GlobalAct", L"EDTypes::GlobalAct", L"global action" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::Help), 0, 0,  { L"", L"/Help", L"", L"Help", L"EDTypes::Help", L"help" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::Host), 0, 0,  { L"", L"/System/Hosts", L"", L"Host", L"EDTypes::Host", L"host" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::Image), 0, 0,  { L"", L"/Customize/Images", L"", L"Image", L"EDTypes::Image", L"image" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::Location), 0, 0,  { L"", L"/Configure/Location", L"", L"Location", L"EDTypes::Location", L"system lat/long" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::LogicSrv), 0, 0,  { L"", L"/Configure/LogicSrv", L"", L"LogicSrv", L"EDTypes::LogicSrv", L"Logic Server config" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::Macro), 0, 0,  { L"", L"/Customize/Macros", L"", L"Macro", L"EDTypes::Macro", L"CML Macro" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::GC100Ports), 0, 0,  { L"", L"/Configure/Ports/GC-100", L"", L"GC100Ports", L"EDTypes::GC100Ports", L"GC-100 serial ports" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::SchEvent), 0, 0,  { L"", L"/Customize/Events/Scheduled", L"", L"SchEvent", L"EDTypes::SchEvent", L"scheduled event" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::SystemCfg), 0, 0,  { L"", L"/Configure/SystemCfg", L"", L"SystemCfg", L"EDTypes::SystemCfg", L"system configuration" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::System), 0, 0,  { L"", L"/System", L"", L"System", L"EDTypes::System", L"system information" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::Template), 0, 0,  { L"", L"/Customize/Interfaces", L"", L"Template", L"EDTypes::Template", L"interface template" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::TrgEvent), 0, 0,  { L"", L"/Customize/Events/Triggered", L"", L"TrgEvent", L"EDTypes::TrgEvent", L"triggered event" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::User), 0, 0,  { L"", L"/Configure/Users", L"", L"User", L"EDTypes::User", L"user account" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EDTypes::JAPwrPorts), 0, 0,  { L"", L"/Configure/Ports/JustAddPwr", L"", L"JAPwrPorts", L"EDTypes::JAPwrPorts", L"Just Add Power serial ports" } }

};

static TEnumMap emapEDTypes
(
     L"EDTypes"
     , 18
     , kCIDLib::False
     , aeitemValues_EDTypes
     , nullptr
     , tCIDLib::TCard4(tCQCRemBrws::EDTypes::Count)
);

const TString& tCQCRemBrws::strAltXlatEDTypes(const tCQCRemBrws::EDTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEDTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::AltText, bThrowIfNot);
}

tCQCRemBrws::EDTypes tCQCRemBrws::eAltXlatEDTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCRemBrws::EDTypes(emapEDTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::AltText, bThrowIfNot));
}

const TString& tCQCRemBrws::strAltXlat2EDTypes(const tCQCRemBrws::EDTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEDTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCQCRemBrws::EDTypes tCQCRemBrws::eAltXlat2EDTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCRemBrws::EDTypes(emapEDTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

const TString& tCQCRemBrws::strLoadEDTypes(const tCQCRemBrws::EDTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEDTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}
const TString& tCQCRemBrws::strXlatEDTypes(const tCQCRemBrws::EDTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEDTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCRemBrws::EDTypes tCQCRemBrws::eXlatEDTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCRemBrws::EDTypes(emapEDTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCRemBrws::EDTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur = 0;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCRemBrws::EDTypes(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCRemBrws::EDTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCRemBrws::bIsValidEnum(const tCQCRemBrws::EDTypes eVal)
{
    return emapEDTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EItemFlags[16] = 
{
    {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::IsScope), 0, 0,  { L"", L"", L"", L"IsScope", L"EItemFlags::IsScope", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::NonTyped), 0, 0,  { L"", L"", L"", L"NonTyped", L"EItemFlags::NonTyped", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::Root), 0, 0,  { L"", L"", L"", L"Root", L"EItemFlags::Root", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::System), 0, 0,  { L"", L"", L"", L"System", L"EItemFlags::System", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::CanNew), 0, 0,  { L"", L"", L"", L"CanNew", L"EItemFlags::CanNew", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::CanDelete), 0, 0,  { L"", L"", L"", L"CanDelete", L"EItemFlags::CanDelete", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::CanRename), 0, 0,  { L"", L"", L"", L"CanRename", L"EItemFlags::CanRename", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::CanEdit), 0, 0,  { L"", L"", L"", L"CanEdit", L"EItemFlags::CanEdit", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::SpecialScope), 0, 0,  { L"", L"", L"", L"SpecialScope", L"EItemFlags::SpecialScope", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::TypeRoot), 0, 0,  { L"", L"", L"", L"TypeRoot", L"EItemFlags::TypeRoot", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::SystemRoot), 0, 0,  { L"", L"", L"", L"SystemRoot", L"EItemFlags::SystemRoot", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::UserRoot), 0, 0,  { L"", L"", L"", L"UserRoot", L"EItemFlags::UserRoot", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::SystemItem), 0, 0,  { L"", L"", L"", L"SystemItem", L"EItemFlags::SystemItem", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::SystemScope), 0, 0,  { L"", L"", L"", L"SystemScope", L"EItemFlags::SystemScope", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::UserItem), 0, 0,  { L"", L"", L"", L"UserItem", L"EItemFlags::UserItem", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EItemFlags::UserScope), 0, 0,  { L"", L"", L"", L"UserScope", L"EItemFlags::UserScope", L"" } }

};

static TEnumMap emapEItemFlags
(
     L"EItemFlags"
     , 16
     , kCIDLib::True
     , aeitemValues_EItemFlags
     , nullptr
     , tCIDLib::TCard4(tCQCRemBrws::EItemFlags::None)
);

const TString& tCQCRemBrws::strLoadEItemFlags(const tCQCRemBrws::EItemFlags eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEItemFlags.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}
const TString& tCQCRemBrws::strXlatEItemFlags(const tCQCRemBrws::EItemFlags eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEItemFlags.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCQCRemBrws::EItemFlags tCQCRemBrws::eXlatEItemFlags(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCRemBrws::EItemFlags(emapEItemFlags.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCRemBrws::EItemFlags* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur = 0;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCRemBrws::EItemFlags(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCRemBrws::EItemFlags* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCRemBrws::bIsValidEnum(const tCQCRemBrws::EItemFlags eVal)
{
    return emapEItemFlags.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EQSFlags[4] = 
{
    {  tCIDLib::TInt4(tCQCRemBrws::EQSFlags::None), 0, 0,  { L"", L"", L"", L"None", L"EQSFlags::None", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EQSFlags::Items), 0, 0,  { L"", L"", L"", L"Items", L"EQSFlags::Items", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EQSFlags::Scopes), 0, 0,  { L"", L"", L"", L"Scopes", L"EQSFlags::Scopes", L"" } }
  , {  tCIDLib::TInt4(tCQCRemBrws::EQSFlags::Both), 0, 0,  { L"", L"", L"", L"Both", L"EQSFlags::Both", L"" } }

};

static TEnumMap emapEQSFlags
(
     L"EQSFlags"
     , 4
     , kCIDLib::False
     , aeitemValues_EQSFlags
     , nullptr
     , tCIDLib::TCard4(tCQCRemBrws::EQSFlags::Count)
);

tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCRemBrws::EQSFlags* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur = 0;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCRemBrws::EQSFlags(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCRemBrws::EQSFlags* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCRemBrws::bIsValidEnum(const tCQCRemBrws::EQSFlags eVal)
{
    return emapEQSFlags.bIsValidEnum(tCIDLib::TCard4(eVal));

}

