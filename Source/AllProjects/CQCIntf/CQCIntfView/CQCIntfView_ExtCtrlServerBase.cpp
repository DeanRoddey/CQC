// ----------------------------------------------------------------------------
//  FILE: CQCIntfView_ExtCtrlServerBase.cpp
//  DATE: Fri, Feb 14 18:49:46 2020 -0500
//    ID: DC27C0F17755A031-863B6944077CC705
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCIntfView.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
RTTIDecls(TIntfCtrlServerBase,TOrbServerBase)


// ----------------------------------------------------------------------------
// Public, static data
// ----------------------------------------------------------------------------
const TString TIntfCtrlServerBase::strInterfaceId(L"DC27C0F17755A031-863B6944077CC705");
const TString TIntfCtrlServerBase::strBinding(L"/CQC/IntfCtrls/%(b)");
const TString TIntfCtrlServerBase::strScope(L"/CQC/IntfCtrls");


// ----------------------------------------------------------------------------
// TIntfCtrlServerBase: Destructor
// ----------------------------------------------------------------------------
TIntfCtrlServerBase::~TIntfCtrlServerBase()
{
}

// ----------------------------------------------------------------------------
// TIntfCtrlServerBase: Protected Constructors
// ----------------------------------------------------------------------------
TIntfCtrlServerBase::TIntfCtrlServerBase() :
    TOrbServerBase(strInterfaceId, L"TIntfCtrlClientProxy" )
{
}

TIntfCtrlServerBase::TIntfCtrlServerBase(const TOrbObjId& ooidThis) :
    TOrbServerBase(ooidThis)
{
}

// ----------------------------------------------------------------------------
// TIntfCtrlServerBase: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TIntfCtrlServerBase::Dispatch(const TString& strMethodName, TOrbCmd& orbcToDispatch)
{
    if (strMethodName == L"bSpeakText")
    {
        TString strToSpeak;
        orbcToDispatch.strmIn() >> strToSpeak;
        tCIDLib::TBoolean retVal = bSpeakText
        (
            strToSpeak
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"c4Poll")
    {
        TString strBaseTmpl;
        TString strTopTmpl;
        tCIDLib::TBoolean bMaximized = {};
        tCIDLib::TCard4 retVal = c4Poll
        (
            strBaseTmpl
          , strTopTmpl
          , bMaximized
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << strBaseTmpl;
        orbcToDispatch.strmOut() << strTopTmpl;
        orbcToDispatch.strmOut() << bMaximized;
    }
     else if (strMethodName == L"DoFrameOp")
    {
        tCQCKit::EIVFrmOps eOp;
        orbcToDispatch.strmIn() >> eOp;
        DoFrameOp
        (
            eOp
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"DoMiscOp")
    {
        tCQCKit::EIVMiscOps eOp;
        orbcToDispatch.strmIn() >> eOp;
        DoMiscOp
        (
            eOp
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"Invoke")
    {
        Invoke
        (
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"LoadOverlay")
    {
        TString strOvrName;
        orbcToDispatch.strmIn() >> strOvrName;
        TString strTmplName;
        orbcToDispatch.strmIn() >> strTmplName;
        LoadOverlay
        (
            strOvrName
          , strTmplName
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"LoadTemplate")
    {
        TString strTmplName;
        orbcToDispatch.strmIn() >> strTmplName;
        LoadTemplate
        (
            strTmplName
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"Navigation")
    {
        tCQCKit::EScrNavOps eOp;
        orbcToDispatch.strmIn() >> eOp;
        Navigation
        (
            eOp
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"PlayWAV")
    {
        TString strPath;
        orbcToDispatch.strmIn() >> strPath;
        PlayWAV
        (
            strPath
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetGlobalVar")
    {
        TString strVarName;
        orbcToDispatch.strmIn() >> strVarName;
        TString strValue;
        orbcToDispatch.strmIn() >> strValue;
        SetGlobalVar
        (
            strVarName
          , strValue
        );
        orbcToDispatch.strmOut().Reset();
    }
     else
    {
         TParent::Dispatch(strMethodName, orbcToDispatch);
    }
}

