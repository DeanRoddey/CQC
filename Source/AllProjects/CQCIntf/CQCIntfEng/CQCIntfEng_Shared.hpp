// ----------------------------------------------------------------------------
//  FILE: CQCIntfEng_Shared.hpp
//  DATE: Fri, Feb 12 21:14:15 2021 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------
#pragma once

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Constants namespace
// ----------------------------------------------------------------------------
namespace kCQCIntfEng
{
    
    // ------------------------------------------------------------------------
    //  Flags for the widget styles field. This is used by the widget class
    //  to store which of the base attribute style flags is set or cleared
    //  for that particular widget, e.g. transparent background, flyover, etc...
    //  
    //  Note that these contain the configed settings. There is another set of
    //  flags that indicates what settings that a widget can actual have. This
    //  other set enables/disables controls in the base config tab to indicate
    //  to the user which settings are valid for that widget.
    //  
    //  These are persisted, since they are widget configuration data, so you
    //  can never change them unless you account for it when reading in old
    //  data. Put new items at the end always.
    //                  
    // ------------------------------------------------------------------------
    constexpr tCIDLib::TCard4 c4StyleFlag_Transparent = 0x00000001;
    constexpr tCIDLib::TCard4 c4StyleFlag_HasBorder = 0x00000002;
    constexpr tCIDLib::TCard4 c4StyleFlag_NoInertia = 0x00000004;
    constexpr tCIDLib::TCard4 c4StyleFlag_Shadow = 0x00000008;
    constexpr tCIDLib::TCard4 c4StyleFlag_Underline = 0x00000010;
    constexpr tCIDLib::TCard4 c4StyleFlag_InitInvisible = 0x00000020;
    
    // ------------------------------------------------------------------------
    //  Flags for the font styles field. This is used by the font interface
    //  mixin class to store the font flags.
    //  
    //  These are persisted, since they are widget configuration data, so you
    //  can never change them unless you account for it when reading in old
    //  data.
    //                  
    // ------------------------------------------------------------------------
    constexpr tCIDLib::TCard4 c4FontFlag_Italic = 0x00000001;
    constexpr tCIDLib::TCard4 c4FontFlag_Bold = 0x00000002;
    constexpr tCIDLib::TCard4 c4FontFlag_NoWrap = 0x00000004;
    
    // ------------------------------------------------------------------------
    //  These are the attribute ids for the various attributes we load
    //  the attribute editor when editing templates and their associated
    //  info. A couple are defined down in CQCKit because it has to create
    //  attributes of those types.
    //                  
    // ------------------------------------------------------------------------
    CQCINTFENGEXPORT const extern TString strAttr_Animate_SkipFirst;
    CQCINTFENGEXPORT const extern TString strAttr_Base_Area;
    CQCINTFENGEXPORT const extern TString strAttr_Base_BgnFill;
    CQCINTFENGEXPORT const extern TString strAttr_Base_Border;
    CQCINTFENGEXPORT const extern TString strAttr_Base_GroupName;
    CQCINTFENGEXPORT const extern TString strAttr_Base_Grouped;
    CQCINTFENGEXPORT const extern TString strAttr_Base_InitInvisible;
    CQCINTFENGEXPORT const extern TString strAttr_Base_Locked;
    CQCINTFENGEXPORT const extern TString strAttr_Base_NoInertia;
    CQCINTFENGEXPORT const extern TString strAttr_Base_Rounding;
    CQCINTFENGEXPORT const extern TString strAttr_Base_Shadow;
    CQCINTFENGEXPORT const extern TString strAttr_Base_Size;
    CQCINTFENGEXPORT const extern TString strAttr_Base_Transparent;
    CQCINTFENGEXPORT const extern TString strAttr_Base_Underline;
    CQCINTFENGEXPORT const extern TString strAttr_Base_WidgetId;
    CQCINTFENGEXPORT const extern TString strAttr_Brws_Layout;
    CQCINTFENGEXPORT const extern TString strAttr_Bool_AutoToggle;
    CQCINTFENGEXPORT const extern TString strAttr_Bool_FalseExpr;
    CQCINTFENGEXPORT const extern TString strAttr_Bool_FalseText;
    CQCINTFENGEXPORT const extern TString strAttr_Bool_StateBasedClrs;
    CQCINTFENGEXPORT const extern TString strAttr_Bool_TrueExpr;
    CQCINTFENGEXPORT const extern TString strAttr_Bool_TrueText;
    CQCINTFENGEXPORT const extern TString strAttr_Cal_SelectType;
    CQCINTFENGEXPORT const extern TString strAttr_CatBrws_InitType;
    CQCINTFENGEXPORT const extern TString strAttr_CatBrws_RepoMon;
    CQCINTFENGEXPORT const extern TString strAttr_CheckBox_Layout;
    CQCINTFENGEXPORT const extern TString strAttr_Clr_Bgn1;
    CQCINTFENGEXPORT const extern TString strAttr_Clr_Bgn2;
    CQCINTFENGEXPORT const extern TString strAttr_Clr_Fgn1;
    CQCINTFENGEXPORT const extern TString strAttr_Clr_Fgn2;
    CQCINTFENGEXPORT const extern TString strAttr_Clr_Fgn3;
    CQCINTFENGEXPORT const extern TString strAttr_Clr_Extra1;
    CQCINTFENGEXPORT const extern TString strAttr_Clr_Extra2;
    CQCINTFENGEXPORT const extern TString strAttr_Clr_Extra3;
    CQCINTFENGEXPORT const extern TString strAttr_DClock_Borders;
    CQCINTFENGEXPORT const extern TString strAttr_DClock_Format;
    CQCINTFENGEXPORT const extern TString strAttr_DClock_Panels;
    CQCINTFENGEXPORT const extern TString strAttr_DClock_RawText;
    CQCINTFENGEXPORT const extern TString strAttr_DBImage_DName;
    CQCINTFENGEXPORT const extern TString strAttr_DBImage_Opacity;
    CQCINTFENGEXPORT const extern TString strAttr_Field;
    CQCINTFENGEXPORT const extern TString strAttr_Fields;
    CQCINTFENGEXPORT const extern TString strAttr_Font_Bold;
    CQCINTFENGEXPORT const extern TString strAttr_Font_Effect;
    CQCINTFENGEXPORT const extern TString strAttr_Font_EffectOfs;
    CQCINTFENGEXPORT const extern TString strAttr_Font_Face;
    CQCINTFENGEXPORT const extern TString strAttr_Font_Height;
    CQCINTFENGEXPORT const extern TString strAttr_Font_Italic;
    CQCINTFENGEXPORT const extern TString strAttr_Font_NoWrap;
    CQCINTFENGEXPORT const extern TString strAttr_Font_HJustify;
    CQCINTFENGEXPORT const extern TString strAttr_Font_VJustify;
    CQCINTFENGEXPORT const extern TString strAttr_Moniker;
    CQCINTFENGEXPORT const extern TString strAttr_SortOrder;
    CQCINTFENGEXPORT const extern TString strAttr_Graph_Max;
    CQCINTFENGEXPORT const extern TString strAttr_Graph_Min;
    CQCINTFENGEXPORT const extern TString strAttr_Graph_LSName;
    CQCINTFENGEXPORT const extern TString strAttr_Graph_Scale;
    CQCINTFENGEXPORT const extern TString strAttr_HVBrowser_Horz;
    CQCINTFENGEXPORT const extern TString strAttr_HVBrowser_Numbered;
    CQCINTFENGEXPORT const extern TString strAttr_HVBrowser_Size;
    CQCINTFENGEXPORT const extern TString strAttr_HVBrowser_Spacing;
    CQCINTFENGEXPORT const extern TString strAttr_HVBrowser_TextOfs;
    CQCINTFENGEXPORT const extern TString strAttr_Img_HitTransparent;
    CQCINTFENGEXPORT const extern TString strAttr_Img_Image;
    CQCINTFENGEXPORT const extern TString strAttr_Img_Opacity;
    CQCINTFENGEXPORT const extern TString strAttr_Img_Placement;
    CQCINTFENGEXPORT const extern TString strAttr_Img_UseImage;
    CQCINTFENGEXPORT const extern TString strAttr_Images;
    CQCINTFENGEXPORT const extern TString strAttr_Line_EndType;
    CQCINTFENGEXPORT const extern TString strAttr_Line_HVDir;
    CQCINTFENGEXPORT const extern TString strAttr_Line_Thick;
    CQCINTFENGEXPORT const extern TString strAttr_LiveTile_Fld1;
    CQCINTFENGEXPORT const extern TString strAttr_LiveTile_Fld2;
    CQCINTFENGEXPORT const extern TString strAttr_LiveTile_SrcTemplates;
    CQCINTFENGEXPORT const extern TString strAttr_LogoImg_Opacity;
    CQCINTFENGEXPORT const extern TString strAttr_LogoImg_RepoPath;
    CQCINTFENGEXPORT const extern TString strAttr_MappedImg_DefKey;
    CQCINTFENGEXPORT const extern TString strAttr_MappedImg_Mappings;
    CQCINTFENGEXPORT const extern TString strAttr_MediaImg_Attr;
    CQCINTFENGEXPORT const extern TString strAttr_MediaImg_Opacity;
    CQCINTFENGEXPORT const extern TString strAttr_Media_Repo;
    CQCINTFENGEXPORT const extern TString strAttr_Media_Text;
    CQCINTFENGEXPORT const extern TString strAttr_Media_Type;
    CQCINTFENGEXPORT const extern TString strAttr_MRItemBrws_RepoMon;
    CQCINTFENGEXPORT const extern TString strAttr_NumText_DecDigits;
    CQCINTFENGEXPORT const extern TString strAttr_NumText_FldWidth;
    CQCINTFENGEXPORT const extern TString strAttr_NumText_FillChar;
    CQCINTFENGEXPORT const extern TString strAttr_NumText_LeadText;
    CQCINTFENGEXPORT const extern TString strAttr_NumText_TrailText;
    CQCINTFENGEXPORT const extern TString strAttr_NumText_UseGroups;
    CQCINTFENGEXPORT const extern TString strAttr_NumText_FormatStyle;
    CQCINTFENGEXPORT const extern TString strAttr_Overlay_InitTemplate;
    CQCINTFENGEXPORT const extern TString strAttr_Overlay_PageMode;
    CQCINTFENGEXPORT const extern TString strAttr_Overlay_P1;
    CQCINTFENGEXPORT const extern TString strAttr_Overlay_P2;
    CQCINTFENGEXPORT const extern TString strAttr_Overlay_P3;
    CQCINTFENGEXPORT const extern TString strAttr_Overlay_P4;
    CQCINTFENGEXPORT const extern TString strAttr_Overlay_ManualFlick;
    CQCINTFENGEXPORT const extern TString strAttr_PBar_FillUnused;
    CQCINTFENGEXPORT const extern TString strAttr_PBar_Dir;
    CQCINTFENGEXPORT const extern TString strAttr_PBar_Writeable;
    CQCINTFENGEXPORT const extern TString strAttr_Slider_UseLimits;
    CQCINTFENGEXPORT const extern TString strAttr_Slider_Limits;
    CQCINTFENGEXPORT const extern TString strAttr_SpcActButt_Action;
    CQCINTFENGEXPORT const extern TString strAttr_Static_Type;
    CQCINTFENGEXPORT const extern TString strAttr_Static_Min;
    CQCINTFENGEXPORT const extern TString strAttr_Static_Max;
    CQCINTFENGEXPORT const extern TString strAttr_Static_UseRange;
    CQCINTFENGEXPORT const extern TString strAttr_StateItem_Field;
    CQCINTFENGEXPORT const extern TString strAttr_TmImg_HourPat;
    CQCINTFENGEXPORT const extern TString strAttr_TmImg_HourPath;
    CQCINTFENGEXPORT const extern TString strAttr_TmImg_Opacity;
    CQCINTFENGEXPORT const extern TString strAttr_TmImg_MinPat;
    CQCINTFENGEXPORT const extern TString strAttr_TmImg_MinPath;
    CQCINTFENGEXPORT const extern TString strAttr_TmImg_UseHour;
    CQCINTFENGEXPORT const extern TString strAttr_TmImg_UseMin;
    CQCINTFENGEXPORT const extern TString strAttr_Tmpl_TmplActions;
    CQCINTFENGEXPORT const extern TString strAttr_Tmpl_Focus;
    CQCINTFENGEXPORT const extern TString strAttr_Tmpl_LoadWAV;
    CQCINTFENGEXPORT const extern TString strAttr_Tmpl_UnloadWAV;
    CQCINTFENGEXPORT const extern TString strAttr_Tmpl_MinRole;
    CQCINTFENGEXPORT const extern TString strAttr_Tmpl_PopupOpacity;
    CQCINTFENGEXPORT const extern TString strAttr_Tmpl_HotKeys;
    CQCINTFENGEXPORT const extern TString strAttr_Tmpl_Notes;
    CQCINTFENGEXPORT const extern TString strAttr_Tmpl_States;
    CQCINTFENGEXPORT const extern TString strAttr_Tmpl_TrigEvents;
    CQCINTFENGEXPORT const extern TString strAttr_Text_Marquee;
    CQCINTFENGEXPORT const extern TString strAttr_Text_Secret;
    CQCINTFENGEXPORT const extern TString strAttr_TimeText_Format;
    CQCINTFENGEXPORT const extern TString strAttr_TimeText_HideIfZ;
    CQCINTFENGEXPORT const extern TString strAttr_TimeText_Offset;
    CQCINTFENGEXPORT const extern TString strAttr_ToolBar_Buttons;
    CQCINTFENGEXPORT const extern TString strAttr_ToolBar_FillSlots;
    CQCINTFENGEXPORT const extern TString strAttr_ToolBar_Layout;
    CQCINTFENGEXPORT const extern TString strAttr_ToolBar_Size;
    CQCINTFENGEXPORT const extern TString strAttr_ToolBar_Spacing;
    CQCINTFENGEXPORT const extern TString strAttr_ToolBar_VertAdjust;
    CQCINTFENGEXPORT const extern TString strAttr_Var_Variable;
    CQCINTFENGEXPORT const extern TString strAttr_VKnob_Limits;
    CQCINTFENGEXPORT const extern TString strAttr_VKnob_Radius;
    CQCINTFENGEXPORT const extern TString strAttr_VKnob_Range;
    CQCINTFENGEXPORT const extern TString strAttr_VKnob_UseLimits;
    CQCINTFENGEXPORT const extern TString strAttr_VUMeter_HighPer;
    CQCINTFENGEXPORT const extern TString strAttr_VUMeter_LOnly;
    CQCINTFENGEXPORT const extern TString strAttr_VUMeter_MidPer;
    CQCINTFENGEXPORT const extern TString strAttr_VUMeter_Spacing;
    CQCINTFENGEXPORT const extern TString strAttr_WebCam_InitMute;
    CQCINTFENGEXPORT const extern TString strAttr_WebCam_InitVolume;
    CQCINTFENGEXPORT const extern TString strAttr_WebCam_Params;
    CQCINTFENGEXPORT const extern TString strAttr_WebCam_URL;
    CQCINTFENGEXPORT const extern TString strAttr_WebCam_WebURL;
    CQCINTFENGEXPORT const extern TString strAttr_WebBrws_AutoRefresh;
    CQCINTFENGEXPORT const extern TString strAttr_WebBrws_InitURL;
    CQCINTFENGEXPORT const extern TString strAttr_WebBrws_Minutes;
    CQCINTFENGEXPORT const extern TString strAttr_WebBrws_Silent;
    CQCINTFENGEXPORT const extern TString strAttr_WebImg_HdrKey1;
    CQCINTFENGEXPORT const extern TString strAttr_WebImg_HdrKey2;
    CQCINTFENGEXPORT const extern TString strAttr_WebImg_HdrVal1;
    CQCINTFENGEXPORT const extern TString strAttr_WebImg_HdrVal2;
    CQCINTFENGEXPORT const extern TString strAttr_WebImg_NoCache;
    CQCINTFENGEXPORT const extern TString strAttr_WebImg_Opacity;
    CQCINTFENGEXPORT const extern TString strAttr_WebImg_Placement;
    CQCINTFENGEXPORT const extern TString strAttr_WebImg_RefreshMSs;
    CQCINTFENGEXPORT const extern TString strAttr_WebImg_URL;
    CQCINTFENGEXPORT const extern TString strAttr_Widget_Caption;
    CQCINTFENGEXPORT const extern TString strAttr_Widget_StatesNeg;
    CQCINTFENGEXPORT const extern TString strAttr_Widget_StatesDisplay;
    CQCINTFENGEXPORT const extern TString strAttr_Widget_StatesLogOp;
    CQCINTFENGEXPORT const extern TString strAttr_Widget_States;
    CQCINTFENGEXPORT const extern TString strAttr_Xlats;
    
    // ------------------------------------------------------------------------
    //  These are the attribute type and special attribute types used in the
    //  attribute editor. In some cases we set the main type to a built in
    //  type so that the user can directly enter it, and use the special
    //  type to handle visual editing. And in some cases we have to use our
    //  own main type to prevent the attribute editor from trying to format
    //  the value for display. It's also used to trigger generic input
    //  validation in the attribute editor.
    //                  
    // ------------------------------------------------------------------------
    CQCINTFENGEXPORT const extern TString strAttrType_Expression;
    CQCINTFENGEXPORT const extern TString strAttrType_Image;
    CQCINTFENGEXPORT const extern TString strAttrType_Images;
    CQCINTFENGEXPORT const extern TString strAttrType_ImageScope;
    CQCINTFENGEXPORT const extern TString strAttrType_LSGraph;
    CQCINTFENGEXPORT const extern TString strAttrType_Moniker;
    CQCINTFENGEXPORT const extern TString strAttrType_RepoMoniker;
    CQCINTFENGEXPORT const extern TString strAttrType_Template;
    
    // ------------------------------------------------------------------------
    //  Special targets in the interface system, such as a target for the viewer itself
    //  to which link operations can be targeted. And the base part of the default
    //  widget id assigned to unnamed widgets when loaded in viewer mode.
    //                  
    // ------------------------------------------------------------------------
    CQCINTFENGEXPORT const extern TString strCTarId_IntfViewer;
    CQCINTFENGEXPORT const extern TString strDefWidgetIdPref;
    
    // ------------------------------------------------------------------------
    //  These are unique ids for CQC commands specific to the user interface level
    //  of the system.
    //                  
    // ------------------------------------------------------------------------
    CQCINTFENGEXPORT const extern TString strCmdId_LoadOverlay;
    CQCINTFENGEXPORT const extern TString strCmdId_DoLink;
    CQCINTFENGEXPORT const extern TString strCmdId_SetWidgetClr;
    CQCINTFENGEXPORT const extern TString strCmdId_SetSecretMode;
    CQCINTFENGEXPORT const extern TString strCmdId_SetMaxChars;
    CQCINTFENGEXPORT const extern TString strCmdId_InvokePopup;
    CQCINTFENGEXPORT const extern TString strCmdId_InvokePopout;
    CQCINTFENGEXPORT const extern TString strCmdId_LoadDefTmpl;
    CQCINTFENGEXPORT const extern TString strCmdId_SetBlankOpts;
    CQCINTFENGEXPORT const extern TString strCmdId_SetBrowserList;
    CQCINTFENGEXPORT const extern TString strCmdId_SetUserData;
    CQCINTFENGEXPORT const extern TString strCmdId_SetBrowserList2;
    CQCINTFENGEXPORT const extern TString strCmdId_RunTmplAction;
    CQCINTFENGEXPORT const extern TString strCmdId_LoadSiblingOverlay;
    CQCINTFENGEXPORT const extern TString strCmdId_SetTimeout;
    CQCINTFENGEXPORT const extern TString strCmdId_SetInitTemplate;
    CQCINTFENGEXPORT const extern TString strCmdId_NoChildMouse;
    CQCINTFENGEXPORT const extern TString strCmdId_SetAutoBlankMode;
    CQCINTFENGEXPORT const extern TString strCmdId_SetFromEnumVar;
    CQCINTFENGEXPORT const extern TString strCmdId_SetFromEnumFld;
    CQCINTFENGEXPORT const extern TString strCmdId_SetOpacity;
    CQCINTFENGEXPORT const extern TString strCmdId_SetWdgState;
    CQCINTFENGEXPORT const extern TString strCmdId_DismissBlanker;
    CQCINTFENGEXPORT const extern TString strCmdId_SetSelType;
    CQCINTFENGEXPORT const extern TString strCmdId_GetMonth;
    CQCINTFENGEXPORT const extern TString strCmdId_AdjustMonth;
    CQCINTFENGEXPORT const extern TString strCmdId_GetIsTitleLevel;
    CQCINTFENGEXPORT const extern TString strCmdId_GetRetVal;
    CQCINTFENGEXPORT const extern TString strCmdId_SetRetVal;
    CQCINTFENGEXPORT const extern TString strCmdId_GetTmplVal;
    CQCINTFENGEXPORT const extern TString strCmdId_SetTmplVal;
    CQCINTFENGEXPORT const extern TString strCmdId_RetValToTmplVal;
    CQCINTFENGEXPORT const extern TString strCmdId_TmplValToRetVal;
    CQCINTFENGEXPORT const extern TString strCmdId_RIVACmd;
    CQCINTFENGEXPORT const extern TString strCmdId_DoFades;
    CQCINTFENGEXPORT const extern TString strCmdId_SetDblBrowserList;
    CQCINTFENGEXPORT const extern TString strCmdId_SetViewBorderClr;
    CQCINTFENGEXPORT const extern TString strCmdId_DelTBItem;
    CQCINTFENGEXPORT const extern TString strCmdId_SetRepoPath;
    CQCINTFENGEXPORT const extern TString strCmdId_SetCapPattern;
    CQCINTFENGEXPORT const extern TString strCmdId_SetParentState;
    CQCINTFENGEXPORT const extern TString strCmdId_SetLayout;
    CQCINTFENGEXPORT const extern TString strCmdId_LoadAncestor;
    CQCINTFENGEXPORT const extern TString strCmdId_ScrollParent;
    CQCINTFENGEXPORT const extern TString strCmdId_GetWidgetClr;
    CQCINTFENGEXPORT const extern TString strCmdId_SetRange;
    CQCINTFENGEXPORT const extern TString strCmdId_CheckPowerTrans;
    CQCINTFENGEXPORT const extern TString strCmdId_WaitPowerTrans;
    CQCINTFENGEXPORT const extern TString strCmdId_SetBoolCompVal;
    CQCINTFENGEXPORT const extern TString strCmdId_GetOverlayParam;
    CQCINTFENGEXPORT const extern TString strCmdId_SetOverlayParam;
    CQCINTFENGEXPORT const extern TString strCmdId_DynOverLoad;
    CQCINTFENGEXPORT const extern TString strCmdId_InRIVAMode;
    CQCINTFENGEXPORT const extern TString strCmdId_EnableBorder;
    
    // ------------------------------------------------------------------------
    //  These are unique ids for various command runtime values supported at the user
    //  interface level.
    //                  
    // ------------------------------------------------------------------------
    CQCINTFENGEXPORT const extern TString strRTVId_ListItemText;
    CQCINTFENGEXPORT const extern TString strRTVId_UserData;
    CQCINTFENGEXPORT const extern TString strRTVId_StateText;
    CQCINTFENGEXPORT const extern TString strRTVId_SelDay;
    CQCINTFENGEXPORT const extern TString strRTVId_SelMonth;
    CQCINTFENGEXPORT const extern TString strRTVId_SelMonthName;
    CQCINTFENGEXPORT const extern TString strRTVId_SelYear;
    CQCINTFENGEXPORT const extern TString strRTVId_HPageInd;
    CQCINTFENGEXPORT const extern TString strRTVId_VPageInd;
    CQCINTFENGEXPORT const extern TString strRTVId_ColorRGB;
    CQCINTFENGEXPORT const extern TString strRTVId_ColorHSVInt;
    CQCINTFENGEXPORT const extern TString strRTVId_ColorHSVFloat;
    CQCINTFENGEXPORT const extern TString strRTVId_ColorHSInt;
    CQCINTFENGEXPORT const extern TString strRTVId_FlickDir;
}

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tCQCIntfEng
{
    
    // ------------------------------------------------------------------------
    //  The auto-repeat style used by some widgets
    //                  
    // ------------------------------------------------------------------------
    enum class EAutoReps
    {
        None
        , Normal
        , Sloped
        , Count
        , Min = None
        , Max = Sloped
    };
    [[nodiscard]] CQCINTFENGEXPORT EAutoReps eXlatEAutoReps(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatEAutoReps(const EAutoReps eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EAutoReps eVal);

    inline TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCIntfEng::EAutoReps eVal)
    {
        strmTar.WriteEnum(tCIDLib::TCard4(eVal));
        return strmTar;
    }
    inline TBinInStream& operator>>(TBinInStream& strmSrc, COP tCQCIntfEng::EAutoReps& eToFill)
    {
        eToFill = tCQCIntfEng::EAutoReps(strmSrc.c4ReadEnum());
        return strmSrc;
    }
    CQCINTFENGEXPORT TTextOutStream& operator<<(TTextOutStream& strmTar, const tCQCIntfEng::EAutoReps eToStream);
    
    // ------------------------------------------------------------------------
    //  This enum represents the background styles that we support in user
    //  drawn interfaces. If it is one of the image types (we only support
    //  one image type for this release), then an image name will indicate the
    //  actual image to use.
    //  
    //  NOTE:   Add new ones at the END, because this enum is streamed out
    //          to disk in saved interfaces.
    //                  
    // ------------------------------------------------------------------------
    enum class EBgnStyles
    {
        Fill
        , CGradient
        , HGradient
        , LGradient
        , VGradient
        , Count
        , Min = Fill
        , Max = VGradient
    };
    [[nodiscard]] CQCINTFENGEXPORT EBgnStyles eXlatEBgnStyles(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatEBgnStyles(const EBgnStyles eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCINTFENGEXPORT tCIDLib::TVoid FormatEBgnStyles
    (
                   TString&            strTarget
        , const    TString&            strPrefix
        , const    tCIDLib::TCh        chSepChar
        , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::Text
    );
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EBgnStyles eVal);

    inline tCQCIntfEng::EBgnStyles operator++(tCQCIntfEng::EBgnStyles& eVal, int)
    {
        tCQCIntfEng::EBgnStyles eTmp = eVal;
        eVal = tCQCIntfEng::EBgnStyles(int(eVal)+1);
        return eTmp;
    }

    inline TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCIntfEng::EBgnStyles eVal)
    {
        strmTar.WriteEnum(tCIDLib::TCard4(eVal));
        return strmTar;
    }
    inline TBinInStream& operator>>(TBinInStream& strmSrc, COP tCQCIntfEng::EBgnStyles& eToFill)
    {
        eToFill = tCQCIntfEng::EBgnStyles(strmSrc.c4ReadEnum());
        return strmSrc;
    }
    CQCINTFENGEXPORT TTextOutStream& operator<<(TTextOutStream& strmTar, const tCQCIntfEng::EBgnStyles eToStream);
    
    // ------------------------------------------------------------------------
    //  This is used by some widgets that are based on a boolean status, so
    //  they need to be able to remember if they are in true or false, state
    //  or if they don't have a good value to know which.
    //                  
    // ------------------------------------------------------------------------
    enum class EBoolStates
    {
        False
        , True
        , Error
        , Count
        , Min = False
        , Max = Error
    };
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EBoolStates eVal);

    
    // ------------------------------------------------------------------------
    //  The selection schemes used by the calendar widget. This is persisted
    //  so new ones at the end.
    //                  
    // ------------------------------------------------------------------------
    enum class ECalSelTypes
    {
        All
        , Forward
        , Reverse
        , Count
        , Min = All
        , Max = Reverse
    };
    [[nodiscard]] CQCINTFENGEXPORT ECalSelTypes eXlatECalSelTypes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatECalSelTypes(const ECalSelTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCINTFENGEXPORT tCIDLib::TVoid FormatECalSelTypes
    (
                   TString&            strTarget
        , const    TString&            strPrefix
        , const    tCIDLib::TCh        chSepChar
        , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::BaseName
    );
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const ECalSelTypes eVal);

    inline tCQCIntfEng::ECalSelTypes operator++(tCQCIntfEng::ECalSelTypes& eVal, int)
    {
        tCQCIntfEng::ECalSelTypes eTmp = eVal;
        eVal = tCQCIntfEng::ECalSelTypes(int(eVal)+1);
        return eTmp;
    }

    inline TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCIntfEng::ECalSelTypes eVal)
    {
        strmTar.WriteEnum(tCIDLib::TCard4(eVal));
        return strmTar;
    }
    inline TBinInStream& operator>>(TBinInStream& strmSrc, COP tCQCIntfEng::ECalSelTypes& eToFill)
    {
        eToFill = tCQCIntfEng::ECalSelTypes(strmSrc.c4ReadEnum());
        return strmSrc;
    }
    CQCINTFENGEXPORT TTextOutStream& operator<<(TTextOutStream& strmTar, const tCQCIntfEng::ECalSelTypes eToStream);
    
    // ------------------------------------------------------------------------
    //  The time display formats available
    //  
    //  NOTE:   Add new ones at the END, because this enum is streamed out
    //          to disk in saved interfaces.
    //                  
    // ------------------------------------------------------------------------
    enum class EClockFmts
    {
        Hour12
        , Hour24
        , Count
        , Min = Hour12
        , Max = Hour24
    };
    [[nodiscard]] CQCINTFENGEXPORT EClockFmts eXlatEClockFmts(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatEClockFmts(const EClockFmts eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCINTFENGEXPORT tCIDLib::TVoid FormatEClockFmts
    (
                   TString&            strTarget
        , const    TString&            strPrefix
        , const    tCIDLib::TCh        chSepChar
        , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::Text
    );
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EClockFmts eVal);

    inline tCQCIntfEng::EClockFmts operator++(tCQCIntfEng::EClockFmts& eVal, int)
    {
        tCQCIntfEng::EClockFmts eTmp = eVal;
        eVal = tCQCIntfEng::EClockFmts(int(eVal)+1);
        return eTmp;
    }

    inline TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCIntfEng::EClockFmts eVal)
    {
        strmTar.WriteEnum(tCIDLib::TCard4(eVal));
        return strmTar;
    }
    inline TBinInStream& operator>>(TBinInStream& strmSrc, COP tCQCIntfEng::EClockFmts& eToFill)
    {
        eToFill = tCQCIntfEng::EClockFmts(strmSrc.c4ReadEnum());
        return strmSrc;
    }
    CQCINTFENGEXPORT TTextOutStream& operator<<(TTextOutStream& strmTar, const tCQCIntfEng::EClockFmts eToStream);
    
    // ------------------------------------------------------------------------
    //  A flag used by widgets to control their display state. They can be
    //  hidden or disabled based on states in the interface that they are
    //  part of.
    //                  
    // ------------------------------------------------------------------------
    enum class EDispStates
    {
        Normal
        , Disabled
        , Hidden
        , Count
        , Min = Normal
        , Max = Hidden
    };
    [[nodiscard]] CQCINTFENGEXPORT EDispStates eXlatEDispStates(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatEDispStates(const EDispStates eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCINTFENGEXPORT tCIDLib::TVoid FormatEDispStates
    (
                   TString&            strTarget
        , const    TString&            strPrefix
        , const    tCIDLib::TCh        chSepChar
        , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::BaseName
    );
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EDispStates eVal);

    inline tCQCIntfEng::EDispStates operator++(tCQCIntfEng::EDispStates& eVal, int)
    {
        tCQCIntfEng::EDispStates eTmp = eVal;
        eVal = tCQCIntfEng::EDispStates(int(eVal)+1);
        return eTmp;
    }

    inline TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCIntfEng::EDispStates eVal)
    {
        strmTar.WriteEnum(tCIDLib::TCard4(eVal));
        return strmTar;
    }
    inline TBinInStream& operator>>(TBinInStream& strmSrc, COP tCQCIntfEng::EDispStates& eToFill)
    {
        eToFill = tCQCIntfEng::EDispStates(strmSrc.c4ReadEnum());
        return strmSrc;
    }
    
    // ------------------------------------------------------------------------
    //  The value returned from a boolean expression evaluation, which has two
    //  expressions, one for true and one for false. This return value indicates
    //  whether the false statement was true, the true statement was true,
    //  neither were true or an error occured while evaluating them (most likely
    //  due to a field being in error.)
    //                  
    // ------------------------------------------------------------------------
    enum class EExprResults
    {
        False
        , True
        , Neither
        , Error
        , Count
        , Min = False
        , Max = Error
    };
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EExprResults eVal);

    
    // ------------------------------------------------------------------------
    //  These are the hot keys that we can receive and allow the user to map
    //  to actions, currently only through the RIVA protocol.
    //  
    //  KEEP THIS in sync with the equivalent values in the RIVA protocol
    //  header. Internally we use the None entry as an 'Otherwise', i.e. one to
    //  use if no other key is mapped.
    //  
    //  Add new ones at the END!
    //                  
    // ------------------------------------------------------------------------
    enum class EHotKeys
    {
        None
        , ChannelUp
        , ChannelDn
        , Exit
        , Favorites
        , Guide
        , Home
        , JogDown
        , JogSelect
        , JogUp
        , Mute
        , NavDown
        , NavLeft
        , NavRight
        , NavUp
        , Next
        , PageDn
        , PageUp
        , Previous
        , Refresh
        , Search
        , Start
        , TransForward
        , TransPause
        , TransPlay
        , TransReverse
        , TransStop
        , VolumeDn
        , VolumeUp
        , Web
        , AppKey1
        , AppKey2
        , AppKey3
        , AppKey4
        , AppKey5
        , AppKey6
        , AppKey7
        , AppKey8
        , AppKey9
        , AppKey10
        , AppKey11
        , AppKey12
        , AppKey13
        , AppKey14
        , AppKey15
        , AppKey16
        , OK
        , Count
        , Min = None
        , Max = OK
    };
    [[nodiscard]] CQCINTFENGEXPORT EHotKeys eXlatEHotKeys(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatEHotKeys(const EHotKeys eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCINTFENGEXPORT const TString& strLoadEHotKeys(const EHotKeys eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EHotKeys eVal);

    inline tCQCIntfEng::EHotKeys operator++(tCQCIntfEng::EHotKeys& eVal, int)
    {
        tCQCIntfEng::EHotKeys eTmp = eVal;
        eVal = tCQCIntfEng::EHotKeys(int(eVal)+1);
        return eTmp;
    }

    
    // ------------------------------------------------------------------------
    //  Used in one of the facility's methods that queries an image from the
    //  image cache, to indicate the status. Unchanged means the serial number
    //  indicates he has the latest. NewData means that we had a more recent
    //  serial number than him and so he needs to update his serial number
    //  and take the new data.
    //                  
    // ------------------------------------------------------------------------
    enum class EImgQRes
    {
        NotFound
        , Unchanged
        , NewData
        , Count
        , Min = NotFound
        , Max = NewData
    };
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EImgQRes eVal);

    
    // ------------------------------------------------------------------------
    //  The image list mixin allows each image to be marked such that the
    //  widget using the mixin can control which ones are required or optional
    //  and so forth.
    //  
    //  NOTE:   Add new ones at the END, because this enum is streamed out
    //          to disk in saved interfaces.
    //                  
    // ------------------------------------------------------------------------
    enum class EImgReqFlags
    {
        Required
        , Optional
        , RequiredIfAny
        , Count
        , Min = Required
        , Max = RequiredIfAny
    };
    [[nodiscard]] CQCINTFENGEXPORT EImgReqFlags eXlatEImgReqFlags(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatEImgReqFlags(const EImgReqFlags eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCINTFENGEXPORT tCIDLib::TVoid FormatEImgReqFlags
    (
                   TString&            strTarget
        , const    TString&            strPrefix
        , const    tCIDLib::TCh        chSepChar
        , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::BaseName
    );
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EImgReqFlags eVal);

    inline tCQCIntfEng::EImgReqFlags operator++(tCQCIntfEng::EImgReqFlags& eVal, int)
    {
        tCQCIntfEng::EImgReqFlags eTmp = eVal;
        eVal = tCQCIntfEng::EImgReqFlags(int(eVal)+1);
        return eTmp;
    }

    inline TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCIntfEng::EImgReqFlags eVal)
    {
        strmTar.WriteEnum(tCIDLib::TCard4(eVal));
        return strmTar;
    }
    inline TBinInStream& operator>>(TBinInStream& strmSrc, COP tCQCIntfEng::EImgReqFlags& eToFill)
    {
        eToFill = tCQCIntfEng::EImgReqFlags(strmSrc.c4ReadEnum());
        return strmSrc;
    }
    
    // ------------------------------------------------------------------------
    //  Used with the image cache item class, to tell it what type of image
    //  it is holding. We don't cache media images.
    //                  
    // ------------------------------------------------------------------------
    enum class EImgTypes
    {
        Repo
        , Web
        , Count
        , Min = Repo
        , Max = Web
    };
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EImgTypes eVal);

    
    // ------------------------------------------------------------------------
    //  The end style used by the line drawing widget.
    //  
    //  NOTE:   Add new ones at the END, because this enum is streamed out
    //          to disk in saved interfaces.
    //                  
    // ------------------------------------------------------------------------
    enum class ELineEnds
    {
        None
        , Crossbar
        , Circle
        , Count
        , Min = None
        , Max = Circle
    };
    [[nodiscard]] CQCINTFENGEXPORT ELineEnds eXlatELineEnds(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatELineEnds(const ELineEnds eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCINTFENGEXPORT tCIDLib::TVoid FormatELineEnds
    (
                   TString&            strTarget
        , const    TString&            strPrefix
        , const    tCIDLib::TCh        chSepChar
        , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::BaseName
    );
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const ELineEnds eVal);

    inline tCQCIntfEng::ELineEnds operator++(tCQCIntfEng::ELineEnds& eVal, int)
    {
        tCQCIntfEng::ELineEnds eTmp = eVal;
        eVal = tCQCIntfEng::ELineEnds(int(eVal)+1);
        return eTmp;
    }

    inline TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCIntfEng::ELineEnds eVal)
    {
        strmTar.WriteEnum(tCIDLib::TCard4(eVal));
        return strmTar;
    }
    inline TBinInStream& operator>>(TBinInStream& strmSrc, COP tCQCIntfEng::ELineEnds& eToFill)
    {
        eToFill = tCQCIntfEng::ELineEnds(strmSrc.c4ReadEnum());
        return strmSrc;
    }
    CQCINTFENGEXPORT TTextOutStream& operator<<(TTextOutStream& strmTar, const tCQCIntfEng::ELineEnds eToStream);
    
    // ------------------------------------------------------------------------
    //  The basic styles for numeric text widgets. These display an integral or
    //  cardinal numeric value, and can either display the locale specific
    //  format, the raw format, or a custom format.
    //  
    //  NOTE:   Add new ones at the END, because this enum is streamed out
    //          to disk in saved interfaces.
    //                  
    // ------------------------------------------------------------------------
    enum class ENumTxtStyles
    {
        Locale
        , Raw
        , Custom
        , Count
        , Min = Locale
        , Max = Custom
    };
    [[nodiscard]] CQCINTFENGEXPORT ENumTxtStyles eXlatENumTxtStyles(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatENumTxtStyles(const ENumTxtStyles eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCINTFENGEXPORT tCIDLib::TVoid FormatENumTxtStyles
    (
                   TString&            strTarget
        , const    TString&            strPrefix
        , const    tCIDLib::TCh        chSepChar
        , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::BaseName
    );
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const ENumTxtStyles eVal);

    inline tCQCIntfEng::ENumTxtStyles operator++(tCQCIntfEng::ENumTxtStyles& eVal, int)
    {
        tCQCIntfEng::ENumTxtStyles eTmp = eVal;
        eVal = tCQCIntfEng::ENumTxtStyles(int(eVal)+1);
        return eTmp;
    }

    inline TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCIntfEng::ENumTxtStyles eVal)
    {
        strmTar.WriteEnum(tCIDLib::TCard4(eVal));
        return strmTar;
    }
    inline TBinInStream& operator>>(TBinInStream& strmSrc, COP tCQCIntfEng::ENumTxtStyles& eToFill)
    {
        eToFill = tCQCIntfEng::ENumTxtStyles(strmSrc.c4ReadEnum());
        return strmSrc;
    }
    CQCINTFENGEXPORT TTextOutStream& operator<<(TTextOutStream& strmTar, const tCQCIntfEng::ENumTxtStyles eToStream);
    
    // ------------------------------------------------------------------------
    //  Used in the search and replace system, to indicate what types of info
    //  are to be included in the search and replace operation. They aren't
    //  persisted, so new ones can be added where desired.
    //  
    //  We have a special one that is only interpreted by the template itself,
    //  which is whether contained widgets should be searched, or only the
    //  template itself.
    //                  
    // ------------------------------------------------------------------------
    enum class ERepFlags : tCIDLib::TCard4
    {
        ActionParms = 0x00000001
        , AssocField = 0x00000002
        , AssocDevice = 0x00000004
        , AssocVar = 0x00000008
        , Caption = 0x00000010
        , Expressions = 0x00000020
        , Image = 0x00000040
        , Template = 0x00000080
        , URL = 0x00000100
        , FilterParms = 0x00000200
        , Children = 0x10000000
        , Count = 11
        , None = 0
        , AllBits = 0x100003FF
    };
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const ERepFlags eVal);

    [[nodiscard]] constexpr tCQCIntfEng::ERepFlags operator|(const tCQCIntfEng::ERepFlags eLHS, const tCQCIntfEng::ERepFlags eRHS)
    {    
        return tCQCIntfEng::ERepFlags(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCQCIntfEng::ERepFlags& operator|=(tCQCIntfEng::ERepFlags& eLHS, const tCQCIntfEng::ERepFlags eRHS)
    {    
        eLHS = tCQCIntfEng::ERepFlags(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    [[nodiscard]] constexpr tCQCIntfEng::ERepFlags operator&(const tCQCIntfEng::ERepFlags eLHS, const tCQCIntfEng::ERepFlags eRHS)
    {    
        return tCQCIntfEng::ERepFlags(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    }
    constexpr tCQCIntfEng::ERepFlags& operator&=(tCQCIntfEng::ERepFlags& eLHS, const tCQCIntfEng::ERepFlags eRHS)
    {    
        eLHS = tCQCIntfEng::ERepFlags(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
        return eLHS;
    }
    
    // ------------------------------------------------------------------------
    //  There are a few places where we have to idientify a type of widget
    //  that we are targeting, in the WebRIVA system. We need to have a type
    //  down here because the IV engine has to call out to the application
    //  handler when in WebRIVA mode and we don't want to have type specific
    //  calls to do those things where it's not necessary.
    //  
    //  This is not persisted, so order doesn't matter.
    //  
    //  Keep in sync with the WebRIVA protocol!
    //  
    //                  
    // ------------------------------------------------------------------------
    enum class ERIVAWTypes
    {
        WebBrowser
        , WebCamera
        , Count
        , Min = WebBrowser
        , Max = WebCamera
    };
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const ERIVAWTypes eVal);

    
    // ------------------------------------------------------------------------
    //  This enum is used by the special actions button, and indicates which
    //  of the special actions it is to invoke. This is different from the
    //  ESpecialActs enum below, which contains all the special actions, not
    //  just this one.
    //  
    //  NOTE:   Add new ones at the END, because this enum is streamed out
    //          to disk in saved interfaces.
    //                  
    // ------------------------------------------------------------------------
    enum class ESpecActs
    {
        Blanker
        , Exit
        , ExitFS
        , FSMode
        , DisplayOff
        , BlankAndBlanker
        , ClockBlanker
        , ShowBlanker
        , Count
        , Min = Blanker
        , Max = ShowBlanker
    };
    [[nodiscard]] CQCINTFENGEXPORT ESpecActs eXlatESpecActs(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatESpecActs(const ESpecActs eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCINTFENGEXPORT tCIDLib::TVoid FormatESpecActs
    (
                   TString&            strTarget
        , const    TString&            strPrefix
        , const    tCIDLib::TCh        chSepChar
        , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::Text
    );
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const ESpecActs eVal);

    inline tCQCIntfEng::ESpecActs operator++(tCQCIntfEng::ESpecActs& eVal, int)
    {
        tCQCIntfEng::ESpecActs eTmp = eVal;
        eVal = tCQCIntfEng::ESpecActs(int(eVal)+1);
        return eTmp;
    }

    inline TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCIntfEng::ESpecActs eVal)
    {
        strmTar.WriteEnum(tCIDLib::TCard4(eVal));
        return strmTar;
    }
    inline TBinInStream& operator>>(TBinInStream& strmSrc, COP tCQCIntfEng::ESpecActs& eToFill)
    {
        eToFill = tCQCIntfEng::ESpecActs(strmSrc.c4ReadEnum());
        return strmSrc;
    }
    
    // ------------------------------------------------------------------------
    //  The value is used by the toolbar, to indicate the text/image layout configuration.
    //                  
    // ------------------------------------------------------------------------
    enum class ETBLayouts
    {
        Centered
        , TextAbove
        , TextBelow
        , ImgOnly
        , Count
        , Min = Centered
        , Max = ImgOnly
    };
    [[nodiscard]] CQCINTFENGEXPORT ETBLayouts eXlatETBLayouts(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatETBLayouts(const ETBLayouts eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCINTFENGEXPORT tCIDLib::TVoid FormatETBLayouts
    (
                   TString&            strTarget
        , const    TString&            strPrefix
        , const    tCIDLib::TCh        chSepChar
        , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::Text
    );
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const ETBLayouts eVal);

    inline tCQCIntfEng::ETBLayouts operator++(tCQCIntfEng::ETBLayouts& eVal, int)
    {
        tCQCIntfEng::ETBLayouts eTmp = eVal;
        eVal = tCQCIntfEng::ETBLayouts(int(eVal)+1);
        return eTmp;
    }

    inline TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCIntfEng::ETBLayouts eVal)
    {
        strmTar.WriteEnum(tCIDLib::TCard4(eVal));
        return strmTar;
    }
    inline TBinInStream& operator>>(TBinInStream& strmSrc, COP tCQCIntfEng::ETBLayouts& eToFill)
    {
        eToFill = tCQCIntfEng::ETBLayouts(strmSrc.c4ReadEnum());
        return strmSrc;
    }
    
    // ------------------------------------------------------------------------
    //  There is no standard transport icon enum. The transport button widgets
    //  in CIDCtrls are just implemented as individual classes. In our case,
    //  we have one class that displays one of the icons, so we make our own
    //  enum. We just map these to the resource ids of the transport icons
    //  in CIDCtrls.
    //                  
    // ------------------------------------------------------------------------
    enum class ETransIcons
    {
        Down
        , Eject
        , FF
        , Left
        , Next
        , Pause
        , Play
        , Prev
        , Rew
        , Right
        , Stop
        , Up
        , Count
        , Min = Down
        , Max = Up
    };
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const ETransIcons eVal);

    inline TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCIntfEng::ETransIcons eVal)
    {
        strmTar.WriteEnum(tCIDLib::TCard4(eVal));
        return strmTar;
    }
    inline TBinInStream& operator>>(TBinInStream& strmSrc, COP tCQCIntfEng::ETransIcons& eToFill)
    {
        eToFill = tCQCIntfEng::ETransIcons(strmSrc.c4ReadEnum());
        return strmSrc;
    }
    
    // ------------------------------------------------------------------------
    //  Horizontal layout options for widgets that have text and an image
    //  
    //  NOTE:   Add new ones at the END, because this enum is streamed out
    //          to disk in saved interfaces.
    //                  
    // ------------------------------------------------------------------------
    enum class EHTxtImgLayouts
    {
        TextLeft
        , Center
        , TextRight
        , Count
        , Min = TextLeft
        , Max = TextRight
    };
    [[nodiscard]] CQCINTFENGEXPORT EHTxtImgLayouts eXlatEHTxtImgLayouts(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatEHTxtImgLayouts(const EHTxtImgLayouts eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCINTFENGEXPORT tCIDLib::TVoid FormatEHTxtImgLayouts
    (
                   TString&            strTarget
        , const    TString&            strPrefix
        , const    tCIDLib::TCh        chSepChar
        , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::BaseName
    );
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EHTxtImgLayouts eVal);

    inline tCQCIntfEng::EHTxtImgLayouts operator++(tCQCIntfEng::EHTxtImgLayouts& eVal, int)
    {
        tCQCIntfEng::EHTxtImgLayouts eTmp = eVal;
        eVal = tCQCIntfEng::EHTxtImgLayouts(int(eVal)+1);
        return eTmp;
    }

    inline TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCIntfEng::EHTxtImgLayouts eVal)
    {
        strmTar.WriteEnum(tCIDLib::TCard4(eVal));
        return strmTar;
    }
    inline TBinInStream& operator>>(TBinInStream& strmSrc, COP tCQCIntfEng::EHTxtImgLayouts& eToFill)
    {
        eToFill = tCQCIntfEng::EHTxtImgLayouts(strmSrc.c4ReadEnum());
        return strmSrc;
    }
    
    // ------------------------------------------------------------------------
    //  Used with the image cache item class, to tell it what type of image
    //  it is holding. We don't cache media images.
    //                  
    // ------------------------------------------------------------------------
    enum class EValErrTypes
    {
        Widget
        , State
        , Template
        , Count
        , Min = Widget
        , Max = Template
    };
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EValErrTypes eVal);

    
    // ------------------------------------------------------------------------
    //  The mixin interface used by variable based widgets uses this
    //  to keep up with the current state of tracking the variable, so
    //  that the including classes can know where they stand. The
    //  enclosing class will be notified any time the state changes.
    //  
    //  WaitVar     : Waiting for the variable to show up
    //  Rejected    : We found it, but the enclosing class rejected it, probably
    //                because of data type or limits.
    //  ValError    : It exists and has the right type and limits, but the value
    //                is not valid for some reason.
    //  Ready       : We have a good value and just need to watch for changes
    //  
    //  Note that, in theory, ValError cannot happen in variables since they
    //  will always have a value within the set limits. But, just in case, we
    //  make the enclosing classes deal with this, should it become possible
    //  in the future for some reason.
    //                  
    // ------------------------------------------------------------------------
    enum class EVarStates
    {
        WaitVar
        , Rejected
        , ValError
        , Ready
        , Count
        , Min = WaitVar
        , Max = Ready
    };
    [[nodiscard]] CQCINTFENGEXPORT EVarStates eXlatEVarStates(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatEVarStates(const EVarStates eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EVarStates eVal);

    
    // ------------------------------------------------------------------------
    //  Vertical layout options for widgets that have text and an image
    //  
    //  NOTE:   Add new ones at the END, because this enum is streamed out
    //          to disk in saved interfaces.
    //                  
    // ------------------------------------------------------------------------
    enum class EVTxtImgLayouts
    {
        TextTop
        , Center
        , TextBottom
        , Count
        , Min = TextTop
        , Max = TextBottom
    };
    [[nodiscard]] CQCINTFENGEXPORT EVTxtImgLayouts eXlatEVTxtImgLayouts(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] CQCINTFENGEXPORT const TString& strXlatEVTxtImgLayouts(const EVTxtImgLayouts eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCINTFENGEXPORT tCIDLib::TVoid FormatEVTxtImgLayouts
    (
                   TString&            strTarget
        , const    TString&            strPrefix
        , const    tCIDLib::TCh        chSepChar
        , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::BaseName
    );
    [[nodiscard]] CQCINTFENGEXPORT tCIDLib::TBoolean bIsValidEnum(const EVTxtImgLayouts eVal);

    inline tCQCIntfEng::EVTxtImgLayouts operator++(tCQCIntfEng::EVTxtImgLayouts& eVal, int)
    {
        tCQCIntfEng::EVTxtImgLayouts eTmp = eVal;
        eVal = tCQCIntfEng::EVTxtImgLayouts(int(eVal)+1);
        return eTmp;
    }

    inline TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCIntfEng::EVTxtImgLayouts eVal)
    {
        strmTar.WriteEnum(tCIDLib::TCard4(eVal));
        return strmTar;
    }
    inline TBinInStream& operator>>(TBinInStream& strmSrc, COP tCQCIntfEng::EVTxtImgLayouts& eToFill)
    {
        eToFill = tCQCIntfEng::EVTxtImgLayouts(strmSrc.c4ReadEnum());
        return strmSrc;
    }
}

#pragma CIDLIB_POPPACK

CQCINTFENGEXPORT tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCIntfEng::EAutoReps* const aeList, const tCIDLib::TCard4 c4Count);
CQCINTFENGEXPORT tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCIntfEng::EAutoReps* const aeList, const tCIDLib::TCard4 c4Count);

CQCINTFENGEXPORT tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCIntfEng::EBgnStyles* const aeList, const tCIDLib::TCard4 c4Count);
CQCINTFENGEXPORT tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCIntfEng::EBgnStyles* const aeList, const tCIDLib::TCard4 c4Count);


CQCINTFENGEXPORT tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCIntfEng::ECalSelTypes* const aeList, const tCIDLib::TCard4 c4Count);
CQCINTFENGEXPORT tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCIntfEng::ECalSelTypes* const aeList, const tCIDLib::TCard4 c4Count);

CQCINTFENGEXPORT tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCIntfEng::EClockFmts* const aeList, const tCIDLib::TCard4 c4Count);
CQCINTFENGEXPORT tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCIntfEng::EClockFmts* const aeList, const tCIDLib::TCard4 c4Count);

CQCINTFENGEXPORT tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCIntfEng::EDispStates* const aeList, const tCIDLib::TCard4 c4Count);
CQCINTFENGEXPORT tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCIntfEng::EDispStates* const aeList, const tCIDLib::TCard4 c4Count);




CQCINTFENGEXPORT tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCIntfEng::EImgReqFlags* const aeList, const tCIDLib::TCard4 c4Count);
CQCINTFENGEXPORT tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCIntfEng::EImgReqFlags* const aeList, const tCIDLib::TCard4 c4Count);


CQCINTFENGEXPORT tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCIntfEng::ELineEnds* const aeList, const tCIDLib::TCard4 c4Count);
CQCINTFENGEXPORT tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCIntfEng::ELineEnds* const aeList, const tCIDLib::TCard4 c4Count);

CQCINTFENGEXPORT tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCIntfEng::ENumTxtStyles* const aeList, const tCIDLib::TCard4 c4Count);
CQCINTFENGEXPORT tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCIntfEng::ENumTxtStyles* const aeList, const tCIDLib::TCard4 c4Count);



CQCINTFENGEXPORT tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCIntfEng::ESpecActs* const aeList, const tCIDLib::TCard4 c4Count);
CQCINTFENGEXPORT tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCIntfEng::ESpecActs* const aeList, const tCIDLib::TCard4 c4Count);

CQCINTFENGEXPORT tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCIntfEng::ETBLayouts* const aeList, const tCIDLib::TCard4 c4Count);
CQCINTFENGEXPORT tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCIntfEng::ETBLayouts* const aeList, const tCIDLib::TCard4 c4Count);

CQCINTFENGEXPORT tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCIntfEng::ETransIcons* const aeList, const tCIDLib::TCard4 c4Count);
CQCINTFENGEXPORT tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCIntfEng::ETransIcons* const aeList, const tCIDLib::TCard4 c4Count);

CQCINTFENGEXPORT tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCIntfEng::EHTxtImgLayouts* const aeList, const tCIDLib::TCard4 c4Count);
CQCINTFENGEXPORT tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCIntfEng::EHTxtImgLayouts* const aeList, const tCIDLib::TCard4 c4Count);



CQCINTFENGEXPORT tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCIntfEng::EVTxtImgLayouts* const aeList, const tCIDLib::TCard4 c4Count);
CQCINTFENGEXPORT tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCIntfEng::EVTxtImgLayouts* const aeList, const tCIDLib::TCard4 c4Count);

