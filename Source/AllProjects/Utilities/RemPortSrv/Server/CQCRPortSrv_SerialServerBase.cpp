// ----------------------------------------------------------------------------
//  FILE: CQCRPortSrv_SerialServerBase.cpp
//  DATE: Fri, Feb 14 18:49:47 2020 -0500
//    ID: D7E08846B00F19C8-DE9D46C5B2C1AC0C
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCRPortSrv.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
RTTIDecls(TRemSerialSrvServerBase,TOrbServerBase)


// ----------------------------------------------------------------------------
// Public, static data
// ----------------------------------------------------------------------------
const TString TRemSerialSrvServerBase::strInterfaceId(L"D7E08846B00F19C8-DE9D46C5B2C1AC0C");
const TString TRemSerialSrvServerBase::strInstanceId(L"45FBD494F407FBF2-E88F9E5DE9B35D44");
const TString TRemSerialSrvServerBase::strSerialPathPrefix(L"/CQCRemSrv/COM");
const TString TRemSerialSrvServerBase::strSerialFactoryId(L"CQCRemSerialServerFactory");


// ----------------------------------------------------------------------------
// TRemSerialSrvServerBase: Destructor
// ----------------------------------------------------------------------------
TRemSerialSrvServerBase::~TRemSerialSrvServerBase()
{
}

// ----------------------------------------------------------------------------
// TRemSerialSrvServerBase: Protected Constructors
// ----------------------------------------------------------------------------
TRemSerialSrvServerBase::TRemSerialSrvServerBase() :
    TOrbServerBase(strInterfaceId, L"TRemSerialSrvClientProxy" )
{
}

TRemSerialSrvServerBase::TRemSerialSrvServerBase(const TOrbObjId& ooidThis) :
    TOrbServerBase(ooidThis)
{
}

// ----------------------------------------------------------------------------
// TRemSerialSrvServerBase: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TRemSerialSrvServerBase::Dispatch(const TString& strMethodName, TOrbCmd& orbcToDispatch)
{
    if (strMethodName == L"bQueryCommPorts")
    {
        TVector<TString> colToFill;
        tCIDLib::TBoolean retVal = bQueryCommPorts
        (
            colToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"CloseAllPorts")
    {
        CloseAllPorts
        (
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"bIsOpen")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDLib::TBoolean retVal = bIsOpen
        (
            c4Cookie
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bQueryCTSOn")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDLib::TBoolean retVal = bQueryCTSOn
        (
            c4Cookie
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bQueryDSROn")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDLib::TBoolean retVal = bQueryDSROn
        (
            c4Cookie
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"c4Open")
    {
        TString strPortPath;
        orbcToDispatch.strmIn() >> strPortPath;
        tCIDComm::EOpenFlags eFlags;
        orbcToDispatch.strmIn() >> eFlags;
        tCIDLib::TCard4 c4ReadBufSz;
        orbcToDispatch.strmIn() >> c4ReadBufSz;
        tCIDLib::TCard4 c4WriteBufSz;
        orbcToDispatch.strmIn() >> c4WriteBufSz;
        tCIDLib::TCard4 retVal = c4Open
        (
            strPortPath
          , eFlags
          , c4ReadBufSz
          , c4WriteBufSz
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"c4WriteBufMS")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDLib::TCard4 c4BufSz_mbufToWrite;
        orbcToDispatch.strmIn() >> c4BufSz_mbufToWrite;
        THeapBuf mbufToWrite(c4BufSz_mbufToWrite + 1);
        orbcToDispatch.strmIn().c4ReadBuffer(mbufToWrite, c4BufSz_mbufToWrite);
        tCIDLib::TCard4 c4Wait;
        orbcToDispatch.strmIn() >> c4Wait;
        tCIDLib::TCard4 retVal = c4WriteBufMS
        (
            c4Cookie
          , c4BufSz_mbufToWrite
          , mbufToWrite
          , c4Wait
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"Close")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        Close
        (
            c4Cookie
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"Cycle")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDComm::EOpenFlags eFlags;
        orbcToDispatch.strmIn() >> eFlags;
        tCIDLib::TCard4 c4ReadBufSz;
        orbcToDispatch.strmIn() >> c4ReadBufSz;
        tCIDLib::TCard4 c4WriteBufSz;
        orbcToDispatch.strmIn() >> c4WriteBufSz;
        Cycle
        (
            c4Cookie
          , eFlags
          , c4ReadBufSz
          , c4WriteBufSz
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"FlushWriteBuffer")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        FlushWriteBuffer
        (
            c4Cookie
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"PurgeReadData")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        PurgeReadData
        (
            c4Cookie
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"PurgeWriteData")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        PurgeWriteData
        (
            c4Cookie
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"QueryCfg")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        TCommPortCfg cpcfgToFill;
        QueryCfg
        (
            c4Cookie
          , cpcfgToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << cpcfgToFill;
    }
     else if (strMethodName == L"QueryFlags")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDComm::EFlags eToFill;
        QueryFlags
        (
            c4Cookie
          , eToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << eToFill;
    }
     else if (strMethodName == L"QueryLineStates")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDLib::TBoolean bCTSOn = {};
        tCIDLib::TBoolean bDSROn = {};
        tCIDLib::TBoolean bRingOn = {};
        tCIDLib::TBoolean bRLSOn = {};
        QueryLineStates
        (
            c4Cookie
          , bCTSOn
          , bDSROn
          , bRingOn
          , bRLSOn
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << bCTSOn;
        orbcToDispatch.strmOut() << bDSROn;
        orbcToDispatch.strmOut() << bRingOn;
        orbcToDispatch.strmOut() << bRLSOn;
    }
     else if (strMethodName == L"QueryXChars")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDLib::TCard4 c4On = {};
        tCIDLib::TCard4 c4Off = {};
        QueryXChars
        (
            c4Cookie
          , c4On
          , c4Off
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4On;
        orbcToDispatch.strmOut() << c4Off;
    }
     else if (strMethodName == L"ReadBufMS")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDLib::TCard4 c4BufSz_mbufToFill = 0;
        THeapBuf mbufToFill;
        tCIDLib::TCard4 c4MaxBytes;
        orbcToDispatch.strmIn() >> c4MaxBytes;
        tCIDLib::TCard4 c4Wait;
        orbcToDispatch.strmIn() >> c4Wait;
        ReadBufMS
        (
            c4Cookie
          , c4BufSz_mbufToFill
          , mbufToFill
          , c4MaxBytes
          , c4Wait
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4BufSz_mbufToFill;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufToFill, c4BufSz_mbufToFill);
    }
     else if (strMethodName == L"ReadBuf")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDLib::TCard4 c4BufSz_mbufToFill = 0;
        THeapBuf mbufToFill;
        tCIDLib::TCard4 c4MaxBytes;
        orbcToDispatch.strmIn() >> c4MaxBytes;
        tCIDLib::TCard8 enctEndTime;
        orbcToDispatch.strmIn() >> enctEndTime;
        ReadBuf
        (
            c4Cookie
          , c4BufSz_mbufToFill
          , mbufToFill
          , c4MaxBytes
          , enctEndTime
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4BufSz_mbufToFill;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufToFill, c4BufSz_mbufToFill);
    }
     else if (strMethodName == L"Reset")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        Reset
        (
            c4Cookie
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetBaudRate")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDLib::TCard4 c4ToSet;
        orbcToDispatch.strmIn() >> c4ToSet;
        SetBaudRate
        (
            c4Cookie
          , c4ToSet
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetBreak")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDLib::TBoolean bState;
        orbcToDispatch.strmIn() >> bState;
        SetBreak
        (
            c4Cookie
          , bState
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetCfg")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        TCommPortCfg cpcfgPortCfg;
        orbcToDispatch.strmIn() >> cpcfgPortCfg;
        SetCfg
        (
            c4Cookie
          , cpcfgPortCfg
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetDataBits")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDComm::EDataBits eToSet;
        orbcToDispatch.strmIn() >> eToSet;
        SetDataBits
        (
            c4Cookie
          , eToSet
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetDTR")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDComm::EPortDTR eToSet;
        orbcToDispatch.strmIn() >> eToSet;
        SetDTR
        (
            c4Cookie
          , eToSet
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetEOFChar")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDLib::TCard4 c4ToSet;
        orbcToDispatch.strmIn() >> c4ToSet;
        SetEOFChar
        (
            c4Cookie
          , c4ToSet
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetFlags")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDComm::EFlags eToSet;
        orbcToDispatch.strmIn() >> eToSet;
        tCIDComm::EFlags eMask;
        orbcToDispatch.strmIn() >> eMask;
        SetFlags
        (
            c4Cookie
          , eToSet
          , eMask
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetParity")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDComm::EParities eToSet;
        orbcToDispatch.strmIn() >> eToSet;
        SetParity
        (
            c4Cookie
          , eToSet
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetRTS")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDComm::EPortRTS eToSet;
        orbcToDispatch.strmIn() >> eToSet;
        SetRTS
        (
            c4Cookie
          , eToSet
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetStopBits")
    {
        tCIDLib::TCard4 c4Cookie;
        orbcToDispatch.strmIn() >> c4Cookie;
        tCIDComm::EStopBits eToSet;
        orbcToDispatch.strmIn() >> eToSet;
        SetStopBits
        (
            c4Cookie
          , eToSet
        );
        orbcToDispatch.strmOut().Reset();
    }
     else
    {
         TParent::Dispatch(strMethodName, orbcToDispatch);
    }
}

