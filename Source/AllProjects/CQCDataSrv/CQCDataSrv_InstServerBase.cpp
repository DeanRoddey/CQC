// ----------------------------------------------------------------------------
//  FILE: CQCDataSrv_InstServerBase.cpp
//  DATE: Tue, Jan 19 17:39:55 2021 -0500
//    ID: 825C0E370D8C5D6C-0B3B6D941AB56445
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCDataSrv.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
RTTIDecls(TCQCInstServerBase,TOrbServerBase)


// ----------------------------------------------------------------------------
// Public, static data
// ----------------------------------------------------------------------------
const TString TCQCInstServerBase::strInterfaceId(L"825C0E370D8C5D6C-0B3B6D941AB56445");
const TString TCQCInstServerBase::strBinding(L"/CQC/CQCDataServer/InstServerObj");


// ----------------------------------------------------------------------------
// TCQCInstServerBase: Destructor
// ----------------------------------------------------------------------------
TCQCInstServerBase::~TCQCInstServerBase()
{
}

// ----------------------------------------------------------------------------
// TCQCInstServerBase: Protected Constructors
// ----------------------------------------------------------------------------
TCQCInstServerBase::TCQCInstServerBase() :
    TOrbServerBase(strInterfaceId, L"TCQCInstClientProxy" )
{
}

TCQCInstServerBase::TCQCInstServerBase(const TOrbObjId& ooidThis) :
    TOrbServerBase(ooidThis)
{
}

// ----------------------------------------------------------------------------
// TCQCInstServerBase: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TCQCInstServerBase::Dispatch(const TString& strMethodName, TOrbCmd& orbcToDispatch)
{
    if (strMethodName == L"bAddOrUpdateCheatSheet")
    {
        TString strUserName;
        orbcToDispatch.strmIn() >> strUserName;
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TCQCActVarList cavlCheatSheet;
        orbcToDispatch.strmIn() >> cavlCheatSheet;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bAddOrUpdateCheatSheet
        (
            strUserName
          , c4SerialNum
          , cavlCheatSheet
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4SerialNum;
    }
     else if (strMethodName == L"bUpdateEmailAccount")
    {
        TCQCEMailAccount emacctToAdd;
        orbcToDispatch.strmIn() >> emacctToAdd;
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean bMustBeNew;
        orbcToDispatch.strmIn() >> bMustBeNew;
        tCIDLib::TBoolean retVal = bUpdateEmailAccount
        (
            emacctToAdd
          , c4SerialNum
          , sectUser
          , bMustBeNew
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4SerialNum;
    }
     else if (strMethodName == L"bAddOrUpdateGC100Cfg")
    {
        tCIDLib::TCard4 c4BufSz_mbufToSet;
        orbcToDispatch.strmIn() >> c4BufSz_mbufToSet;
        THeapBuf mbufToSet(c4BufSz_mbufToSet + 1);
        orbcToDispatch.strmIn().c4ReadBuffer(mbufToSet, c4BufSz_mbufToSet);
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bAddOrUpdateGC100Cfg
        (
            c4BufSz_mbufToSet
          , mbufToSet
          , c4SerialNum
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4SerialNum;
    }
     else if (strMethodName == L"bAddOrUpdateJAPCfg")
    {
        tCIDLib::TCard4 c4BufSz_mbufToFill;
        orbcToDispatch.strmIn() >> c4BufSz_mbufToFill;
        THeapBuf mbufToFill(c4BufSz_mbufToFill + 1);
        orbcToDispatch.strmIn().c4ReadBuffer(mbufToFill, c4BufSz_mbufToFill);
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bAddOrUpdateJAPCfg
        (
            c4BufSz_mbufToFill
          , mbufToFill
          , c4SerialNum
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4SerialNum;
    }
     else if (strMethodName == L"bDeleteEMailAccount")
    {
        TString strAccount;
        orbcToDispatch.strmIn() >> strAccount;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bDeleteEMailAccount
        (
            strAccount
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bDrvCfgDriverPresent")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strHost;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bDrvCfgDriverPresent
        (
            strMoniker
          , strHost
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << strHost;
    }
     else if (strMethodName == L"bDrvCfgMoveDrivers")
    {
        TString strOldHost;
        orbcToDispatch.strmIn() >> strOldHost;
        TString strNewHost;
        orbcToDispatch.strmIn() >> strNewHost;
        TVector<TString> colMsgs;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bDrvCfgMoveDrivers
        (
            strOldHost
          , strNewHost
          , colMsgs
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colMsgs;
    }
     else if (strMethodName == L"bDrvCfgQueryConfig")
    {
        tCIDLib::TCard4 c4Version = {};
        orbcToDispatch.strmIn() >> c4Version;
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strHost;
        orbcToDispatch.strmIn() >> strHost;
        TCQCDriverObjCfg cqcdcToFill;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bDrvCfgQueryConfig
        (
            c4Version
          , strMoniker
          , strHost
          , cqcdcToFill
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4Version;
            orbcToDispatch.strmOut() << strHost;
            orbcToDispatch.strmOut() << cqcdcToFill;
        }
    }
     else if (strMethodName == L"bDrvCfgQueryHostConfigs")
    {
        tCIDLib::TCard4 c4Version = {};
        orbcToDispatch.strmIn() >> c4Version;
        TString strHost;
        orbcToDispatch.strmIn() >> strHost;
        TVector<TCQCDriverObjCfg> colCfgs;
        TFundVector<tCIDLib::TCard4> fcolCfgVers;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bDrvCfgQueryHostConfigs
        (
            c4Version
          , strHost
          , colCfgs
          , fcolCfgVers
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4Version;
            orbcToDispatch.strmOut() << colCfgs;
            orbcToDispatch.strmOut() << fcolCfgVers;
        }
    }
     else if (strMethodName == L"bDrvCfgQueryHosts")
    {
        TVector<TString> colHosts;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bDrvCfgQueryHosts
        (
            colHosts
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colHosts;
    }
     else if (strMethodName == L"bDrvCfgQueryMonList")
    {
        tCIDLib::TCard4 c4Version = {};
        orbcToDispatch.strmIn() >> c4Version;
        TString strHost;
        orbcToDispatch.strmIn() >> strHost;
        TVector<TString> colToFill;
        TFundVector<tCIDLib::TCard4> fcolVers;
        TFundVector<tCIDLib::TBoolean> fcolClDrvs;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bDrvCfgQueryMonList
        (
            c4Version
          , strHost
          , colToFill
          , fcolVers
          , fcolClDrvs
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4Version;
            orbcToDispatch.strmOut() << colToFill;
            orbcToDispatch.strmOut() << fcolVers;
            orbcToDispatch.strmOut() << fcolClDrvs;
        }
    }
     else if (strMethodName == L"bDrvCfgQueryMonList1")
    {
        TVector<TKeyValuePair> colToFill;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bDrvCfgQueryMonList
        (
            colToFill
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"bDrvCfgSetPause")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TBoolean bNewState;
        orbcToDispatch.strmIn() >> bNewState;
        tCIDLib::TCard4 c4NewVersion = {};
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bDrvCfgSetPause
        (
            strMoniker
          , bNewState
          , c4NewVersion
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4NewVersion;
    }
     else if (strMethodName == L"bQueryCheatSheet")
    {
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        tCIDLib::ELoadRes eLoadRes;
        TString strUserName;
        orbcToDispatch.strmIn() >> strUserName;
        TCQCActVarList cavlCheatSheet;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bQueryCheatSheet
        (
            c4SerialNum
          , eLoadRes
          , strUserName
          , cavlCheatSheet
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4SerialNum;
            orbcToDispatch.strmOut() << eLoadRes;
            orbcToDispatch.strmOut() << cavlCheatSheet;
        }
    }
     else if (strMethodName == L"bQueryDrvManifest")
    {
        TString strMake;
        orbcToDispatch.strmIn() >> strMake;
        TString strModel;
        orbcToDispatch.strmIn() >> strModel;
        TCQCDriverCfg cqcdcToFill;
        tCIDLib::TBoolean retVal = bQueryDrvManifest
        (
            strMake
          , strModel
          , cqcdcToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << cqcdcToFill;
    }
     else if (strMethodName == L"bQueryEmailAccount")
    {
        TString strAccount;
        orbcToDispatch.strmIn() >> strAccount;
        TCQCEMailAccount emacctToFill;
        tCIDLib::TBoolean bThrowIfNot;
        orbcToDispatch.strmIn() >> bThrowIfNot;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bQueryEmailAccount
        (
            strAccount
          , emacctToFill
          , bThrowIfNot
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << emacctToFill;
    }
     else if (strMethodName == L"bQueryEMailAccountNames")
    {
        TVector<TString> colToFill;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bQueryEMailAccountNames
        (
            colToFill
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"bQueryKeyMap")
    {
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        tCIDLib::ELoadRes eLoadRes;
        TString strUserName;
        orbcToDispatch.strmIn() >> strUserName;
        TCQCKeyMap kmToFill;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bQueryKeyMap
        (
            c4SerialNum
          , eLoadRes
          , strUserName
          , kmToFill
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4SerialNum;
            orbcToDispatch.strmOut() << eLoadRes;
            orbcToDispatch.strmOut() << kmToFill;
        }
    }
     else if (strMethodName == L"bQueryLocationInfo")
    {
        tCIDLib::TFloat8 f8Lat = {};
        tCIDLib::TFloat8 f8Long = {};
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bQueryLocationInfo
        (
            f8Lat
          , f8Long
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << f8Lat;
        orbcToDispatch.strmOut() << f8Long;
    }
     else if (strMethodName == L"bQueryProtoFile")
    {
        TString strFileName;
        orbcToDispatch.strmIn() >> strFileName;
        tCIDLib::TCard4 c4BufSz_mbufToFill = 0;
        THeapBuf mbufToFill;
        tCIDLib::TBoolean retVal = bQueryProtoFile
        (
            strFileName
          , c4BufSz_mbufToFill
          , mbufToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4BufSz_mbufToFill;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufToFill, c4BufSz_mbufToFill);
    }
     else if (strMethodName == L"bQueryZWDIIndex")
    {
        tCIDLib::TCard4 c4BufSz_mbufIndex = 0;
        THeapBuf mbufIndex;
        tCIDLib::TCard4 c4BufSz_mbufDTD = 0;
        THeapBuf mbufDTD;
        tCIDLib::TBoolean retVal = bQueryZWDIIndex
        (
            c4BufSz_mbufIndex
          , mbufIndex
          , c4BufSz_mbufDTD
          , mbufDTD
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4BufSz_mbufIndex;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufIndex, c4BufSz_mbufIndex);
        orbcToDispatch.strmOut() << c4BufSz_mbufDTD;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufDTD, c4BufSz_mbufDTD);
    }
     else if (strMethodName == L"bQueryZWDIFile")
    {
        TString strFileName;
        orbcToDispatch.strmIn() >> strFileName;
        tCIDLib::TCard4 c4BufSz_mbufData = 0;
        THeapBuf mbufData;
        tCIDLib::TBoolean retVal = bQueryZWDIFile
        (
            strFileName
          , c4BufSz_mbufData
          , mbufData
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4BufSz_mbufData;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufData, c4BufSz_mbufData);
    }
     else if (strMethodName == L"c4QueryDrvManifests")
    {
        TVector<TCQCDriverCfg> colToFill;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TCard4 retVal = c4QueryDrvManifests
        (
            colToFill
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"DrvCfgQueryDrvsInfo")
    {
        TVector<TString> colMonikers;
        TVector<TString> colMakes;
        TVector<TString> colModels;
        TFundVector<tCQCKit::EDevCats> fcolCats;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        DrvCfgQueryDrvsInfo
        (
            colMonikers
          , colMakes
          , colModels
          , fcolCats
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << colMonikers;
        orbcToDispatch.strmOut() << colMakes;
        orbcToDispatch.strmOut() << colModels;
        orbcToDispatch.strmOut() << fcolCats;
    }
     else if (strMethodName == L"DrvCfgRemoveDrv")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strHost;
        orbcToDispatch.strmIn() >> strHost;
        tCIDLib::TCard4 c4NewVersion = {};
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        DrvCfgRemoveDrv
        (
            strMoniker
          , strHost
          , c4NewVersion
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4NewVersion;
    }
     else if (strMethodName == L"DrvCfgQueryReportInfo")
    {
        TVector<TKeyValues> colToFill;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        DrvCfgQueryReportInfo
        (
            colToFill
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"DrvCfgSetConfig")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strHost;
        orbcToDispatch.strmIn() >> strHost;
        TCQCDriverObjCfg cqcdcToSet;
        orbcToDispatch.strmIn() >> cqcdcToSet;
        tCIDLib::TBoolean bNewDriver;
        orbcToDispatch.strmIn() >> bNewDriver;
        tCIDLib::TCard4 c4NewVersion = {};
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        DrvCfgSetConfig
        (
            strMoniker
          , strHost
          , cqcdcToSet
          , bNewDriver
          , c4NewVersion
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4NewVersion;
    }
     else if (strMethodName == L"eQueryGC100Cfg")
    {
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        tCIDLib::TCard4 c4BufSz_mbufToFill = 0;
        THeapBuf mbufToFill;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::ELoadRes retVal = eQueryGC100Cfg
        (
            c4SerialNum
          , c4BufSz_mbufToFill
          , mbufToFill
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4SerialNum;
        orbcToDispatch.strmOut() << c4BufSz_mbufToFill;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufToFill, c4BufSz_mbufToFill);
    }
     else if (strMethodName == L"eQueryJAPCfg")
    {
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        tCIDLib::TCard4 c4BufSz_mbufToFill = 0;
        THeapBuf mbufToFill;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::ELoadRes retVal = eQueryJAPCfg
        (
            c4SerialNum
          , c4BufSz_mbufToFill
          , mbufToFill
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4SerialNum;
        orbcToDispatch.strmOut() << c4BufSz_mbufToFill;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufToFill, c4BufSz_mbufToFill);
    }
     else if (strMethodName == L"Ping")
    {
        Ping
        (
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"QueryVoiceFiles")
    {
        tCIDLib::TCard4 c4BufSz_mbufTree = 0;
        THeapBuf mbufTree;
        tCIDLib::TCard4 c4BufSz_mbufGrammar = 0;
        THeapBuf mbufGrammar;
        QueryVoiceFiles
        (
            c4BufSz_mbufTree
          , mbufTree
          , c4BufSz_mbufGrammar
          , mbufGrammar
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4BufSz_mbufTree;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufTree, c4BufSz_mbufTree);
        orbcToDispatch.strmOut() << c4BufSz_mbufGrammar;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufGrammar, c4BufSz_mbufGrammar);
    }
     else if (strMethodName == L"RenameEMailAccount")
    {
        TString strOldName;
        orbcToDispatch.strmIn() >> strOldName;
        TString strNewName;
        orbcToDispatch.strmIn() >> strNewName;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        RenameEMailAccount
        (
            strOldName
          , strNewName
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetKeyMap")
    {
        TString strUserName;
        orbcToDispatch.strmIn() >> strUserName;
        TCQCKeyMap kmToSEt;
        orbcToDispatch.strmIn() >> kmToSEt;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        SetKeyMap
        (
            strUserName
          , kmToSEt
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetLocationInfo")
    {
        tCIDLib::TFloat8 f8Lat;
        orbcToDispatch.strmIn() >> f8Lat;
        tCIDLib::TFloat8 f8Long;
        orbcToDispatch.strmIn() >> f8Long;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = SetLocationInfo
        (
            f8Lat
          , f8Long
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"UploadProtocol")
    {
        TString strFileName;
        orbcToDispatch.strmIn() >> strFileName;
        tCIDLib::TCard4 c4BufSz_mbufText;
        orbcToDispatch.strmIn() >> c4BufSz_mbufText;
        THeapBuf mbufText(c4BufSz_mbufText + 1);
        orbcToDispatch.strmIn().c4ReadBuffer(mbufText, c4BufSz_mbufText);
        tCIDLib::TBoolean bSystem;
        orbcToDispatch.strmIn() >> bSystem;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        UploadProtocol
        (
            strFileName
          , c4BufSz_mbufText
          , mbufText
          , bSystem
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"UploadManifest")
    {
        TString strFileName;
        orbcToDispatch.strmIn() >> strFileName;
        tCIDLib::TCard4 c4BufSz_mbufText;
        orbcToDispatch.strmIn() >> c4BufSz_mbufText;
        THeapBuf mbufText(c4BufSz_mbufText + 1);
        orbcToDispatch.strmIn().c4ReadBuffer(mbufText, c4BufSz_mbufText);
        tCIDLib::TBoolean bSystem;
        orbcToDispatch.strmIn() >> bSystem;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        UploadManifest
        (
            strFileName
          , c4BufSz_mbufText
          , mbufText
          , bSystem
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else
    {
         TParent::Dispatch(strMethodName, orbcToDispatch);
    }
}

