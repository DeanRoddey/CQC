// ----------------------------------------------------------------------------
//  FILE: CQCDataSrv_SecurityServerBase.cpp
//  DATE: Tue, Jan 19 17:39:55 2021 -0500
//    ID: 1E1696267012659C-EEB55AB4F80BBE55
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCDataSrv.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
RTTIDecls(TCQCSecureServerBase,TOrbServerBase)


// ----------------------------------------------------------------------------
// Public, static data
// ----------------------------------------------------------------------------
const TString TCQCSecureServerBase::strInterfaceId(L"1E1696267012659C-EEB55AB4F80BBE55");
const TString TCQCSecureServerBase::strBinding(L"/CQC/CQCDataServer/SecurityServerObj");


// ----------------------------------------------------------------------------
// TCQCSecureServerBase: Destructor
// ----------------------------------------------------------------------------
TCQCSecureServerBase::~TCQCSecureServerBase()
{
}

// ----------------------------------------------------------------------------
// TCQCSecureServerBase: Protected Constructors
// ----------------------------------------------------------------------------
TCQCSecureServerBase::TCQCSecureServerBase() :
    TOrbServerBase(strInterfaceId, L"TCQCSecureClientProxy" )
{
}

TCQCSecureServerBase::TCQCSecureServerBase(const TOrbObjId& ooidThis) :
    TOrbServerBase(ooidThis)
{
}

// ----------------------------------------------------------------------------
// TCQCSecureServerBase: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TCQCSecureServerBase::Dispatch(const TString& strMethodName, TOrbCmd& orbcToDispatch)
{
    if (strMethodName == L"bCheckToken")
    {
        TCQCSecToken sectToCheck;
        orbcToDispatch.strmIn() >> sectToCheck;
        tCIDLib::TBoolean retVal = bCheckToken
        (
            sectToCheck
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bLoginReq")
    {
        TString strName;
        orbcToDispatch.strmIn() >> strName;
        TCQCSecChallenge seccToFill;
        tCIDLib::TBoolean retVal = bLoginReq
        (
            strName
          , seccToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << seccToFill;
    }
     else if (strMethodName == L"bGetSToken")
    {
        TCQCSecChallenge seccResponse;
        orbcToDispatch.strmIn() >> seccResponse;
        TCQCSecToken sectToFill;
        TCQCUserAccount uaccToFill;
        tCQCKit::ELoginRes eResult;
        tCIDLib::TBoolean retVal = bGetSToken
        (
            seccResponse
          , sectToFill
          , uaccToFill
          , eResult
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << sectToFill;
        orbcToDispatch.strmOut() << uaccToFill;
        orbcToDispatch.strmOut() << eResult;
    }
     else if (strMethodName == L"bLoginExists")
    {
        TString strToCheck;
        orbcToDispatch.strmIn() >> strToCheck;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bLoginExists
        (
            strToCheck
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bQueryEventKey")
    {
        TMD5Hash mhashKey;
        TMD5Hash mhashSysId;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bQueryEventKey
        (
            mhashKey
          , mhashSysId
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << mhashKey;
        orbcToDispatch.strmOut() << mhashSysId;
    }
     else if (strMethodName == L"bQuerySrvCreds")
    {
        TString strName;
        TString strPassword;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bQuerySrvCreds
        (
            strName
          , strPassword
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << strName;
        orbcToDispatch.strmOut() << strPassword;
    }
     else if (strMethodName == L"bQueryWAccount")
    {
        TString strLogin;
        orbcToDispatch.strmIn() >> strLogin;
        tCIDLib::TCard4 c4BufSz_mbufPW = 0;
        THeapBuf mbufPW;
        tCQCKit::EUserRoles eRole;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bQueryWAccount
        (
            strLogin
          , c4BufSz_mbufPW
          , mbufPW
          , eRole
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4BufSz_mbufPW;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufPW, c4BufSz_mbufPW);
        orbcToDispatch.strmOut() << eRole;
    }
     else if (strMethodName == L"c4QueryAccounts")
    {
        TVector<TCQCUserAccount> colToFill;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TCard4 retVal = c4QueryAccounts
        (
            colToFill
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"ChangePassword")
    {
        TString strLogin;
        orbcToDispatch.strmIn() >> strLogin;
        tCIDLib::TBoolean bIsCQCPW;
        orbcToDispatch.strmIn() >> bIsCQCPW;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TCard4 c4BufSz_mbufNew;
        orbcToDispatch.strmIn() >> c4BufSz_mbufNew;
        THeapBuf mbufNew(c4BufSz_mbufNew + 1);
        orbcToDispatch.strmIn().c4ReadBuffer(mbufNew, c4BufSz_mbufNew);
        ChangePassword
        (
            strLogin
          , bIsCQCPW
          , sectUser
          , c4BufSz_mbufNew
          , mbufNew
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"CreateAccount")
    {
        TCQCUserAccount uaccNew;
        orbcToDispatch.strmIn() >> uaccNew;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        CreateAccount
        (
            uaccNew
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"DeleteAccount")
    {
        TString strLogin;
        orbcToDispatch.strmIn() >> strLogin;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        DeleteAccount
        (
            strLogin
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"DecodeSecurityToken")
    {
        TCQCSecToken sectSrc;
        orbcToDispatch.strmIn() >> sectSrc;
        TString strLogin;
        tCQCKit::EUserRoles eRole;
        tCQCKit::EUserTypes eType;
        tCIDLib::TCard8 enctStamp = {};
        TString strDefTmpl;
        DecodeSecurityToken
        (
            sectSrc
          , strLogin
          , eRole
          , eType
          , enctStamp
          , strDefTmpl
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << strLogin;
        orbcToDispatch.strmOut() << eRole;
        orbcToDispatch.strmOut() << eType;
        orbcToDispatch.strmOut() << enctStamp;
        orbcToDispatch.strmOut() << strDefTmpl;
    }
     else if (strMethodName == L"QueryAccount")
    {
        TString strLogin;
        orbcToDispatch.strmIn() >> strLogin;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        TCQCUserAccount uaccToFill;
        QueryAccount
        (
            strLogin
          , sectUser
          , uaccToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << uaccToFill;
    }
     else if (strMethodName == L"c8QueryVersion")
    {
        tCIDLib::TCard8 retVal = c8QueryVersion
        (
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"ResetAccountPassword")
    {
        TString strLogin;
        orbcToDispatch.strmIn() >> strLogin;
        TString strNewPassword;
        orbcToDispatch.strmIn() >> strNewPassword;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        ResetAccountPassword
        (
            strLogin
          , strNewPassword
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"UpdateAccount")
    {
        TCQCUserAccount uaccNew;
        orbcToDispatch.strmIn() >> uaccNew;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        UpdateAccount
        (
            uaccNew
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else
    {
         TParent::Dispatch(strMethodName, orbcToDispatch);
    }
}

