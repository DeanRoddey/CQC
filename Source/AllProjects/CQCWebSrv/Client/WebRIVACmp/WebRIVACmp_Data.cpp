// ----------------------------------------------------------------------------
//  FILE: WebRIVACmp_Data.cpp
//  DATE: Tue, Jan 19 17:39:55 2021 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

#include "WebRIVACmp.hpp"

const TString kWebRIVACmp::strAttrName(L"Name");
const TString kWebRIVACmp::strAttrDir(L"Dir");
const TString kWebRIVACmp::strAttrDirBoth(L"Both");
const TString kWebRIVACmp::strAttrDirCS(L"CtoS");
const TString kWebRIVACmp::strAttrDirSC(L"StoC");
const TString kWebRIVACmp::strAttrAName(L"AName");
const TString kWebRIVACmp::strAttrType(L"Type");
const TString kWebRIVACmp::strAttrVal(L"Value");
const TString kWebRIVACmp::strAttrEnumType(L"EnumType");
const TString kWebRIVACmp::strVal_False(L"kCIDLib::False");
const TString kWebRIVACmp::strVal_True(L"kCIDLib::True");
const TString kWebRIVACmp::strVal_LineSep(L", ");
const TString kWebRIVACmp::strVal_CommaFalse(L", kCIDLib::False");
const TString kWebRIVACmp::strVal_CommaTrue(L", kCIDLib::True");


static TEnumMap::TEnumValItem aeitemValues_EConstTypes[11] = 
{
    {  tCIDLib::TInt4(tWebRIVACmp::EConstTypes::Boolean), 0, 0,  { L"", L"b", L"", L"Boolean", L"EConstTypes::Boolean", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EConstTypes::Int1), 0, 0,  { L"", L"i1", L"", L"Int1", L"EConstTypes::Int1", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EConstTypes::Int2), 0, 0,  { L"", L"i2", L"", L"Int2", L"EConstTypes::Int2", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EConstTypes::Int4), 0, 0,  { L"", L"i4", L"", L"Int4", L"EConstTypes::Int4", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EConstTypes::Int8), 0, 0,  { L"", L"i8", L"", L"Int8", L"EConstTypes::Int8", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EConstTypes::Card1), 0, 0,  { L"", L"c1", L"", L"Card1", L"EConstTypes::Card1", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EConstTypes::Card2), 0, 0,  { L"", L"c2", L"", L"Card2", L"EConstTypes::Card2", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EConstTypes::Card4), 0, 0,  { L"", L"c4", L"", L"Card4", L"EConstTypes::Card4", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EConstTypes::Card8), 0, 0,  { L"", L"c8", L"", L"Card8", L"EConstTypes::Card8", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EConstTypes::Float8), 0, 0,  { L"", L"f8", L"", L"Float8", L"EConstTypes::Float8", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EConstTypes::String), 0, 0,  { L"", L"str", L"", L"String", L"EConstTypes::String", L"" } }

};

static TEnumMap emapEConstTypes
(
     L"EConstTypes"
     , 11
     , kCIDLib::False
     , aeitemValues_EConstTypes
     , nullptr
     , tCIDLib::TCard4(tWebRIVACmp::EConstTypes::Count)
);

const TString& tWebRIVACmp::strAltXlatEConstTypes(const tWebRIVACmp::EConstTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEConstTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::AltText, bThrowIfNot);
}

tWebRIVACmp::EConstTypes tWebRIVACmp::eAltXlatEConstTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tWebRIVACmp::EConstTypes(emapEConstTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::AltText, bThrowIfNot));
}

const TString& tWebRIVACmp::strXlatEConstTypes(const tWebRIVACmp::EConstTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEConstTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tWebRIVACmp::EConstTypes tWebRIVACmp::eXlatEConstTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tWebRIVACmp::EConstTypes(emapEConstTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TBoolean tWebRIVACmp::bIsValidEnum(const tWebRIVACmp::EConstTypes eVal)
{
    return emapEConstTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EMemTypes[19] = 
{
    {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Boolean), 0, 0,  { L"", L"b", L"tCIDLib::TBoolean", L"Boolean", L"EMemTypes::Boolean", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Card1), 0, 0,  { L"", L"c1", L"tCIDLib::TCard1", L"Card1", L"EMemTypes::Card1", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Card2), 0, 0,  { L"", L"c2", L"tCIDLib::TCard2", L"Card2", L"EMemTypes::Card2", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Card4), 0, 0,  { L"", L"c4", L"tCIDLib::TCard4", L"Card4", L"EMemTypes::Card4", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Card8), 0, 0,  { L"", L"c8", L"tCIDLib::TCard8", L"Card8", L"EMemTypes::Card8", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Float8), 0, 0,  { L"", L"f8", L"tCIDLib::TFloat8", L"Float8", L"EMemTypes::Float8", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Int1), 0, 0,  { L"", L"i1", L"tCIDLib::TInt1", L"Int1", L"EMemTypes::Int1", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Int2), 0, 0,  { L"", L"i2", L"tCIDLib::TInt2", L"Int2", L"EMemTypes::Int2", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Int4), 0, 0,  { L"", L"i4", L"tCIDLib::TIn4", L"Int4", L"EMemTypes::Int4", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Int8), 0, 0,  { L"", L"i8", L"tCIDLib::TInt8", L"Int8", L"EMemTypes::Int8", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Opacity), 0, 0,  { L"", L"f8", L"tCIDLib::TFloat8", L"Opacity", L"EMemTypes::Opacity", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Enum), 0, 0,  { L"", L"e", L"", L"Enum", L"EMemTypes::Enum", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::AlphaColor), 0, 0,  { L"", L"clr", L"TRGBClr", L"AlphaColor", L"EMemTypes::AlphaColor", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Area), 0, 0,  { L"", L"area", L"TArea", L"Area", L"EMemTypes::Area", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Color), 0, 0,  { L"", L"clr", L"TRGBClr", L"Color", L"EMemTypes::Color", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Point), 0, 0,  { L"", L"pnt", L"TPoint", L"Point", L"EMemTypes::Point", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Size), 0, 0,  { L"", L"sz", L"TSize", L"Size", L"EMemTypes::Size", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::String), 0, 0,  { L"", L"str", L"TString", L"String", L"EMemTypes::String", L"" } }
  , {  tCIDLib::TInt4(tWebRIVACmp::EMemTypes::Passthrough), 0, 0,  { L"", L"str", L"TString", L"Passthrough", L"EMemTypes::Passthrough", L"" } }

};

static TEnumMap emapEMemTypes
(
     L"EMemTypes"
     , 19
     , kCIDLib::False
     , aeitemValues_EMemTypes
     , nullptr
     , tCIDLib::TCard4(tWebRIVACmp::EMemTypes::Count)
);

const TString& tWebRIVACmp::strAltXlatEMemTypes(const tWebRIVACmp::EMemTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEMemTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::AltText, bThrowIfNot);
}

tWebRIVACmp::EMemTypes tWebRIVACmp::eAltXlatEMemTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tWebRIVACmp::EMemTypes(emapEMemTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::AltText, bThrowIfNot));
}

const TString& tWebRIVACmp::strAltXlat2EMemTypes(const tWebRIVACmp::EMemTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEMemTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::AltText2, bThrowIfNot);
}

tWebRIVACmp::EMemTypes tWebRIVACmp::eAltXlat2EMemTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tWebRIVACmp::EMemTypes(emapEMemTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::AltText2, bThrowIfNot));
}

const TString& tWebRIVACmp::strXlatEMemTypes(const tWebRIVACmp::EMemTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEMemTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tWebRIVACmp::EMemTypes tWebRIVACmp::eXlatEMemTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tWebRIVACmp::EMemTypes(emapEMemTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TBoolean tWebRIVACmp::bIsValidEnum(const tWebRIVACmp::EMemTypes eVal)
{
    return emapEMemTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}

