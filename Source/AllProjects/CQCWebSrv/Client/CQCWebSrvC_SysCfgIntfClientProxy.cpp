// ----------------------------------------------------------------------------
//  FILE: CQCWebSrvC_SysCfgIntfClientProxy.cpp
//  DATE: Tue, Jan 19 17:39:55 2021 -0500
//    ID: 6EBA61ABF3342112-8262C7001241EE53
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCWebSrvC_.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
AdvRTTIDecls(TCQCSysCfgClientProxy,TOrbClientBase)


// ----------------------------------------------------------------------------
// TCQCSysCfgClientProxy: Public, static data
// ----------------------------------------------------------------------------
const TString TCQCSysCfgClientProxy::strInterfaceId(L"6EBA61ABF3342112-8262C7001241EE53");
const TString TCQCSysCfgClientProxy::strBinding(L"/CQC/CQCDataServer/SysCfg");



// ----------------------------------------------------------------------------
// TCQCSysCfgClientProxy: Constructors and Destructor
// ----------------------------------------------------------------------------
TCQCSysCfgClientProxy::TCQCSysCfgClientProxy()
{
}

TCQCSysCfgClientProxy::
TCQCSysCfgClientProxy(const TOrbObjId& ooidSrc, const TString& strNSBinding)
{
    #if CID_DEBUG_ON
    if (!ooidSrc.oidKey().bIsInterfaceId(strInterfaceId))
    {
        facCIDOrb().ThrowErr
        (
            CID_FILE
            , CID_LINE
            , kOrbErrs::errcClient_BadIntfId
            , tCIDLib::ESeverities::Failed
            , tCIDLib::EErrClasses::BadParms
            , ooidSrc.oidKey().mhashInterface()
            , strInterfaceId
        );
    }
    #endif
    SetObjId(ooidSrc, strNSBinding, kCIDLib::False);
}

TCQCSysCfgClientProxy::~TCQCSysCfgClientProxy()
{
}

// ----------------------------------------------------------------------------
// TCQCSysCfgClientProxy: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TBoolean TCQCSysCfgClientProxy::bQueryRoomCfg
(
    tCIDLib::TCard4& c4SerialNum
    , TCQCSysCfg& scfgToFill)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryRoomCfg");
        ocmdToUse.strmOut() << c4SerialNum;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4SerialNum;
            ocmdToUse.strmIn() >> scfgToFill;
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TVoid TCQCSysCfgClientProxy::StoreRoomCfg
(
    const TCQCSysCfg& scfgToStore
    , tCIDLib::TCard4& c4NewSerialNum
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"StoreRoomCfg");
        ocmdToUse.strmOut() << scfgToStore;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4NewSerialNum;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

