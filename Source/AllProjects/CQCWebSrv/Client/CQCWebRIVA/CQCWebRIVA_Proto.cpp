// -----------------------------------------
//  Generated by WebRIVACmp (Wed, Mar 06 13:30:56 2019 -0500)
// -----------------------------------------

#include "CQCWebRIVA_.hpp"

// -----------------------------------------------
//  Private helper methods
// -----------------------------------------------
static tCIDLib::TBoolean bExtractBool(TJSONCont& jprsnSrc, const TString& strToExtract)
{
    return jprsnSrc.bFindVal(strToExtract);
}

static tCIDLib::TCard1 c1ExtractNum(TJSONCont& jprsnSrc, const TString& strToExtract)
{
    const tCIDLib::TCard4 c4Val = jprsnSrc.c4FindVal(strToExtract);
    CIDAssert(c4Val < 0x100, L"The extracted value is too large for a Card1");
    return tCIDLib::TCard1(c4Val);
}

static tCIDLib::TCard2 c2ExtractNum(TJSONCont& jprsnSrc, const TString& strToExtract)
{
    const tCIDLib::TCard4 c4Val = jprsnSrc.c4FindVal(strToExtract);
    CIDAssert(c4Val < 0x10000, L"The extracted value is too large for a Card2");
    return tCIDLib::TCard2(c4Val);
}

static tCIDLib::TCard4 c4ExtractNum(TJSONCont& jprsnSrc, const TString& strToExtract)
{
    return jprsnSrc.c4FindVal(strToExtract);
}

static tCIDLib::TInt4 i4ExtractNum(TJSONCont& jprsnSrc, const TString& strToExtract)
{
    return jprsnSrc.i4FindVal(strToExtract);
}


static tCIDLib::TVoid ExtractArea(TJSONCont& jprsnSrc, TArea& areaTar, const TString& strToExtract)
{
    if (!areaTar.bParseFromText(jprsnSrc.strValByName(strToExtract)))
    {
        CIDAssert2(TString(L"JSON value ") + strToExtract + TString(L" was not a valid area"));
    }
}

static tCIDLib::TVoid ExtractColor(TJSONCont& jprsnSrc, TRGBClr& clrTar, const TString& strToExtract)
{
    if (!clrTar.bParseFromText(jprsnSrc.strValByName(strToExtract)))
    {
        CIDAssert2(TString(L"JSON value ") + strToExtract + TString(L" was not a valid color"));
    }
}

static tCIDLib::TVoid ExtractPoint(TJSONCont& jprsnSrc, TPoint& pntTar, const TString& strToExtract)
{
    if (!pntTar.bParseFromText(jprsnSrc.strValByName(strToExtract)))
    {
        CIDAssert2(TString(L"JSON value ") + strToExtract + TString(L" was not a valid point"));
    }
}

static tCIDLib::TVoid ExtractSize(TJSONCont& jprsnSrc, TSize& szTar, const TString& strToExtract)
{
    if (!szTar.bParseFromText(jprsnSrc.strValByName(strToExtract)))
    {
        CIDAssert2(TString(L"JSON value ") + strToExtract + TString(L" was not a valid size"));
    }
}

static tCIDLib::TVoid
FormatArea(         TTextOutStream&     strmTar
            , const TString&            strName
            , const TArea&              areaSrc
            , const tCIDLib::TBoolean   bLast = kCIDLib::False)
{
    strmTar << kCIDLib::chQuotation
            << strName
            << kCIDLib::chQuotation
            << kCQCWebRIVA::strJSON_ValSep
            << kCIDLib::chQuotation
            << areaSrc.i4X()
            << kCIDLib::chComma
            << areaSrc.i4Y()
            << kCIDLib::chComma
            << areaSrc.c4Width()
            << kCIDLib::chComma
            << areaSrc.c4Height()
            << kCIDLib::chQuotation;

    if (!bLast)
        strmTar << kCIDLib::chComma;

    strmTar << kCIDLib::NewLn;
}

static tCIDLib::TVoid
FormatClr(          TTextOutStream&     strmTar
            , const TString&            strName
            , const TRGBClr&            clrSrc
            , const tCIDLib::TBoolean   bAlpha
            , const tCIDLib::TBoolean   bLast = kCIDLib::False)
{
    strmTar << kCIDLib::chQuotation
            << strName
            << kCIDLib::chQuotation
            << kCQCWebRIVA::strJSON_ValSep
            << kCIDLib::chQuotation;

    if (bAlpha)
        strmTar << L"rgba(";
    else
        strmTar << L"rgb(";

    strmTar << clrSrc.c1Red()
            << kCIDLib::chComma
            << clrSrc.c1Green()
            << kCIDLib::chComma
            << clrSrc.c1Blue();

    if (bAlpha)
    {
        strmTar << kCIDLib::chComma
                << TFloat(tCIDLib::TFloat8(clrSrc.c1Alpha()) / 255.0, 2);
    }
    strmTar << kCIDLib::chCloseParen << kCIDLib::chQuotation;

    if (!bLast)
        strmTar << kCIDLib::chComma;

    strmTar << kCIDLib::NewLn;
}


static tCIDLib::TVoid
FormatOpacity(          TTextOutStream&     strmTar
                , const TString&            strName
                , const tCIDLib::TCard1     c1Val
                , const tCIDLib::TBoolean   bLast = kCIDLib::False)
{
    strmTar << kCIDLib::chQuotation
            << strName
            << kCIDLib::chQuotation
            << kCQCWebRIVA::strJSON_ValSep;

    tCIDLib::TFloat8 f8Val = tCIDLib::TFloat8(c1Val) / 255.0;
    if (f8Val > 1.0)
        f8Val = 1.0;
    strmTar << f8Val;

    if (!bLast)
        strmTar << kCIDLib::chComma;

    strmTar << kCIDLib::NewLn;
}


static tCIDLib::TVoid
FormatPoint(        TTextOutStream&     strmTar
            , const TString&            strName
            , const TPoint&             pntVal
            , const tCIDLib::TBoolean   bLast = kCIDLib::False)
{
    strmTar << kCIDLib::chQuotation
            << strName
            << kCIDLib::chQuotation
            << kCQCWebRIVA::strJSON_ValSep
            << kCIDLib::chQuotation
            << pntVal.i4X()
            << kCIDLib::chComma
            << pntVal.i4Y()
            << kCIDLib::chQuotation;

    if (!bLast)
        strmTar << kCIDLib::chComma;

    strmTar << kCIDLib::NewLn;
}


static tCIDLib::TVoid
FormatPassthrough(         TTextOutStream&  strmTar
                , const TString&            strName
                , const TString&            strVal
                , const tCIDLib::TBoolean   bLast = kCIDLib::False)
{
    strmTar << kCIDLib::chQuotation
            << strName
            << kCIDLib::chQuotation
            << kCQCWebRIVA::strJSON_ValSep
            << strVal;

    if (!bLast)
        strmTar << kCIDLib::chComma;

    strmTar << kCIDLib::NewLn;
}

static tCIDLib::TVoid
FormatSize(         TTextOutStream&     strmTar
            , const TString&            strName
            , const TSize&              szSrc
            , const tCIDLib::TBoolean   bLast = kCIDLib::False)
{
    strmTar << kCIDLib::chQuotation
            << strName
            << kCIDLib::chQuotation
            << kCQCWebRIVA::strJSON_ValSep
            << kCIDLib::chQuotation
            << szSrc.c4Width()
            << kCIDLib::chComma
            << szSrc.c4Height()
            << kCIDLib::chQuotation;
    if (!bLast)
        strmTar << kCIDLib::chComma;

    strmTar << kCIDLib::NewLn;
}


TWebRIVATools::TWebRIVATools() : 
    m_strmFmt(8192, 0x100000, new TUTF8Converter)
{
}

TWebRIVATools::~TWebRIVATools()
{
}

TMemBuf*
TWebRIVATools::pmbufFormatAlphaBlit(
                                     tCIDLib::TCard4&   c4RetSz
                             , const TString&    strImgPath
                             , const TPoint&    pntAt
                             , const tCIDLib::TCard1    c1Flags
                             , const tCIDLib::TCard1    c1ConstAlpha
                             , const tCIDLib::TCard4    c4ImgSerialNum)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::AlphaBlit), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Path, strImgPath, m_strmFmt);
    FormatPoint(m_strmFmt, kWebRIVA::strAttr_ToPnt, pntAt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_Flags, c1Flags, m_strmFmt);
    FormatOpacity(m_strmFmt, kWebRIVA::strAttr_ConstAlpha, c1ConstAlpha);
    TJSONParser::OutputCard(kWebRIVA::strAttr_SerialNum, c4ImgSerialNum, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatAlphaBlitST(
                                       tCIDLib::TCard4&   c4RetSz
                               , const TString&    strImgPath
                               , const TArea&    areaSrc
                               , const TArea&    areaTar
                               , const tCIDLib::TCard1    c1Flags
                               , const tCIDLib::TCard1    c1ConstAlpha
                               , const tCIDLib::TCard4    c4ImgSerialNum)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::AlphaBlitST), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Path, strImgPath, m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_SrcArea, areaSrc);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_TarArea, areaTar);
    TJSONParser::OutputCard(kWebRIVA::strAttr_Flags, c1Flags, m_strmFmt);
    FormatOpacity(m_strmFmt, kWebRIVA::strAttr_ConstAlpha, c1ConstAlpha);
    TJSONParser::OutputCard(kWebRIVA::strAttr_SerialNum, c4ImgSerialNum, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatCreateRemWidget(
                                           tCIDLib::TCard4&   c4RetSz
                                   , const TString&    strUID
                                   , const tWebRIVA::EWdgTypes    eType
                                   , const TArea&    areaAtArea
                                   , const TString&    strParams
                                   , const tCIDLib::TBoolean    bVisState)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::CreateRemWidget), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Id, strUID, m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_Type, tCIDLib::TInt4(eType), m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_At, areaAtArea);
    FormatPassthrough(m_strmFmt, kWebRIVA::strAttr_Params, strParams);
    TJSONParser::OutputBool(kWebRIVA::strAttr_State, bVisState, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatDestroyRemWidget(
                                            tCIDLib::TCard4&   c4RetSz
                                    , const TString&    strUID
                                    , const tWebRIVA::EWdgTypes    eType)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::DestroyRemWidget), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Id, strUID, m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_Type, tCIDLib::TInt4(eType), m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatDrawBitmap(
                                      tCIDLib::TCard4&   c4RetSz
                              , const TString&    strImgPath
                              , const TPoint&    pntAt
                              , const tWebRIVA::EBmpModes    eMode
                              , const tCIDLib::TCard4    c4ImgSerialNum)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::DrawBitmap), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Path, strImgPath, m_strmFmt);
    FormatPoint(m_strmFmt, kWebRIVA::strAttr_ToPnt, pntAt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_Mode, tCIDLib::TInt4(eMode), m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_SerialNum, c4ImgSerialNum, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatDrawBitmapST(
                                        tCIDLib::TCard4&   c4RetSz
                                , const TString&    strImgPath
                                , const TArea&    areaSrc
                                , const TArea&    areaTar
                                , const tWebRIVA::EBmpModes    eMode
                                , const tCIDLib::TCard4    c4ImgSerialNum)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::DrawBitmapST), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Path, strImgPath, m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_SrcArea, areaSrc);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_TarArea, areaTar);
    TJSONParser::OutputInt(kWebRIVA::strAttr_Mode, tCIDLib::TInt4(eMode), m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_SerialNum, c4ImgSerialNum, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatDrawLine(
                                    tCIDLib::TCard4&   c4RetSz
                            , const TPoint&    pntFrom
                            , const TPoint&    pntTo
                            , const TRGBClr&    clrColor)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::DrawLine), m_strmFmt);
    FormatPoint(m_strmFmt, kWebRIVA::strAttr_FromPnt, pntFrom);
    FormatPoint(m_strmFmt, kWebRIVA::strAttr_ToPnt, pntTo);
    FormatClr(m_strmFmt, kWebRIVA::strAttr_Color, clrColor, kCIDLib::False, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatDrawMultiText(
                                         tCIDLib::TCard4&   c4RetSz
                                 , const TString&    strText
                                 , const TArea&    areaTar
                                 , const tWebRIVA::EHJustifys    eHJust
                                 , const tWebRIVA::EVJustifys    eVJust
                                 , const tCIDLib::TCard4    c4Flags)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::DrawMultiText), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_ToDraw, strText, m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_TarArea, areaTar);
    TJSONParser::OutputInt(kWebRIVA::strAttr_HJustify, tCIDLib::TInt4(eHJust), m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_VJustify, tCIDLib::TInt4(eVJust), m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_Flags, c4Flags, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatDrawPBar(
                                    tCIDLib::TCard4&   c4RetSz
                            , const TString&    strImgPath
                            , const tCIDLib::TCard1    c1Opacity
                            , const tCIDLib::TFloat8    f8Percent
                            , const TArea&    areaSrc
                            , const TArea&    areaTar
                            , const tWebRIVA::EDirs    eDir
                            , const TRGBClr&    clrClr1
                            , const TRGBClr&    clrClr2
                            , const TRGBClr&    clrFill)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::DrawPBar), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Path, strImgPath, m_strmFmt);
    FormatOpacity(m_strmFmt, kWebRIVA::strAttr_ConstAlpha, c1Opacity);
    TJSONParser::OutputFloat(kWebRIVA::strAttr_Percent, f8Percent, m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_SrcArea, areaSrc);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_TarArea, areaTar);
    TJSONParser::OutputInt(kWebRIVA::strAttr_Dir, tCIDLib::TInt4(eDir), m_strmFmt);
    FormatClr(m_strmFmt, kWebRIVA::strAttr_Color, clrClr1, kCIDLib::False);
    FormatClr(m_strmFmt, kWebRIVA::strAttr_Color2, clrClr2, kCIDLib::False);
    FormatClr(m_strmFmt, kWebRIVA::strAttr_BgnColor, clrFill, kCIDLib::False, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatDrawText(
                                    tCIDLib::TCard4&   c4RetSz
                            , const TString&    strText
                            , const TArea&    areaTar
                            , const tWebRIVA::EHJustifys    eHJust
                            , const tWebRIVA::EVJustifys    eVJust
                            , const TRGBClr&    clrBgnFill
                            , const tCIDLib::TCard4    c4Flags)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::DrawText), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_ToDraw, strText, m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_TarArea, areaTar);
    TJSONParser::OutputInt(kWebRIVA::strAttr_HJustify, tCIDLib::TInt4(eHJust), m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_VJustify, tCIDLib::TInt4(eVJust), m_strmFmt);
    FormatClr(m_strmFmt, kWebRIVA::strAttr_BgnColor, clrBgnFill, kCIDLib::False);
    TJSONParser::OutputCard(kWebRIVA::strAttr_Flags, c4Flags, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatDrawTextFX(
                                      tCIDLib::TCard4&   c4RetSz
                              , const TString&    strText
                              , const tWebRIVA::ETextFXs    eEffect
                              , const TArea&    areaTar
                              , const TRGBClr&    clrClr1
                              , const TRGBClr&    clrClr2
                              , const tWebRIVA::EHJustifys    eHJust
                              , const tWebRIVA::EVJustifys    eVJust
                              , const tCIDLib::TCard4    c4Flags
                              , const TPoint&    pntOfs)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::DrawTextFX), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_ToDraw, strText, m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_Effect, tCIDLib::TInt4(eEffect), m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_TarArea, areaTar);
    FormatClr(m_strmFmt, kWebRIVA::strAttr_Color, clrClr1, kCIDLib::False);
    FormatClr(m_strmFmt, kWebRIVA::strAttr_Color2, clrClr2, kCIDLib::True);
    TJSONParser::OutputInt(kWebRIVA::strAttr_HJustify, tCIDLib::TInt4(eHJust), m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_VJustify, tCIDLib::TInt4(eVJust), m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_Flags, c4Flags, m_strmFmt);
    FormatPoint(m_strmFmt, kWebRIVA::strAttr_PntOffset, pntOfs, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatEndDraw(
                                   tCIDLib::TCard4&   c4RetSz
                           , const TArea&    areaUpdate)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::EndDraw), m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_UpdateArea, areaUpdate, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatExitViewer(
                                      tCIDLib::TCard4&   c4RetSz)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::ExitViewer), m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatFillArea(
                                    tCIDLib::TCard4&   c4RetSz
                            , const tCIDLib::TCard1    c1Rounding
                            , const TArea&    areaFill
                            , const TRGBClr&    clrFillClr)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::FillArea), m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_Rounding, c1Rounding, m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_TarArea, areaFill);
    FormatClr(m_strmFmt, kWebRIVA::strAttr_Color, clrFillClr, kCIDLib::False, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatFillWithBmp(
                                       tCIDLib::TCard4&   c4RetSz
                               , const TString&    strImgPath
                               , const TArea&    areaTar
                               , const TPoint&    pntOrgPnt
                               , const tWebRIVA::EBmpModes    eMode
                               , const tCIDLib::TCard4    c4ImgSerialNum)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::FillWithBmp), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Path, strImgPath, m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_TarArea, areaTar);
    FormatPoint(m_strmFmt, kWebRIVA::strAttr_ToPnt, pntOrgPnt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_Mode, tCIDLib::TInt4(eMode), m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_SerialNum, c4ImgSerialNum, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatGradientFill(
                                        tCIDLib::TCard4&   c4RetSz
                                , const tCIDLib::TCard1    c1Rounding
                                , const TArea&    areaFill
                                , const TRGBClr&    clrColor1
                                , const TRGBClr&    clrColor2
                                , const tWebRIVA::EGradDirs    eDir)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::GradientFill), m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_Rounding, c1Rounding, m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_TarArea, areaFill);
    FormatClr(m_strmFmt, kWebRIVA::strAttr_Color, clrColor1, kCIDLib::False);
    FormatClr(m_strmFmt, kWebRIVA::strAttr_Color2, clrColor2, kCIDLib::False);
    TJSONParser::OutputInt(kWebRIVA::strAttr_Dir, tCIDLib::TInt4(eDir), m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatImgDataFirst(
                                        tCIDLib::TCard4&   c4RetSz
                                , const TString&    strImgPath
                                , const tCIDLib::TCard4    c4ImgSerialNum
                                , const tCIDLib::TCard4    c4TotalBytes
                                , const TSize&    szImgRes
                                , const tCIDLib::TBoolean    bisPNG
                                , const tCIDLib::TBoolean    bLastBlock
                                , const TString&    strImgData)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::ImgDataFirst), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Path, strImgPath, m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_SerialNum, c4ImgSerialNum, m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_TotalBytes, c4TotalBytes, m_strmFmt);
    FormatSize(m_strmFmt, kWebRIVA::strAttr_Size, szImgRes);
    TJSONParser::OutputBool(kWebRIVA::strAttr_Flag, bisPNG, m_strmFmt);
    TJSONParser::OutputBool(kWebRIVA::strAttr_Last, bLastBlock, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_DataBytes, strImgData, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatImgDataNext(
                                       tCIDLib::TCard4&   c4RetSz
                               , const TString&    strImgPath
                               , const tCIDLib::TBoolean    bLastBlock
                               , const TString&    strImgData)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::ImgDataNext), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Path, strImgPath, m_strmFmt);
    TJSONParser::OutputBool(kWebRIVA::strAttr_Last, bLastBlock, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_DataBytes, strImgData, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatLoginRes(
                                    tCIDLib::TCard4&   c4RetSz
                            , const tCIDLib::TBoolean    bStatus
                            , const TString&    strMsg
                            , const TString&    strUser
                            , const tWebRIVA::EUserRoles    eRole)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::LoginRes), m_strmFmt);
    TJSONParser::OutputBool(kWebRIVA::strAttr_Status, bStatus, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_MsgText, strMsg, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_User, strUser, m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_UserRole, tCIDLib::TInt4(eRole), m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatNewTemplate(
                                       tCIDLib::TCard4&   c4RetSz
                               , const TString&    strPath
                               , const TSize&    szNewSize)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::NewTemplate), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Path, strPath, m_strmFmt);
    FormatSize(m_strmFmt, kWebRIVA::strAttr_Size, szNewSize, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatPopClipArea(
                                       tCIDLib::TCard4&   c4RetSz)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::PopClipArea), m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatPopContext(
                                      tCIDLib::TCard4&   c4RetSz)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::PopContext), m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatPopFont(
                                   tCIDLib::TCard4&   c4RetSz)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::PopFont), m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatPushClipArea(
                                        tCIDLib::TCard4&   c4RetSz
                                , const tWebRIVA::EClipModes    eClipMode
                                , const TArea&    areaClip
                                , const tCIDLib::TCard1    c1Rounding)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::PushClipArea), m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_ClipMode, tCIDLib::TInt4(eClipMode), m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_ClipArea, areaClip);
    TJSONParser::OutputCard(kWebRIVA::strAttr_Rounding, c1Rounding, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatPushContext(
                                       tCIDLib::TCard4&   c4RetSz)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::PushContext), m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatPushFont(
                                    tCIDLib::TCard4&   c4RetSz
                            , const TString&    strFaceName
                            , const tCIDLib::TCard1    c1Flags
                            , const tCIDLib::TCard1    c1Height)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::PushFont), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_FontFace, strFaceName, m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_Flags, c1Flags, m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_FontH, c1Height, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatRIVACmd(
                                   tCIDLib::TCard4&   c4RetSz
                           , const TString&    strCmd
                           , const TString&    strParm1
                           , const TString&    strParm2
                           , const TString&    strParm3)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::RIVACmd), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Path, strCmd, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_P1, strParm1, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_P2, strParm2, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_P3, strParm3, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatSetBackMixMode(
                                          tCIDLib::TCard4&   c4RetSz
                                  , const tWebRIVA::EBackMixModes    eMode)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::SetBackMixMode), m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_BackMixMode, tCIDLib::TInt4(eMode), m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatSetColor(
                                    tCIDLib::TCard4&   c4RetSz
                            , const tWebRIVA::EDrawingColors    eToSet
                            , const TRGBClr&    clrNewClr)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::SetColor), m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_ToSet, tCIDLib::TInt4(eToSet), m_strmFmt);
    FormatClr(m_strmFmt, kWebRIVA::strAttr_Color, clrNewClr, kCIDLib::False, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatSetMixMode(
                                      tCIDLib::TCard4&   c4RetSz
                              , const tWebRIVA::EMixModes    eMode)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::SetMixMode), m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_MixMode, tCIDLib::TInt4(eMode), m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatSetTmplBorderClr(
                                            tCIDLib::TCard4&   c4RetSz
                                    , const TString&    strToSet)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::SetTmplBorderClr), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_ToSet, strToSet, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatSetRemWidgetURL(
                                           tCIDLib::TCard4&   c4RetSz
                                   , const TString&    strUID
                                   , const tWebRIVA::EWdgTypes    eType
                                   , const TString&    strNewURL
                                   , const TString&    strParams)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::SetRemWidgetURL), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Id, strUID, m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_Type, tCIDLib::TInt4(eType), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_ToLoad, strNewURL, m_strmFmt);
    FormatPassthrough(m_strmFmt, kWebRIVA::strAttr_Params, strParams, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatSetRemWidgetVis(
                                           tCIDLib::TCard4&   c4RetSz
                                   , const TString&    strUID
                                   , const tWebRIVA::EWdgTypes    eType
                                   , const tCIDLib::TBoolean    bNewState)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::SetRemWidgetVis), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Id, strUID, m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_Type, tCIDLib::TInt4(eType), m_strmFmt);
    TJSONParser::OutputBool(kWebRIVA::strAttr_State, bNewState, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatShowErrorMsg(
                                        tCIDLib::TCard4&   c4RetSz
                                , const tWebRIVA::EErrMsgs    eCode
                                , const TString&    strErrText)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::ShowErrorMsg), m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_ErrCode, tCIDLib::TInt4(eCode), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_ErrText, strErrText, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatShowException(
                                         tCIDLib::TCard4&   c4RetSz
                                 , const TString&    strTitle
                                 , const TString&    strMsgText
                                 , const tCIDLib::TCard4    c4Line
                                 , const tCIDLib::TCard4    c4ErrCode
                                 , const tCIDLib::TCard4    c4KrnlErrCode
                                 , const tCIDLib::TCard4    c4SysErrCode
                                 , const TString&    strErrText
                                 , const TString&    strAuxText
                                 , const TString&    strProcName
                                 , const TString&    strFacName
                                 , const TString&    strSrcFile)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::ShowException), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Title, strTitle, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_MsgText, strMsgText, m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_LineNum, c4Line, m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_ErrCode, c4ErrCode, m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_KErrCode, c4KrnlErrCode, m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_SErrCode, c4SysErrCode, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_ErrText, strErrText, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_AuxText, strAuxText, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_ProcName, strProcName, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_FacName, strFacName, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_FileName, strSrcFile, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatShowMsg(
                                   tCIDLib::TCard4&   c4RetSz
                           , const TString&    strTitle
                           , const TString&    strMsgText)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::ShowMsg), m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_Title, strTitle, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_MsgText, strMsgText, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatSpecialAction(
                                         tCIDLib::TCard4&   c4RetSz
                                 , const tWebRIVA::ESpecialActs    eAction)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::SpecialAction), m_strmFmt);
    TJSONParser::OutputInt(kWebRIVA::strAttr_ToDo, tCIDLib::TInt4(eAction), m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatStatusReturn(
                                        tCIDLib::TCard4&   c4RetSz
                                , const tCIDLib::TCard1    c1Status
                                , const tCIDLib::TCard4    c4Extra
                                , const TString&    strErrText)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::StatusReturn), m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_Status, c1Status, m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_Extra, c4Extra, m_strmFmt);
    TJSONParser::OutputStr(kWebRIVA::strAttr_ErrText, strErrText, m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatStartDraw(
                                     tCIDLib::TCard4&   c4RetSz
                             , const TArea&    areaToUpdate)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::StartDraw), m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_UpdateArea, areaToUpdate, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

TMemBuf*
TWebRIVATools::pmbufFormatStrokeArea(
                                      tCIDLib::TCard4&   c4RetSz
                              , const tCIDLib::TCard1    c1Rounding
                              , const tCIDLib::TCard1    c1Width
                              , const TArea&    areaStrokeArea
                              , const TRGBClr&    clrLineClr)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::StrokeArea), m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_Rounding, c1Rounding, m_strmFmt);
    TJSONParser::OutputCard(kWebRIVA::strAttr_Width, c1Width, m_strmFmt);
    FormatArea(m_strmFmt, kWebRIVA::strAttr_TarArea, areaStrokeArea);
    FormatClr(m_strmFmt, kWebRIVA::strAttr_Color, clrLineClr, kCIDLib::False, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

tCIDLib::TVoid
TWebRIVATools::ExtractMove(TJSONObject& jprsnSrc
                         , TPoint&    pntAt)
{
    ExtractPoint(jprsnSrc, pntAt, kWebRIVA::strAttr_At);
}

tCIDLib::TVoid
TWebRIVATools::ExtractPress(TJSONObject& jprsnSrc
                          , TPoint&    pntAt)
{
    ExtractPoint(jprsnSrc, pntAt, kWebRIVA::strAttr_At);
}

tCIDLib::TVoid
TWebRIVATools::ExtractRelease(TJSONObject& jprsnSrc
                            , TPoint&    pntAt)
{
    ExtractPoint(jprsnSrc, pntAt, kWebRIVA::strAttr_At);
}

tCIDLib::TVoid
TWebRIVATools::ExtractCancelInput(TJSONObject& jprsnSrc)
{
}

tCIDLib::TVoid
TWebRIVATools::ExtractSetVisState(TJSONObject& jprsnSrc
                                , tCIDLib::TBoolean&    bState)
{
    bState = bExtractBool(jprsnSrc, kWebRIVA::strAttr_State);
}

tCIDLib::TVoid
TWebRIVATools::ExtractSessionState(TJSONObject& jprsnSrc
                                 , tCIDLib::TCard4&    c4SrvFlags
                                 , tCIDLib::TCard4&    c4BitMask)
{
    c4SrvFlags = c4ExtractNum(jprsnSrc, kWebRIVA::strAttr_ToSet);
    c4BitMask = c4ExtractNum(jprsnSrc, kWebRIVA::strAttr_Mask);
}

tCIDLib::TVoid
TWebRIVATools::ExtractLogMsg(TJSONObject& jprsnSrc
                           , TString&    strToLog
                           , tCIDLib::TBoolean&    bIsError)
{
    strToLog = jprsnSrc.strValByName(kWebRIVA::strAttr_MsgText);
    bIsError = bExtractBool(jprsnSrc, kWebRIVA::strAttr_Flag);
}

tCIDLib::TVoid
TWebRIVATools::ExtractSetServerFlags(TJSONObject& jprsnSrc
                                   , tCIDLib::TCard4&    c4ToSet
                                   , tCIDLib::TCard4&    c4BitMask)
{
    c4ToSet = c4ExtractNum(jprsnSrc, kWebRIVA::strAttr_ToSet);
    c4BitMask = c4ExtractNum(jprsnSrc, kWebRIVA::strAttr_Mask);
}

TMemBuf*
TWebRIVATools::pmbufFormatPing(
                                tCIDLib::TCard4&   c4RetSz)
{
    m_strmFmt.Reset();
    m_strmFmt << kCIDLib::chOpenBrace << kCIDLib::NewLn;
    TJSONParser::OutputInt(kWebRIVA::strAttr_OpCode, tCIDLib::TInt4(tWebRIVA::EOpCodes::Ping), m_strmFmt, kCIDLib::True);
    m_strmFmt << kCIDLib::chCloseBrace << kCIDLib::NewLn;
    m_strmFmt.Flush();
    c4RetSz = m_strmFmt.c4CurSize();
    return new THeapBuf(m_strmFmt.mbufData(), c4RetSz, c4RetSz);
}

tCIDLib::TVoid
TWebRIVATools::ExtractPing(TJSONObject& jprsnSrc)
{
}


//
//  Convenient methods that work in terms of the generically generated methods above. When
//  there are a lot of values to format out, and they are naturally already grouped together
//  in some other object, this makes it a lot easier.
//
TMemBuf*
TWebRIVATools::pmbufFormatShowException(        tCIDLib::TCard4&    c4Bytes
                                        , const TString&            strTitle
                                        , const TString&            strMsgText
                                        , const TError&             errToSend)
{
    // Just call the other version, passing on the exception values
    return pmbufFormatShowException
    (
        c4Bytes
        , strTitle
        , strMsgText
        , errToSend.c4LineNum()
        , errToSend.errcId()
        , errToSend.errcKrnlId()
        , errToSend.errcHostId()
        , errToSend.strErrText()
        , errToSend.bHasAuxText() ? errToSend.strAuxText() : TString::strEmpty()
        , errToSend.strProcess()
        , errToSend.strFacName()
        , errToSend.strFileName()
    );
}


tCIDLib::TVoid
TWebRIVATools::ThrowBadOpExtract(const tWebRIVA::EOpCodes eGot, const tWebRIVA::EOpCodes eExpected)
{
    facCQCWebRIVA().ThrowErr
    (
        CID_FILE
        , CID_LINE
        , kWRIVAErrs::errcDbg_BadExtract
        , tCIDLib::ESeverities::Failed
        , tCIDLib::EErrClasses::AppError
        , TInteger(tCIDLib::i4EnumOrd(eGot))
        , TInteger(tCIDLib::i4EnumOrd(eExpected))
    );
}
