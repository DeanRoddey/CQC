// ----------------------------------------------------------------------------
//  FILE: CQCTrayMon_iTPlayerIntfServerBase.cpp
//  DATE: Sun, Mar 07 17:59:19 2021 -0500
//    ID: 016EC0A20CCA441C-F05CAF46433D51D7
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCTrayMon.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
RTTIDecls(TiTPlayerIntfServerBase,TOrbServerBase)


// ----------------------------------------------------------------------------
// Public, static data
// ----------------------------------------------------------------------------
const TString TiTPlayerIntfServerBase::strInterfaceId(L"016EC0A20CCA441C-F05CAF46433D51D7");
const TString TiTPlayerIntfServerBase::strImplScope(L"/CQC/CQCTrayMon/");
const TString TiTPlayerIntfServerBase::strImplBinding(L"/CQC/CQCTrayMon/iTPlayer/%(b)");




static TEnumMap::TEnumValItem aeitemValues_EPlCmds[12] = 
{
    {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlCmds::None), 0, 0,  { L"", L"", L"", L"None", L"EPlCmds::None", L"None" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlCmds::FF), 0, 0,  { L"", L"", L"", L"FF", L"EPlCmds::FF", L"Fast Forward" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlCmds::FullScrOff), 0, 0,  { L"", L"", L"", L"FullScrOff", L"EPlCmds::FullScrOff", L"Full Screen Off" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlCmds::FullScrOn), 0, 0,  { L"", L"", L"", L"FullScrOn", L"EPlCmds::FullScrOn", L"Full Screen On" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlCmds::Next), 0, 0,  { L"", L"", L"", L"Next", L"EPlCmds::Next", L"Next" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlCmds::Pause), 0, 0,  { L"", L"", L"", L"Pause", L"EPlCmds::Pause", L"Pause" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlCmds::Play), 0, 0,  { L"", L"", L"", L"Play", L"EPlCmds::Play", L"Play" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlCmds::Previous), 0, 0,  { L"", L"", L"", L"Previous", L"EPlCmds::Previous", L"Previous" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlCmds::Rewind), 0, 0,  { L"", L"", L"", L"Rewind", L"EPlCmds::Rewind", L"Rewind" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlCmds::Stop), 0, 0,  { L"", L"", L"", L"Stop", L"EPlCmds::Stop", L"Stop" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlCmds::VisualsOff), 0, 0,  { L"", L"", L"", L"VisualsOff", L"EPlCmds::VisualsOff", L"Visual Off" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlCmds::VisualsOn), 0, 0,  { L"", L"", L"", L"VisualsOn", L"EPlCmds::VisualsOn", L"Visual On" } }

};

static TEnumMap emapEPlCmds
(
     L"EPlCmds"
     , 12
     , kCIDLib::False
     , aeitemValues_EPlCmds
     , nullptr
     , tCIDLib::TCard4(TiTPlayerIntfServerBase::EPlCmds::Count)
);

const TString& TiTPlayerIntfServerBase::strXlatEPlCmds(const TiTPlayerIntfServerBase::EPlCmds eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEPlCmds.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

TiTPlayerIntfServerBase::EPlCmds TiTPlayerIntfServerBase::eXlatEPlCmds(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return TiTPlayerIntfServerBase::EPlCmds(emapEPlCmds.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, TiTPlayerIntfServerBase::EPlCmds* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur = 0;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = TiTPlayerIntfServerBase::EPlCmds(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const TiTPlayerIntfServerBase::EPlCmds* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean TiTPlayerIntfServerBase::bIsValidEnum(const TiTPlayerIntfServerBase::EPlCmds eVal)
{
    return emapEPlCmds.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EPlStates[4] = 
{
    {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlStates::None), 0, 0,  { L"", L"", L"", L"None", L"EPlStates::None", L"" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlStates::Playing), 0, 0,  { L"", L"", L"", L"Playing", L"EPlStates::Playing", L"" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlStates::Stopped), 0, 0,  { L"", L"", L"", L"Stopped", L"EPlStates::Stopped", L"" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfServerBase::EPlStates::Unknown), 0, 0,  { L"", L"", L"", L"Unknown", L"EPlStates::Unknown", L"" } }

};

static TEnumMap emapEPlStates
(
     L"EPlStates"
     , 4
     , kCIDLib::False
     , aeitemValues_EPlStates
     , nullptr
     , tCIDLib::TCard4(TiTPlayerIntfServerBase::EPlStates::Count)
);

const TString& TiTPlayerIntfServerBase::strXlatEPlStates(const TiTPlayerIntfServerBase::EPlStates eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEPlStates.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

TiTPlayerIntfServerBase::EPlStates TiTPlayerIntfServerBase::eXlatEPlStates(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return TiTPlayerIntfServerBase::EPlStates(emapEPlStates.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, TiTPlayerIntfServerBase::EPlStates* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur = 0;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = TiTPlayerIntfServerBase::EPlStates(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const TiTPlayerIntfServerBase::EPlStates* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean TiTPlayerIntfServerBase::bIsValidEnum(const TiTPlayerIntfServerBase::EPlStates eVal)
{
    return emapEPlStates.bIsValidEnum(tCIDLib::TCard4(eVal));

}



// ----------------------------------------------------------------------------
// TiTPlayerIntfServerBase: Destructor
// ----------------------------------------------------------------------------
TiTPlayerIntfServerBase::~TiTPlayerIntfServerBase()
{
}

// ----------------------------------------------------------------------------
// TiTPlayerIntfServerBase: Protected Constructors
// ----------------------------------------------------------------------------
TiTPlayerIntfServerBase::TiTPlayerIntfServerBase() :
    TOrbServerBase(strInterfaceId, L"TiTPlayerIntfClientProxy" )
{
}

TiTPlayerIntfServerBase::TiTPlayerIntfServerBase(const TOrbObjId& ooidThis) :
    TOrbServerBase(ooidThis)
{
}

// ----------------------------------------------------------------------------
// TiTPlayerIntfServerBase: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TiTPlayerIntfServerBase::Dispatch(const TString& strMethodName, TOrbCmd& orbcToDispatch)
{
    if (strMethodName == L"bGetPlayerState")
    {
        tCIDLib::TCard4 c4Serial = {};
        orbcToDispatch.strmIn() >> c4Serial;
        tCIDLib::TBoolean bConnected = {};
        tCIDLib::TCard4 c4Volume = {};
        TiTPlayerIntfServerBase::EPlStates ePlState;
        tCIDLib::TBoolean bMute = {};
        tCIDLib::TCard8 enctTotal = {};
        tCIDLib::TCard8 enctCur = {};
        TString strCurAlbum;
        TString strCurArtist;
        TString strCurTrack;
        tCIDLib::TBoolean retVal = bGetPlayerState
        (
            c4Serial
          , bConnected
          , c4Volume
          , ePlState
          , bMute
          , enctTotal
          , enctCur
          , strCurAlbum
          , strCurArtist
          , strCurTrack
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4Serial;
            orbcToDispatch.strmOut() << bConnected;
            orbcToDispatch.strmOut() << c4Volume;
            orbcToDispatch.strmOut() << ePlState;
            orbcToDispatch.strmOut() << bMute;
            orbcToDispatch.strmOut() << enctTotal;
            orbcToDispatch.strmOut() << enctCur;
            orbcToDispatch.strmOut() << strCurAlbum;
            orbcToDispatch.strmOut() << strCurArtist;
            orbcToDispatch.strmOut() << strCurTrack;
        }
    }
     else if (strMethodName == L"DoPlayerCmd")
    {
        TiTPlayerIntfServerBase::EPlCmds eCmd;
        orbcToDispatch.strmIn() >> eCmd;
        DoPlayerCmd
        (
            eCmd
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SelPLByCookie")
    {
        TString strTitleCookie;
        orbcToDispatch.strmIn() >> strTitleCookie;
        SelPLByCookie
        (
            strTitleCookie
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SelTrackByCookie")
    {
        TString strItemCookie;
        orbcToDispatch.strmIn() >> strItemCookie;
        SelTrackByCookie
        (
            strItemCookie
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetMute")
    {
        tCIDLib::TBoolean bToSet;
        orbcToDispatch.strmIn() >> bToSet;
        SetMute
        (
            bToSet
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetVolume")
    {
        tCIDLib::TCard4 c4ToSet;
        orbcToDispatch.strmIn() >> c4ToSet;
        SetVolume
        (
            c4ToSet
        );
        orbcToDispatch.strmOut().Reset();
    }
     else
    {
         TParent::Dispatch(strMethodName, orbcToDispatch);
    }
}

