// ----------------------------------------------------------------------------
//  FILE: CQCTrayMon_iTRepoIntfServerBase.cpp
//  DATE: Sun, Mar 07 17:59:19 2021 -0500
//    ID: 5A2C99C79FD12115-189DB6E5BAA86FBF
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCTrayMon.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
RTTIDecls(TiTRepoIntfServerBase,TOrbServerBase)


// ----------------------------------------------------------------------------
// Public, static data
// ----------------------------------------------------------------------------
const TString TiTRepoIntfServerBase::strInterfaceId(L"5A2C99C79FD12115-189DB6E5BAA86FBF");
const TString TiTRepoIntfServerBase::strImplScope(L"/CQC/CQCTrayMon/");
const TString TiTRepoIntfServerBase::strImplBinding(L"/CQC/CQCTrayMon/iTunesRepo/%(b)");


// ----------------------------------------------------------------------------
// TiTRepoIntfServerBase: Destructor
// ----------------------------------------------------------------------------
TiTRepoIntfServerBase::~TiTRepoIntfServerBase()
{
}

// ----------------------------------------------------------------------------
// TiTRepoIntfServerBase: Protected Constructors
// ----------------------------------------------------------------------------
TiTRepoIntfServerBase::TiTRepoIntfServerBase() :
    TOrbServerBase(strInterfaceId, L"TiTRepoIntfClientProxy" )
{
}

TiTRepoIntfServerBase::TiTRepoIntfServerBase(const TOrbObjId& ooidThis) :
    TOrbServerBase(ooidThis)
{
}

// ----------------------------------------------------------------------------
// TiTRepoIntfServerBase: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TiTRepoIntfServerBase::Dispatch(const TString& strMethodName, TOrbCmd& orbcToDispatch)
{
    if (strMethodName == L"bQueryData")
    {
        TString strQueryType;
        orbcToDispatch.strmIn() >> strQueryType;
        TString strDataName;
        orbcToDispatch.strmIn() >> strDataName;
        tCIDLib::TCard4 c4BufSz_mbufToFill = 0;
        THeapBuf mbufToFill;
        tCIDLib::TBoolean retVal = bQueryData
        (
            strQueryType
          , strDataName
          , c4BufSz_mbufToFill
          , mbufToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4BufSz_mbufToFill;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufToFill, c4BufSz_mbufToFill);
    }
     else if (strMethodName == L"bQueryData2")
    {
        TString strQueryType;
        orbcToDispatch.strmIn() >> strQueryType;
        tCIDLib::TCard4 c4BufSz_mbufIO;
        orbcToDispatch.strmIn() >> c4BufSz_mbufIO;
        THeapBuf mbufIO(c4BufSz_mbufIO + 1);
        orbcToDispatch.strmIn().c4ReadBuffer(mbufIO, c4BufSz_mbufIO);
        tCIDLib::TBoolean retVal = bQueryData2
        (
            strQueryType
          , c4BufSz_mbufIO
          , mbufIO
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4BufSz_mbufIO;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufIO, c4BufSz_mbufIO);
    }
     else if (strMethodName == L"bQueryTextVal")
    {
        TString strQueryType;
        orbcToDispatch.strmIn() >> strQueryType;
        TString strDataName;
        orbcToDispatch.strmIn() >> strDataName;
        TString strToFill;
        tCIDLib::TBoolean retVal = bQueryTextVal
        (
            strQueryType
          , strDataName
          , strToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << strToFill;
    }
     else if (strMethodName == L"bSendData")
    {
        TString strSendType;
        orbcToDispatch.strmIn() >> strSendType;
        TString strDataName;
        orbcToDispatch.strmIn() >> strDataName;
        tCIDLib::TCard4 c4BufSz_mbufToSend;
        orbcToDispatch.strmIn() >> c4BufSz_mbufToSend;
        THeapBuf mbufToSend(c4BufSz_mbufToSend + 1);
        orbcToDispatch.strmIn().c4ReadBuffer(mbufToSend, c4BufSz_mbufToSend);
        tCIDLib::TBoolean retVal = bSendData
        (
            strSendType
          , strDataName
          , c4BufSz_mbufToSend
          , mbufToSend
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << strDataName;
        orbcToDispatch.strmOut() << c4BufSz_mbufToSend;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufToSend, c4BufSz_mbufToSend);
    }
     else if (strMethodName == L"c4QueryVal")
    {
        TString strValId;
        orbcToDispatch.strmIn() >> strValId;
        tCIDLib::TCard4 retVal = c4QueryVal
        (
            strValId
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"c4SendCmd")
    {
        TString strCmdId;
        orbcToDispatch.strmIn() >> strCmdId;
        TString strParms;
        orbcToDispatch.strmIn() >> strParms;
        tCIDLib::TCard4 retVal = c4SendCmd
        (
            strCmdId
          , strParms
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"QueryStatus")
    {
        tCQCMedia::ELoadStatus eCurStatus;
        tCQCMedia::ELoadStatus eLoadStatus;
        TString strDBSerialNum;
        tCIDLib::TCard4 c4TitleCnt = 0;
        QueryStatus
        (
            eCurStatus
          , eLoadStatus
          , strDBSerialNum
          , c4TitleCnt
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << eCurStatus;
        orbcToDispatch.strmOut() << eLoadStatus;
        orbcToDispatch.strmOut() << strDBSerialNum;
        orbcToDispatch.strmOut() << c4TitleCnt;
    }
     else if (strMethodName == L"bReloadDB")
    {
        tCIDLib::TBoolean retVal = bReloadDB
        (
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else
    {
         TParent::Dispatch(strMethodName, orbcToDispatch);
    }
}

