// ----------------------------------------------------------------------------
//  FILE: CQCTrayMon_AppCtrlServerBase.cpp
//  DATE: Sun, Mar 07 17:59:19 2021 -0500
//    ID: C62872FCFFA4BFF1-D3D869839AA78EEE
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCTrayMon.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
RTTIDecls(TAppCtrlServerBase,TOrbServerBase)


// ----------------------------------------------------------------------------
// Public, static data
// ----------------------------------------------------------------------------
const TString TAppCtrlServerBase::strInterfaceId(L"C62872FCFFA4BFF1-D3D869839AA78EEE");
const TString TAppCtrlServerBase::strImplScope(L"/CQC/CQCTrayMon/AppCtrl/");
const TString TAppCtrlServerBase::strImplBinding(L"/CQC/CQCTrayMon/AppCtrl/%(b)");


// ----------------------------------------------------------------------------
// TAppCtrlServerBase: Destructor
// ----------------------------------------------------------------------------
TAppCtrlServerBase::~TAppCtrlServerBase()
{
}

// ----------------------------------------------------------------------------
// TAppCtrlServerBase: Protected Constructors
// ----------------------------------------------------------------------------
TAppCtrlServerBase::TAppCtrlServerBase() :
    TOrbServerBase(strInterfaceId, L"TAppCtrlClientProxy" )
{
}

TAppCtrlServerBase::TAppCtrlServerBase(const TOrbObjId& ooidThis) :
    TOrbServerBase(ooidThis)
{
}

// ----------------------------------------------------------------------------
// TAppCtrlServerBase: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TAppCtrlServerBase::Dispatch(const TString& strMethodName, TOrbCmd& orbcToDispatch)
{
    if (strMethodName == L"AddRecord")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strAppTitle;
        orbcToDispatch.strmIn() >> strAppTitle;
        TString strAppName;
        orbcToDispatch.strmIn() >> strAppName;
        TString strParams;
        orbcToDispatch.strmIn() >> strParams;
        TString strWorkingDir;
        orbcToDispatch.strmIn() >> strWorkingDir;
        AddRecord
        (
            strMoniker
          , strAppTitle
          , strAppName
          , strParams
          , strWorkingDir
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"bAppRegistered")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strAppTitle;
        orbcToDispatch.strmIn() >> strAppTitle;
        tCIDLib::TBoolean retVal = bAppRegistered
        (
            strMoniker
          , strAppTitle
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bIsRunning")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TBoolean retVal = bIsRunning
        (
            strMoniker
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bIsVisible")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        tCIDLib::TBoolean retVal = bIsVisible
        (
            strMoniker
          , c4Id
          , c4ChildId
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bInvokeFile")
    {
        TString strPath;
        orbcToDispatch.strmIn() >> strPath;
        TString strShow;
        orbcToDispatch.strmIn() >> strShow;
        tCIDLib::TBoolean retVal = bInvokeFile
        (
            strPath
          , strShow
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bStartApp")
    {
        TString strAppPath;
        orbcToDispatch.strmIn() >> strAppPath;
        TString strParams;
        orbcToDispatch.strmIn() >> strParams;
        TString strInitPath;
        orbcToDispatch.strmIn() >> strInitPath;
        tCIDLib::TBoolean retVal = bStartApp
        (
            strAppPath
          , strParams
          , strInitPath
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bStart")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TBoolean retVal = bStart
        (
            strMoniker
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bStartWithParams")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strParams;
        orbcToDispatch.strmIn() >> strParams;
        tCIDLib::TBoolean retVal = bStartWithParams
        (
            strMoniker
          , strParams
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bStartAppViaOpen")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strDocPath;
        orbcToDispatch.strmIn() >> strDocPath;
        TString strInitPath;
        orbcToDispatch.strmIn() >> strInitPath;
        TString strShow;
        orbcToDispatch.strmIn() >> strShow;
        tCIDLib::TBoolean retVal = bStartAppViaOpen
        (
            strMoniker
          , strDocPath
          , strInitPath
          , strShow
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bStop")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TBoolean retVal = bStop
        (
            strMoniker
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"c4AddWindow")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strPath;
        orbcToDispatch.strmIn() >> strPath;
        tCIDLib::TCard4 retVal = c4AddWindow
        (
            strMoniker
          , strPath
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"c4AddWindowByClass")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strClass;
        orbcToDispatch.strmIn() >> strClass;
        tCIDLib::TCard4 retVal = c4AddWindowByClass
        (
            strMoniker
          , strClass
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"c4QueryListSel")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        tCIDLib::TCard4 retVal = c4QueryListSel
        (
            strMoniker
          , c4Id
          , c4ChildId
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"c4QueryText")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        TString strToFill;
        tCIDLib::TCard4 retVal = c4QueryText
        (
            strMoniker
          , c4Id
          , c4ChildId
          , strToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << strToFill;
    }
     else if (strMethodName == L"i4QueryTrackBar")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        tCIDLib::TInt4 retVal = i4QueryTrackBar
        (
            strMoniker
          , c4Id
          , c4ChildId
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"c4QueryWndStyles")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        tCIDLib::TCard4 retVal = c4QueryWndStyles
        (
            strMoniker
          , c4Id
          , c4ChildId
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"i4SendMsg")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        tCIDLib::TCard4 MsgId;
        orbcToDispatch.strmIn() >> MsgId;
        tCIDLib::TCard4 c4Param;
        orbcToDispatch.strmIn() >> c4Param;
        tCIDLib::TInt4 i4Param;
        orbcToDispatch.strmIn() >> i4Param;
        tCIDLib::TBoolean bAsync;
        orbcToDispatch.strmIn() >> bAsync;
        tCIDLib::TInt4 retVal = i4SendMsg
        (
            strMoniker
          , c4Id
          , c4ChildId
          , MsgId
          , c4Param
          , i4Param
          , bAsync
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"Ping")
    {
        Ping
        (
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"RemoveRecord")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        RemoveRecord
        (
            strMoniker
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetListSel")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        tCIDLib::TCard4 c4Index;
        orbcToDispatch.strmIn() >> c4Index;
        SetListSel
        (
            strMoniker
          , c4Id
          , c4ChildId
          , c4Index
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SendExtKey")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        tCIDCtrls::EExtKeys eExtKey;
        orbcToDispatch.strmIn() >> eExtKey;
        tCIDLib::TBoolean bAltShifted;
        orbcToDispatch.strmIn() >> bAltShifted;
        tCIDLib::TBoolean bCtrlShifted;
        orbcToDispatch.strmIn() >> bCtrlShifted;
        tCIDLib::TBoolean bShifted;
        orbcToDispatch.strmIn() >> bShifted;
        SendExtKey
        (
            strMoniker
          , c4Id
          , c4ChildId
          , eExtKey
          , bAltShifted
          , bCtrlShifted
          , bShifted
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SendKey")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        tCIDLib::TCh chKey;
        orbcToDispatch.strmIn() >> chKey;
        tCIDLib::TBoolean bAltShifted;
        orbcToDispatch.strmIn() >> bAltShifted;
        tCIDLib::TBoolean bCtrlShifted;
        orbcToDispatch.strmIn() >> bCtrlShifted;
        tCIDLib::TBoolean bShifted;
        orbcToDispatch.strmIn() >> bShifted;
        SendKey
        (
            strMoniker
          , c4Id
          , c4ChildId
          , chKey
          , bAltShifted
          , bCtrlShifted
          , bShifted
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetFocus")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        SetFocus
        (
            strMoniker
          , c4Id
          , c4ChildId
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetTrackBar")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        tCIDLib::TInt4 i4ToSet;
        orbcToDispatch.strmIn() >> i4ToSet;
        SetTrackBar
        (
            strMoniker
          , c4Id
          , c4ChildId
          , i4ToSet
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetWindowPos")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        tCIDLib::TInt4 i4X;
        orbcToDispatch.strmIn() >> i4X;
        tCIDLib::TInt4 i4Y;
        orbcToDispatch.strmIn() >> i4Y;
        SetWindowPos
        (
            strMoniker
          , c4Id
          , c4ChildId
          , i4X
          , i4Y
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetWindowSize")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        tCIDLib::TCard4 c4Width;
        orbcToDispatch.strmIn() >> c4Width;
        tCIDLib::TCard4 c4Height;
        orbcToDispatch.strmIn() >> c4Height;
        SetWindowSize
        (
            strMoniker
          , c4Id
          , c4ChildId
          , c4Width
          , c4Height
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetWindowText")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        TString strText;
        orbcToDispatch.strmIn() >> strText;
        SetWindowText
        (
            strMoniker
          , c4Id
          , c4ChildId
          , strText
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"ShowWindow")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        tCIDLib::TBoolean bState;
        orbcToDispatch.strmIn() >> bState;
        ShowWindow
        (
            strMoniker
          , c4Id
          , c4ChildId
          , bState
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"StandardOp")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4Id;
        orbcToDispatch.strmIn() >> c4Id;
        tCIDLib::TCard4 c4ChildId;
        orbcToDispatch.strmIn() >> c4ChildId;
        tCQCKit::EStdACOps eOp;
        orbcToDispatch.strmIn() >> eOp;
        StandardOp
        (
            strMoniker
          , c4Id
          , c4ChildId
          , eOp
        );
        orbcToDispatch.strmOut().Reset();
    }
     else
    {
         TParent::Dispatch(strMethodName, orbcToDispatch);
    }
}

