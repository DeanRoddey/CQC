// ----------------------------------------------------------------------------
//  FILE: CQCInst_Types.cpp
//  DATE: Sun, Nov 08 14:57:40 2020 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

#include "CQCInst.hpp"



static TEnumMap::TEnumValItem aeitemValues_EInstComps[10] = 
{
    {  tCIDLib::TInt4(tCQCInst::EInstComps::CTools), 0, kCQCInstMsgs::midInstMode_Comp_CTools,  { L"", L"", L"", L"CTools", L"EInstComps::CTools", L"" } }
  , {  tCIDLib::TInt4(tCQCInst::EInstComps::CQCVoice), 0, kCQCInstMsgs::midInstMode_Comp_CQCVoice,  { L"", L"", L"", L"CQCVoice", L"EInstComps::CQCVoice", L"" } }
  , {  tCIDLib::TInt4(tCQCInst::EInstComps::DevCtrl), 0, kCQCInstMsgs::midInstMode_Comp_DevCtrl,  { L"", L"", L"", L"DevCtrl", L"EInstComps::DevCtrl", L"" } }
  , {  tCIDLib::TInt4(tCQCInst::EInstComps::EventSrv), 0, kCQCInstMsgs::midInstMode_Comp_EvSrv,  { L"", L"", L"", L"EventSrv", L"EInstComps::EventSrv", L"" } }
  , {  tCIDLib::TInt4(tCQCInst::EInstComps::IntfViewer), 0, kCQCInstMsgs::midInstMode_Comp_IV,  { L"", L"", L"", L"IntfViewer", L"EInstComps::IntfViewer", L"" } }
  , {  tCIDLib::TInt4(tCQCInst::EInstComps::LogicSrv), 0, kCQCInstMsgs::midInstMode_Comp_LogicSrv,  { L"", L"", L"", L"LogicSrv", L"EInstComps::LogicSrv", L"" } }
  , {  tCIDLib::TInt4(tCQCInst::EInstComps::MasterSrv), 0, kCQCInstMsgs::midInstMode_Comp_MS,  { L"", L"", L"", L"MasterSrv", L"EInstComps::MasterSrv", L"" } }
  , {  tCIDLib::TInt4(tCQCInst::EInstComps::TrayMon), 0, kCQCInstMsgs::midInstMode_Comp_TrayMon,  { L"", L"", L"", L"TrayMon", L"EInstComps::TrayMon", L"" } }
  , {  tCIDLib::TInt4(tCQCInst::EInstComps::WebSrv), 0, kCQCInstMsgs::midInstMode_Comp_WebSrv,  { L"", L"", L"", L"WebSrv", L"EInstComps::WebSrv", L"" } }
  , {  tCIDLib::TInt4(tCQCInst::EInstComps::XMLGW), 0, kCQCInstMsgs::midInstMode_Comp_XMLGW,  { L"", L"", L"", L"XMLGW", L"EInstComps::XMLGW", L"" } }

};

static TEnumMap emapEInstComps
(
     L"EInstComps"
     , 10
     , kCIDLib::False
     , aeitemValues_EInstComps
     , &facCQCInst
     , tCIDLib::TCard4(tCQCInst::EInstComps::Count)
);

const TString& tCQCInst::strXlatEInstComps(const tCQCInst::EInstComps eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEInstComps.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCInst::EInstComps tCQCInst::eXlatEInstComps(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCInst::EInstComps(emapEInstComps.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

tCQCInst::EInstComps operator++(tCQCInst::EInstComps& eVal, int)
{
    tCQCInst::EInstComps eTmp = eVal;
    eVal = tCQCInst::EInstComps(int(eVal)+1);
    return eTmp;
}

tCIDLib::TBoolean tCQCInst::bIsValidEnum(const tCQCInst::EInstComps eVal)
{
    return emapEInstComps.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ENavFlags[5] = 
{
    {  tCIDLib::TInt4(tCQCInst::ENavFlags::AllowNext), 0, 0,  { L"", L"", L"", L"AllowNext", L"ENavFlags::AllowNext", L"" } }
  , {  tCIDLib::TInt4(tCQCInst::ENavFlags::AllowPrev), 0, 0,  { L"", L"", L"", L"AllowPrev", L"ENavFlags::AllowPrev", L"" } }
  , {  tCIDLib::TInt4(tCQCInst::ENavFlags::AllowClose), 0, 0,  { L"", L"", L"", L"AllowClose", L"ENavFlags::AllowClose", L"" } }
  , {  tCIDLib::TInt4(tCQCInst::ENavFlags::AllowAll), 0, 0,  { L"", L"", L"", L"AllowAll", L"ENavFlags::AllowAll", L"" } }
  , {  tCIDLib::TInt4(tCQCInst::ENavFlags::NoBack), 0, 0,  { L"", L"", L"", L"NoBack", L"ENavFlags::NoBack", L"" } }

};

static TEnumMap emapENavFlags
(
     L"ENavFlags"
     , 5
     , kCIDLib::True
     , aeitemValues_ENavFlags
     , nullptr
     , tCIDLib::TCard4(tCQCInst::ENavFlags::None)
);

tCIDLib::TBoolean tCQCInst::bIsValidEnum(const tCQCInst::ENavFlags eVal)
{
    return emapENavFlags.bIsValidEnum(tCIDLib::TCard4(eVal));

}

