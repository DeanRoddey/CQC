// ----------------------------------------------------------------------------
//  FILE: CQCInst_Types.hpp
//  DATE: Sun, Nov 08 14:57:40 2020 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------
#pragma once

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tCQCInst
{
    
    // ------------------------------------------------------------------------
    //  The individual components that we can install. Which ones depends on the
    //  install mode above. We load a list of these into a checked list box and
    //  check/uncheck them depending on the mode selected.
    //                  
    // ------------------------------------------------------------------------
    enum class EInstComps
    {
        CTools
        , CQCVoice
        , DevCtrl
        , EventSrv
        , IntfViewer
        , LogicSrv
        , MasterSrv
        , TrayMon
        , WebSrv
        , XMLGW
        , Count
        , Min = CTools
        , Max = XMLGW
    };
     EInstComps eXlatEInstComps(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
     const TString& strXlatEInstComps(const EInstComps eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
     tCIDLib::TBoolean bIsValidEnum(const EInstComps eVal);

    
    // ------------------------------------------------------------------------
    //  We have three buttons (back, next, and close.) Each panel can control
    //  the button states by calling a method on the main frame window (their
    //  parent.)
    //                  
    // ------------------------------------------------------------------------
    enum class ENavFlags : tCIDLib::TCard4
    {
        AllowNext = 0x0001
        , AllowPrev = 0x0002
        , AllowClose = 0x0004
        , AllowAll = 0x0007
        , NoBack = 0x0005
        , Count = 5
        , None = 0
        , AllBits = 0x7
    };
     tCIDLib::TBoolean bIsValidEnum(const ENavFlags eVal);

}

#pragma CIDLIB_POPPACK

 tCQCInst::EInstComps operator++(tCQCInst::EInstComps& eVal, int);

constexpr tCQCInst::ENavFlags operator|(const tCQCInst::ENavFlags eLHS, const tCQCInst::ENavFlags eRHS)
{    
    return tCQCInst::ENavFlags(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
}
constexpr tCQCInst::ENavFlags& operator|=(tCQCInst::ENavFlags& eLHS, const tCQCInst::ENavFlags eRHS)
{    
    eLHS = tCQCInst::ENavFlags(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    return eLHS;
}
constexpr tCQCInst::ENavFlags operator&(const tCQCInst::ENavFlags eLHS, const tCQCInst::ENavFlags eRHS)
{    
    return tCQCInst::ENavFlags(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
}
constexpr tCQCInst::ENavFlags& operator&=(tCQCInst::ENavFlags& eLHS, const tCQCInst::ENavFlags eRHS)
{    
    eLHS = tCQCInst::ENavFlags(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    return eLHS;
}

