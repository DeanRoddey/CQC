//
// FILE NAME: CQCMedia_Database.hpp
//
// AUTHOR: Dean Roddey
//
// CREATED: 03/23/2005
//
// COPYRIGHT: Charmed Quark Systems, Ltd @ 2020
//
//  This software is copyrighted by 'Charmed Quark Systems, Ltd' and
//  the author (Dean Roddey.) It is licensed under the MIT Open Source
//  license:
//
//  https://opensource.org/licenses/MIT
//
// DESCRIPTION:
//
//  This class provides a general purpose, in-memory database of media that can be used by
//  media drivers that find it convenient. It provides a lot of grunt work code for managing
//  media in a way that fits well to the CQC media driver architecture's view of media data.
//  This database builds on the family of classes in CQCMedia_DBInfo.hpp/cpp, which define
//  things like categories, tracks, collections, etc...
//
//  Basically, it is a by ref keyed hash set for each type of media (movies, music, pictures),
//  each of which contains collections of that type, sorted by their numeric ids. There is
//  also a 'by unique id' hash set for each media type, which is non-adopting, that provides
//  fast lookup by unique id. The unique id is repository specific and might be UPC code or
//  some value generated by the repository for it's own purposes.
//
//  We then provide a higher level construct called a 'title set', which is the actual level
//  at which the database is browsed. Title sets are one or more collections (of the
//  same media type) that go together, such as a two part movie or a movie plus extras or a
//  double album.
//
//  Every collection must be in a title set, but it could be in more than one if we later
//  added the ability to create 'virtual sets'. Most sets will have a single collection of
//  course, since most CDs or DVDs are single discs.
//
//  We also support 'playlists', but these are just arbitrarily created collections. They are
//  not different in any way from regular (CD based) collections, their configuration is just
//  not driven by retrieved meta data, they are created by the user. We don't make any
//  distinction between the two types.
//
//
//  We provide both binary and XML dumps of the database that can be zlib compressed. These
//  are typically used to serve up the database to clients who will cache the info and keep
//  it around, or to upload to a repo driver from a client. The binary one is just the
//  streamed database with some house keeping info, so it can be streamed back into a
//  database.
//
//  There are a set of protected methods that allow non-constant access to the various sets,
//  collections, etc... These are for internal use, though we also allow the DBInfo classes to
//  access them for efficiency. We trust those to do the right thing.
//
//  Otherwise, we try to provide various methods which allows the most common updates of the
//  DBInfo classes required, by way of the database itself, so that external users don't have
//  o copy objects, update them, and call the UpdateXXX() methods to put the changes back,
//  though that is also available as a means to update objects.
//
//  We provide a 'by artist' list as well. This is really only used by viewers of the data,
//  not during editing of the database. They have to ask that this info be generated else it
//  is not and will always indicate it can't find any info, no matter what artist is passed.
//  The by artist list is a list of pointers to each title set that the artist is associated
//  with, which makes it fast to get such a list for any given artist, which is something that
//  a viewer will very likely want to do fairly often if it provides browsing by artist.
//
//  If you change the database, the by artist lists will be reset to empty and you will have
//  to regenerate them. Normaly this isn't an issue since only read-only viewers of the data
//  would generate them.
//
// CAVEATS/GOTCHAS:
//
// LOG:
//
#pragma once


#pragma CIDLIB_PACK(CIDLIBPACK)

// ---------------------------------------------------------------------------
//   CLASS: TMediaCatFilt
//  PREFIX: mdbf
// ---------------------------------------------------------------------------
class CQCMEDIAEXPORT TMediaCatFilt
{
    public :
        // -------------------------------------------------------------------
        //  Constructors and Destructor
        // -------------------------------------------------------------------
        TMediaCatFilt() noexcept;

        TMediaCatFilt(const TMediaCatFilt&) = delete;
        TMediaCatFilt(TMediaCatFilt&&) = delete;

        virtual ~TMediaCatFilt();


        // -------------------------------------------------------------------
        //  Public operators
        // -------------------------------------------------------------------
        TMediaCatFilt& operator=(const TMediaCatFilt&) = delete;
        TMediaCatFilt& operator=(TMediaCatFilt&&) = delete;


        // -------------------------------------------------------------------
        //  Public, virtual methods
        // -------------------------------------------------------------------
        virtual tCIDLib::TBoolean bTest
        (
            const   TMediaCat&              mcatTest
        )   const;
};


// ---------------------------------------------------------------------------
//   CLASS: TMediaColFilt
//  PREFIX: mdbf
// ---------------------------------------------------------------------------
class CQCMEDIAEXPORT TMediaColFilt
{
    public :
        // -------------------------------------------------------------------
        //  Constructors and Destructor
        // -------------------------------------------------------------------
        TMediaColFilt() noexcept;

        TMediaColFilt(const TMediaColFilt&) = delete;
        TMediaColFilt(TMediaColFilt&&) = delete;

        virtual ~TMediaColFilt();


        // -------------------------------------------------------------------
        //  Public operators
        // -------------------------------------------------------------------
        TMediaColFilt& operator=(const TMediaColFilt&) = delete;
        TMediaColFilt& operator=(TMediaColFilt&&) = delete;


        // -------------------------------------------------------------------
        //  Public, virtual methods
        // -------------------------------------------------------------------
        virtual tCIDLib::TBoolean bTest
        (
            const   TMediaCollect&          mcolTest
        )   const;
};


// ---------------------------------------------------------------------------
//   CLASS: TMediaItemFilt
//  PREFIX: mdbf
// ---------------------------------------------------------------------------
class CQCMEDIAEXPORT TMediaItemFilt
{
    public :
        // -------------------------------------------------------------------
        //  Constructors and Destructor
        // -------------------------------------------------------------------
        TMediaItemFilt() noexcept;

        TMediaItemFilt(const TMediaItemFilt&) = delete;
        TMediaItemFilt(TMediaItemFilt&&) = delete;

        virtual ~TMediaItemFilt();


        // -------------------------------------------------------------------
        //  Public operators
        // -------------------------------------------------------------------
        TMediaItemFilt& operator=(const TMediaItemFilt&) = delete;
        TMediaItemFilt& operator=(TMediaItemFilt&&) = delete;


        // -------------------------------------------------------------------
        //  Public, virtual methods
        // -------------------------------------------------------------------
        virtual tCIDLib::TBoolean bTest
        (
            const   TMediaItem&             mitemTest
        )   const;
};

// ---------------------------------------------------------------------------
//   CLASS: TMediaSetFilt
//  PREFIX: mdbf
// ---------------------------------------------------------------------------
class CQCMEDIAEXPORT TMediaSetFilt
{
    public :
        // -------------------------------------------------------------------
        //  Constructors and Destructor
        // -------------------------------------------------------------------
        TMediaSetFilt() noexcept;

        TMediaSetFilt(const TMediaSetFilt&) = delete;
        TMediaSetFilt(TMediaSetFilt&&) = delete;

        virtual ~TMediaSetFilt();


        // -------------------------------------------------------------------
        //  Public operators
        // -------------------------------------------------------------------
        TMediaSetFilt& operator=(const TMediaSetFilt&) = delete;
        TMediaSetFilt& operator=(TMediaSetFilt&&) = delete;


        // -------------------------------------------------------------------
        //  Public, virtual methods
        // -------------------------------------------------------------------
        virtual tCIDLib::TBoolean bTest
        (
            const   TMediaTitleSet&         mtsTest
        )   const;
};


// ---------------------------------------------------------------------------
//   CLASS: TMediaDB
//  PREFIX: mdb
// ---------------------------------------------------------------------------
class CQCMEDIAEXPORT TMediaDB : public TObject, public MStreamable
{
    public :
        // -------------------------------------------------------------------
        //  Public data types
        // -------------------------------------------------------------------
        using TCatCompFunc = tCIDLib::ESortComps (*)
        (
            const   TMediaCat&              mcat1
            , const TMediaCat&              mcat2
        );

        using TColCompFunc = tCIDLib::ESortComps (*)
        (
            const   TMediaCollect&          mcol1
            , const TMediaCollect&          mcol2
        );

        using TItemCompFunc = tCIDLib::ESortComps (*)
        (
            const   TMediaItem&             mitem1
            , const TMediaItem&             mitem2
        );

        using TSetCompFunc = tCIDLib::ESortComps (*)
        (
            const   TMediaTitleSet&         mts1
            , const TMediaTitleSet&         mts2
        );


        // -------------------------------------------------------------------
        //  Public, static methods
        // -------------------------------------------------------------------
        static tCIDLib::TCard4 c4FormatBinDump
        (
                    TBinOutStream&          strTar
            , const tCQCMedia::EMTFlags&    eMTFlags
            , const TString&                strSerNum
            , const TMediaDB&               mdbSrc
        );

        static tCIDLib::TCard4 c4DecompBinDump
        (
            const   TMemBuf&                mbufSrc
            , const tCIDLib::TCard4&        c4SrcSz
            ,       TBinOutStream&          strmTar
        );

        static tCIDLib::TCard4 c4CompBinDump
        (
            const   TMemBuf&                mbufSrc
            , const tCIDLib::TCard4&        c4SrcSz
            ,       TBinOutStream&          strmTar
        );

        static tCIDLib::TVoid ParseBinDump
        (
            const   TMemBuf&                mbufData
            , const tCIDLib::TCard4         c4DataSz
            ,       tCQCMedia::EMTFlags&    eMTFlags
            ,       TString&                strSerNum
            ,       TMediaDB&               mdbToFill
            , const tCIDLib::TBoolean       bCompressed
        );


        // -------------------------------------------------------------------
        //  Constructors and Destructor
        // -------------------------------------------------------------------
        TMediaDB();

        TMediaDB(const TMediaDB& mdbSrc);
        TMediaDB(TMediaDB&& mdbSrc) = default;

        ~TMediaDB() = default;



        // -------------------------------------------------------------------
        //  Public operators
        // -------------------------------------------------------------------
        TMediaDB& operator=(const TMediaDB& mdbSrc);
        TMediaDB& operator=(TMediaDB&&) = default;


        // -------------------------------------------------------------------
        //  Public, non-virtual methods
        // -------------------------------------------------------------------
        tCIDLib::TVoid AccumArtistNames
        (
            const   tCQCMedia::EMediaTypes  eMType
        );

        tCIDLib::TVoid AddColItem
        (
            const   tCIDLib::TCard2         c2ColId
            , const tCQCMedia::EMediaTypes  eMType
            , const TMediaItem&             mitemToAdd
            , const tCIDLib::TCard4         c4At
        );

        tCIDLib::TVoid AddColToCat
        (
            const   tCIDLib::TCard2         c2ColId
            , const tCIDLib::TCard2         c2CatId
            , const tCQCMedia::EMediaTypes  eMType
        );

        tCIDLib::TVoid AddTitleCol
        (
            const   tCIDLib::TCard2         c2SetId
            , const tCQCMedia::EMediaTypes  eMType
            , const TMediaCollect&          mcolToAdd
        );

        tCIDLib::TBoolean bAddItemToPL
        (
            const   tCIDLib::TCard2         c2PLColId
            , const tCQCMedia::EMediaTypes  eMType
            , const tCIDLib::TCard2         c2ItemId
        );

        tCIDLib::TBoolean bAddColToPL
        (
            const   tCIDLib::TCard2         c2PLColId
            , const tCQCMedia::EMediaTypes  eMType
            , const tCIDLib::TCard2         c2ColId
        );

        tCIDLib::TBoolean bAdjustIntMediaPaths
        (
            const   TString&                strBasePath
        );

        tCIDLib::TBoolean bCatHasSomeSets
        (
            const   TMediaCat&              mcatToCheck
        )   const;

        tCIDLib::TBoolean bChangeExtMediaPaths
        (
            const   TString&                strFind
            , const TString&                strReplace
            ,       tCIDLib::TCard4&        c4ModCnt
        );

        tCIDLib::TBoolean bCheckUIDExists
        (
            const   tCQCMedia::EMediaTypes  eMType
            , const tCQCMedia::EDataTypes   eDType
            , const TString&                strUniqueID
            ,       tCIDLib::TCard2&        c2Id
            ,       TString&                strName
        );

        tCIDLib::TBoolean bCookieLookup
        (
            const   tCQCMedia::ECookieTypes eCType
            , const tCQCMedia::EMediaTypes  eMType
            , const TString&                strCatName
            , const TString&                strTitleName
            , const TString&                strColName
            , const TString&                strItemName
            ,       TString&                strToFill
        )   const;

        tCIDLib::TBoolean bFindByCookie
        (
            const   TString&                strCookie
            ,       tCQCMedia::EMediaTypes& eMType
            , const TMediaTitleSet*&        pmtsFound
            , const TMediaCollect*&         pmcolFound
            , const TMediaItem*&            pmitemFound
        )   const;

        tCIDLib::TBoolean bFindItemContainer
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2Id
            ,       tCIDLib::TCard2&        c2ColInd
            ,       tCIDLib::TCard2&        c2ItemInd
            , const TMediaTitleSet*&        pmtsCont
            , const TMediaCollect*&         pmcolCont
        )   const;

        tCIDLib::TBoolean bFindColContainer
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2Id
            ,       tCIDLib::TCard2&        c2ColInd
            , const TMediaTitleSet*&        pmtsCont
        )   const;

        tCIDLib::TBoolean bFindUnassigned
        (
                    tCQCMedia::TIdList&     fcolToFill
            , const tCQCMedia::EMediaTypes  eMType
            , const tCQCMedia::EDataTypes   eDType
        );

        tCIDLib::TBoolean bIsEmpty() const;

        tCIDLib::TBoolean bRemoveObject
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCQCMedia::EDataTypes   eDataType
            , const tCIDLib::TCard2         c2Id
        );

        tCIDLib::TBoolean bTitleIsInCat
        (
            const   TMediaTitleSet&         mtsToCheck
            , const tCIDLib::TCard2         c2CatId
        )   const;

        tCIDLib::TCard2 c2AddCategory
        (
                    TMediaCat* const        pmcatToAdd
            , const tCIDLib::TBoolean       bTakeId = kCIDLib::False
        );

        tCIDLib::TCard2 c2AddCollect
        (
                    TMediaCollect* const    pmcolNew
            , const tCIDLib::TBoolean       bTakeId = kCIDLib::False
        );

        tCIDLib::TCard2 c2AddImage
        (
                    TMediaImg* const        pmimgNew
            , const tCIDLib::TBoolean       bTakeId = kCIDLib::False
        );

        tCIDLib::TCard2 c2AddItem
        (
                    TMediaItem* const       pmitmNew
            , const tCIDLib::TBoolean       bTakeId = kCIDLib::False
        );

        tCIDLib::TCard2 c2AddTitle
        (
                    TMediaTitleSet* const   pmtsNew
            , const tCIDLib::TBoolean       bTakeId = kCIDLib::False
        );

        tCIDLib::TCard4 c4BuildBinDump
        (
                    TMemBuf&                mbufToFill
            , const TString&                strRepoMon
            , const TString&                strSerialNum
            , const tCQCMedia::EMTFlags     eMTFlags
        )   const;

        tCIDLib::TCard4 c4BuildXMLDump
        (
                    TMemBuf&                mbufToFill
            , const TString&                strRepoMon
            , const TString&                strSerialNum
            , const tCQCMedia::EMTFlags     eMTFlags
        )   const;

        tCIDLib::TCard4 c4CatCnt
        (
            const   tCQCMedia::EMediaTypes  eType
        )   const;

        tCIDLib::TCard4 c4CollectCnt
        (
            const   tCQCMedia::EMediaTypes  eType
        )   const;

        tCIDLib::TCard4 c4ImageCnt
        (
            const   tCQCMedia::EMediaTypes  eType
        )   const;

        tCIDLib::TCard4 c4ItemCnt
        (
            const   tCQCMedia::EMediaTypes  eType
        )   const;

        tCIDLib::TCard4 c4QueryAvailSlots
        (
            const   TString&                strChangerMoniker
            ,       TBitset&                btsToFill
            , const tCIDLib::TCard4         c4MaxSlots
            ,       tCQCMedia::TNameList* const pcolColNames
        )   const;

        tCIDLib::TCard4 c4QueryPlayLists
        (
                    tCIDLib::TStrList&      colNames
            ,       tCQCMedia::TMediaIdList& fcolIds
        )   const;

        tCIDLib::TCard4 c4QueryCatList
        (
            const   tCQCMedia::EMediaTypes  eType
            ,       TRefVector<const TMediaCat>& colToFill
            ,       TCatCompFunc            pfnSort
            ,       TMediaCatFilt* const    pmdbfSel = 0
        )   const;

        tCIDLib::TCard4 c4QueryColList
        (
            const   tCQCMedia::EMediaTypes  eType
            ,       TRefVector<const TMediaCollect>& colToFill
            ,       TColCompFunc            pfnSort
            ,       TMediaColFilt* const    pmdbfSel = 0
        )   const;

        tCIDLib::TCard4 c4QueryItemList
        (
            const   tCQCMedia::EMediaTypes  eType
            ,       tCQCMedia::TItemIdList& colToFill
            ,       TItemCompFunc           pfnSort
            ,       TMediaItemFilt* const   pmdbfSel = 0
        )   const;

        tCIDLib::TCard4 c4QuerySetList
        (
            const   tCQCMedia::EMediaTypes  eType
            ,       tCQCMedia::TSetIdList&  colToFill
            ,       TSetCompFunc            pfnSort
            ,       TMediaSetFilt* const    pmdbfSel = 0
        )   const;

        tCIDLib::TCard4 c4TitleSetCnt
        (
            const   tCQCMedia::EMediaTypes  eType
        )   const;

        tCIDLib::TCard4 c4TotalTitleCnt() const;

        const tCQCMedia::TByArtistList& colByArtistList
        (
            const   tCQCMedia::EMediaTypes  eMType
        )   const;

        tCIDLib::TVoid ClearArt
        (
            const   tCIDLib::TCard2         c2ImgId
            , const tCQCMedia::EMediaTypes  eMType
            , const tCQCMedia::ERArtTypes   eArtType
        );

        tCIDLib::TVoid ClearArtPaths
        (
            const   tCIDLib::TCard2         c2ImgId
            , const tCQCMedia::EMediaTypes  eMType
        );

        tCIDLib::TVoid ClearColCats
        (
            const   tCIDLib::TCard2         c2ColId
            , const tCQCMedia::EMediaTypes  eMType
        );

        tCIDLib::TVoid FinalizeObjects
        (
            const   tCIDLib::TCard2         c2Id
            , const tCQCMedia::EMediaTypes  eMType
            , const tCQCMedia::EDataTypes   eDType
            , const tCIDLib::TBoolean       bIncludeContained
        );

        tCIDLib::TVoid FindContainers
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCQCMedia::EDataTypes   eDataType
            , const tCIDLib::TCard2         c2Id
            ,       tCQCMedia::TColIdList&  colCollects
            ,       tCQCMedia::TSetIdList&  colSets
        )   const;

        tCIDLib::TVoid FormatBin
        (
            const   tCQCMedia::EMediaTypes  eMType
            ,       TBinOutStream&          strmTar
        )   const;

        tCIDLib::TVoid FormatXML
        (
            const   tCQCMedia::EMediaTypes  eMType
            ,       TTextOutStream&         strmTar
        )   const;

        tCIDLib::TVoid LoadFromBinDump
        (
            const   TMemBuf&                mbufData
            , const tCIDLib::TCard4         c4DataSz
            ,       tCQCMedia::EMTFlags&    eMTFlags
            ,       TString&                strSerNum
            , const tCIDLib::TBoolean       bCompressed
        );

        tCIDLib::TVoid LoadByArtistMap();

        tCIDLib::TVoid LoadComplete();

        const TMediaCat& mcatAt
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard4         c4At
        )   const;

        const TMediaCollect& mcolAt
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard4         c4At
        )   const;

        const TMediaImg& mimgAt
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard4         c4At
        )   const;

        const TMediaItem& mitemAt
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard4         c4At
        )   const;

        const TMediaTitleSet& mtsAt
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard4         c4At
        )   const;

        tCIDLib::TVoid MoveItem
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2SrcColId
            , const tCIDLib::TCard2         c2TarColId
            , const tCIDLib::TCard2         c2ItemId
        );

        const TArtistMap* pcolFindArtistMap
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strArtist
        )   const;

        const TMediaCat* pmcatById
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2IdToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        )   const;

        const TMediaCat* pmcatByName
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        )   const;

        const TMediaCat* pmcatByUniqueId
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        )   const;

        const TMediaCollect* pmcolById
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2IdToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        )   const;

        const TMediaCollect* pmcolByUniqueId
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        )   const;

        const TMediaCollect* pmcolUnknown
        (
            const   tCQCMedia::EMediaTypes  eType
        )   const;

        const TMediaImg* pmimgById
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2IdToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        )   const;

        const TMediaImg* pmimgByUniqueId
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        )   const;

        const TMediaItem* pmitemById
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2IdToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        )   const;

        const TMediaItem* pmitemByUniqueId
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        )   const;

        const TMediaItem* pmitemByLocInfo
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        )   const;

        const TMediaItem* pmitemUnknown
        (
            const   tCQCMedia::EMediaTypes  eType
        )   const;

        const TMediaTitleSet* pmtsById
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2IdToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        )   const;

        const TMediaTitleSet* pmtsByUniqueId
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        )   const;

        const TMediaTitleSet* pmtsFindContainingSet
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TMediaCollect&          mcolSrc
            ,       tCIDLib::TCard2&        c2Index
            , const tCIDLib::TBoolean       bThrowIfNot
        )   const;

        const TMediaTitleSet* pmtsSetTitleRating
        (
            const   tCIDLib::TCard2         c2SetId
            , const tCQCMedia::EMediaTypes  eMType
            , const tCIDLib::TCard4         c4ToSet
        );

        tCIDLib::TVoid PruneEmptyContainers();

        tCIDLib::TVoid PruneHierarchy
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TBoolean       bIsTitle
            , const tCIDLib::TCard2         c2Id
        );

        tCIDLib::TVoid QueryChangers
        (
                    tCIDLib::TStrList&      colMonikersToFill
        );

        tCIDLib::TVoid QueryStats
        (
                    tCIDLib::TCard4&        c4MovieSetCnt
            ,       tCIDLib::TCard4&        c4MovieColCnt
            ,       tCIDLib::TCard4&        c4MovieItemCnt
            ,       tCIDLib::TCard4&        c4MovieArtCnt
            ,       tCIDLib::TCard4&        c4MusicSetCnt
            ,       tCIDLib::TCard4&        c4MusicColCnt
            ,       tCIDLib::TCard4&        c4MusicItemCnt
            ,       tCIDLib::TCard4&        c4MusicArtCnt
        )   const;

        tCIDLib::TVoid QueryTitleCats
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2SetId
            ,       tCQCMedia::TIdList&     fcolToFill
        )   const;

        tCIDLib::TVoid RandomCatQuery
        (
            const   TString&                strRepoMoniker
            , const tCIDLib::TCard2         c2CatId
            , const tCIDLib::TCard4         c4MaxItems
            ,       TVector<TCQCMediaPLItem>& colToFill
        )   const;

        tCIDLib::TVoid RefinalizeItemConts
        (
            const   TMediaItem&             mitemSrc
        );

        tCIDLib::TVoid RemoveAllCatRefs
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2CatId
        );

        tCIDLib::TVoid RemoveFromCol
        (
            const   TMediaCollect&          mcolSrc
            , const tCIDLib::TCard2         c2ItemId
        );

        tCIDLib::TVoid RemoveFromSet
        (
            const   TMediaTitleSet&         mtsSrc
            , const tCIDLib::TCard2         c2ColId
        );

        tCIDLib::TVoid RenameObject
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCQCMedia::EDataTypes   eDataType
            , const tCIDLib::TCard2         c2Id
            , const TString&                strNewName
        );

        tCIDLib::TVoid Reset();

        const TString& strAllCatCookieFor
        (
            const   tCQCMedia::EMediaTypes  eForType
        )   const;

        tCIDLib::TVoid SetArt
        (
            const   tCIDLib::TCard2         c2ImgId
            , const tCQCMedia::EMediaTypes  eMType
            , const tCQCMedia::ERArtTypes   eArtType
            , const TMemBuf&                mbufToSet
            , const tCIDLib::TCard4         c4Bytes
        );

        tCIDLib::TVoid SetArt
        (
            const   tCIDLib::TCard2         c2ImgId
            , const tCQCMedia::EMediaTypes  eMType
            , const tCQCMedia::ERArtTypes   eArtType
            ,       TBinInStream&           strmToSet
            , const tCIDLib::TCard4         c4Bytes
        );

        tCIDLib::TVoid SetArt
        (
            const   tCIDLib::TCard2         c2ImgId
            , const tCQCMedia::EMediaTypes  eMType
            , const tCQCMedia::ERArtTypes   eArtType
            , const TMemBuf&                mbufToSet
            , const tCIDLib::TCard4         c4Bytes
            , const TString&                strPathToSet
        );

        tCIDLib::TVoid SetArt
        (
            const   tCIDLib::TCard2         c2ImgId
            , const tCQCMedia::EMediaTypes  eMType
            , const tCQCMedia::ERArtTypes   eArtType
            ,       TBinInStream&           strmToSet
            , const tCIDLib::TCard4         c4Bytes
            , const TString&                strPathToSet
        );

        tCIDLib::TVoid SetArtId
        (
            const   tCIDLib::TCard2         c2Id
            , const tCQCMedia::EMediaTypes  eMType
            , const tCIDLib::TBoolean       bTitle
            , const tCIDLib::TCard2         c2ArtId
        );

        tCIDLib::TVoid SetArtPath
        (
            const   tCIDLib::TCard2         c2ImgId
            , const tCQCMedia::EMediaTypes  eMType
            , const tCQCMedia::ERArtTypes   eArtType
            , const TString&                strToSet
        );

        tCIDLib::TVoid SetDescription
        (
            const   tCIDLib::TCard2         c2Id
            , const tCQCMedia::EMediaTypes  eMType
            , const TString&                strToSet
        );

        tCIDLib::TVoid SetLocInfo
        (
            const   tCIDLib::TCard2         c2Id
            , const tCQCMedia::EMediaTypes  eMType
            , const tCQCMedia::EDataTypes   eDType
            , const TString&                strToSet
        );

        tCIDLib::TVoid SetSeqNum
        (
            const   tCIDLib::TCard2         c2SetId
            , const tCQCMedia::EMediaTypes  eMType
            , const tCIDLib::TCard4         c4ToSet
        );

        tCIDLib::TVoid TakeFrom
        (
                    TMediaDB&               mdbSrc
        );

        tCIDLib::TVoid ThrowBadType
        (
            const   tCIDLib::TCard4         c4Line
            , const tCQCMedia::EMediaTypes  eType
        )   const;

        tCIDLib::TVoid UpdateCategory
        (
            const   TMediaCat&              mcatNew
        );

        tCIDLib::TVoid UpdateCollect
        (
            const   TMediaCollect&          mcolNew
        );

        tCIDLib::TVoid UpdateImage
        (
            const   TMediaImg&              mimgNew
        );

        tCIDLib::TVoid UpdateItem
        (
            const   TMediaItem&             mitmNew
        );

        tCIDLib::TVoid UpdateTitle
        (
            const   TMediaTitleSet&         mtsNew
        );


        // -------------------------------------------------------------------
        //  This is purely for the CQSL repo driver to do some data upgrading when
        //  upgrading from a pre-4.4.902 version, to help us undo some issues that
        //  might have occurred in the past, while we are already in the process
        //  of re-swizzling the data.
        // -------------------------------------------------------------------
        tCIDLib::TVoid CQSLUpdate902();


    protected :
        // -------------------------------------------------------------------
        //  Declare our friends. We trust our set, collect, etc... clases to
        //  make direct changes to their own contents in the database, i.e. to
        //  get to the NC access methods below. We also allow the standard repo
        //  engine base class to do this, mostly for caching image data, which
        //  we don't want to have to copy in and out of the database just to
        //  set it or modify it.
        // -------------------------------------------------------------------
        friend class TMediaCollect;
        friend class TMediaItem;
        friend class TMediaTitleSet;
        friend class TCQCStdMediaRepoEng;


        // -------------------------------------------------------------------
        //  Protected, inherited methods
        // -------------------------------------------------------------------
        tCIDLib::TVoid StreamFrom
        (
                    TBinInStream&           strmToReadFrom
        )   final;

        tCIDLib::TVoid StreamTo
        (
                    TBinOutStream&          strmToWriteTo
        )   const final;


        // -------------------------------------------------------------------
        //  Proteced, non-virtual methods
        // -------------------------------------------------------------------
        tCIDLib::TVoid FindContainersNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCQCMedia::EDataTypes   eDataType
            , const tCIDLib::TCard2         c2Id
            ,       tCQCMedia::TNCColIdList& colCollects
            ,       tCQCMedia::TNCSetIdList& colSets
        );

        TMediaCat& mcatAtNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard4         c4At
        );

        TMediaCollect& mcolAtNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard4         c4At
        );

        TMediaImg& mimgAtNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard4         c4At
        );

        TMediaItem& mitemAtNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard4         c4At
        );

        TMediaTitleSet& mtsAtNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard4         c4At
        );

        TMediaCat* pmcatByIdNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2IdToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        );

        TMediaCat* pmcatByUniqueIdNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        );

        TMediaCollect* pmcolByIdNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2IdToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        );

        TMediaCollect* pmcolByUniqueIdNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        );

        TMediaImg* pmimgByIdNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2IdToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        );

        TMediaImg* pmimgByUniqueIdNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        );

        TMediaItem* pmitemByIdNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2IdToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        );

        TMediaItem* pmitemByUniqueIdNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        );

        TMediaTitleSet* pmtsFindColParentNC
        (
            const   TMediaCollect&          mcolTar
            ,       tCIDLib::TCard2&        c2Index
            , const tCIDLib::TBoolean       bThrowIfNot
        );

        TMediaTitleSet* pmtsByIdNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const tCIDLib::TCard2         c2IdToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        );

        TMediaTitleSet* pmtsByUniqueIdNC
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strToFind
            , const tCIDLib::TBoolean       bThrowIfNot
        );


    private :
        // -------------------------------------------------------------------
        //  Private class types
        //
        //  We need a bunch of vectors and arrays that are indexable via the media
        //  types enum. For each media type we keep lists of things. So the vector
        //  ones are lists of lists.
        // -------------------------------------------------------------------
        using TTypeArtists    = TRefVector<tCQCMedia::TByArtistList , tCQCMedia::EMediaTypes>;
        using TTypeCats       = TRefVector<tCQCMedia::TNCCatList    , tCQCMedia::EMediaTypes>;
        using TTypeColsByUID  = TRefVector<tCQCMedia::TColNameList  , tCQCMedia::EMediaTypes>;
        using TTypeImgsById   = TRefVector<tCQCMedia::TNCImgIdList  , tCQCMedia::EMediaTypes>;
        using TTypeImgsByUID  = TRefVector<tCQCMedia::TImgNameList  , tCQCMedia::EMediaTypes>;
        using TTypeItemsByUID = TRefVector<tCQCMedia::TItemNameList , tCQCMedia::EMediaTypes>;
        using TTypeListsById  = TRefVector<tCQCMedia::TNCItemIdList , tCQCMedia::EMediaTypes>;
        using TTypeSetsById   = TRefVector<tCQCMedia::TNCSetIdList  , tCQCMedia::EMediaTypes>;
        using TTypeSetsByUID  = TRefVector<tCQCMedia::TSetNameList  , tCQCMedia::EMediaTypes>;
        using TTypeColsById   = TRefVector<tCQCMedia::TNCColIdList  , tCQCMedia::EMediaTypes>;
        using TTypeUnkCols    = TObjArray<TMediaCollect, tCQCMedia::EMediaTypes>;
        using TTypeUnkItems   = TObjArray<TMediaItem, tCQCMedia::EMediaTypes>;
        using TTypeStrArray   = TObjArray<TString, tCQCMedia::EMediaTypes>;


        // -------------------------------------------------------------------
        //  Private, non-virtual methods
        // -------------------------------------------------------------------
        tCIDLib::TCard2 c2CheckTakeId
        (
            const   TMediaDBBase&           mddbTest
            , const tCQCMedia::EDataTypes   eDType
            , const tCQCMedia::EMediaTypes  eMType
        )   const;

        tCIDLib::TCard2 c2NextId
        (
            const   tCQCMedia::EMediaTypes  eMType
            , const tCQCMedia::EDataTypes   eDType
        )   const;

        tCIDLib::TVoid CheckComplete();

        tCIDLib::TVoid CheckDataType
        (
            const   tCQCMedia::EDataTypes   eExpected
            , const tCQCMedia::EDataTypes   eCheck
        )   const;

        tCIDLib::TVoid CheckMediaType
        (
            const   tCQCMedia::EMediaTypes  eExpected
            , const tCQCMedia::EMediaTypes  eCheck
        )   const;

        tCIDLib::TVoid DoCommonInit();

        tCIDLib::TVoid DupDB
        (
            const   TMediaDB&               mdbSrc
        );

        const TArtistMap* pcolArtistToMap
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strArtist
        )   const;

        TArtistMap* pcolArtistToMap
        (
            const   tCQCMedia::EMediaTypes  eType
            , const TString&                strArtist
        );

        TMediaDBBase* pmddbCheckCanUpdate
        (
            const   TMediaDBBase&           mddbTest
            , const tCQCMedia::EDataTypes   eDType
        );

        tCIDLib::TVoid RemoveFromCols
        (
            const   TMediaItem&             mitemRem
        );

        tCIDLib::TVoid RemoveFromSets
        (
            const   TMediaCollect&          mcolRem
        );

        tCIDLib::TVoid ResetTransientViews();

        tCIDLib::TVoid SortList
        (
                    tCQCMedia::TSetIdList&  colList
            , const tCQCMedia::ESortOrders  eOrder
        );

        tCIDLib::TVoid StreamInMType
        (
            const   tCQCMedia::EMediaTypes  eMType
            ,       TBinInStream&           strmSrc
        );


        // -------------------------------------------------------------------
        //  Private data members
        //
        //  m_bComplete
        //      This is set when the driver calls the Complete() method, which
        //      tells us all the data is in place and we do any swizzling
        //      needed, then set this flag. This lets us enforce that some
        //      things cannot be done after it is set, and some things cannot
        //      be done before it's set.
        //
        //  m_colByArtist
        //      This isn't persistent info, it's just for runtime, and really only used by
        //      viewers. See the header comments.
        //
        //  m_colCats
        //      The category lists. Note that we use ref collections here, not
        //      because we need polymorphic storage, but to allow for quick
        //      and efficient sorting. Because of the relatively small number
        //      of items, we don't bother with a separate by name hash set
        //      view. We can just do a simple linear search for by name access.
        //
        //  m_colColsById
        //  m_colColsByUID
        //  m_colItemsById
        //  m_colItemsByUID
        //  m_colSetsById
        //  m_colSetsByUID
        //      For the three main levels of the hierarchy, we have to arrays
        //      of collections. For each one we have a by id sorted ref vector,
        //      which owns the items, and then we have a non-adopting hash set that
        //      is keyed on the unique id, so that we can quickly find them that
        //      way as well.
        //
        //      For each, we have one per media type we support, so that we can keep
        //      each type in separate lists. This greatly increases the speed at which
        //      we can get to the types of data we want, and also keeps us from being
        //      limited to 65K items altogether.
        //
        //  m_colImgsById
        //  m_colImgsByUID
        //      For images we have a by id, and buy UID, as with the others.
        //
        //  m_colUnknownCols
        //  m_colUnknownItems
        //      If, by some horrible circumstance, an item or collection is
        //      removed, but a collection or title set (respectively) that
        //      references it is not updated to remove that set, the collection
        //      or title set needs a place holder to put into it's list during
        //      it's lookup phase (after a reload of the DB.) So we set up
        //      a dummy collection and item with title text  that indicates
        //      the problem, and they will reference these in such cases.
        //
        //  m_objaAllCatCookies
        //      The 'all categories' cookie for each type, we just prebuild them
        //      into this arrray for quick access.
        // -------------------------------------------------------------------
        tCIDLib::TBoolean       m_bComplete;
        mutable TTypeArtists    m_colByArtist;
        TTypeCats               m_colCats;
        TTypeColsById           m_colColsById;
        TTypeColsByUID          m_colColsByUID;
        TTypeImgsById           m_colImgsById;
        TTypeImgsByUID          m_colImgsByUID;
        TTypeListsById          m_colItemsById;
        TTypeItemsByUID         m_colItemsByUID;
        TTypeSetsById           m_colSetsById;
        TTypeSetsByUID          m_colSetsByUID;
        TTypeUnkCols            m_objaUnknownCols;
        TTypeUnkItems           m_objaUnknownItems;
        TTypeStrArray           m_objaAllCatCookies;


        // -------------------------------------------------------------------
        //  Magic macros
        // -------------------------------------------------------------------
        RTTIDefs(TMediaDB,TObject)
};


#pragma CIDLIB_POPPACK


