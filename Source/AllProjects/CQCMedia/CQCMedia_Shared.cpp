// ----------------------------------------------------------------------------
//  FILE: CQCMedia_Shared.cpp
//  DATE: Fri, Feb 14 18:49:45 2020 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

#include "CQCMedia_.hpp"

const TString kCQCMedia::strRend_StdPLItemKeyPref(L"StdPLItemKey:");
const TString kCQCMedia::strQuery_CatList(L"QCatList");
const TString kCQCMedia::strQuery_ColItems(L"QColItems");
const TString kCQCMedia::strQuery_TitleDetails(L"QTitleDets");
const TString kCQCMedia::strQuery_OTFTitleList(L"QOTFList");
const TString kCQCMedia::strQuery_ColDetails(L"QColDets");
const TString kCQCMedia::strQuery_ItemDetails(L"QItemDets");
const TString kCQCMedia::strQuery_DefCatInfo(L"QDefCatInfo");
const TString kCQCMedia::strQuery_MediaFmt(L"QMediaFmt");
const TString kCQCMedia::strQuery_DBSerialNumber(L"QDBSerialNumber");
const TString kCQCMedia::strQuery_Artist(L"Fld_Artist");
const TString kCQCMedia::strQuery_AspectRatio(L"Fld_Aspect");
const TString kCQCMedia::strQuery_Cast(L"Fld_Cast");
const TString kCQCMedia::strQuery_Description(L"Fld_Descr");
const TString kCQCMedia::strQuery_Label(L"Fld_Label");
const TString kCQCMedia::strQuery_LeadActor(L"Fld_LeadActor");
const TString kCQCMedia::strQuery_Rating(L"Fld_Rating");
const TString kCQCMedia::strQuery_RawRunTime(L"Fld_RawRunTime");
const TString kCQCMedia::strQuery_RunTime(L"Fld_RunTime");
const TString kCQCMedia::strQuery_Title(L"Fld_Title");
const TString kCQCMedia::strQuery_Year(L"Fld_Year");
const TString kCQCMedia::strQuery_CookieLookup(L"CookieLookup");
const TString kCQCMedia::strQuery_RandomGenreItems(L"RandomGenreItems");
const TString kCQCMedia::strQuery_BitDepth(L"Fld_BitDepth");
const TString kCQCMedia::strQuery_BitRate(L"Fld_BitRate");
const TString kCQCMedia::strQuery_Channels(L"Fld_Channels");
const TString kCQCMedia::strQuery_DateAdded(L"Fld_DateAdded");
const TString kCQCMedia::strQuery_SampleRate(L"Fld_SampleRate");
const TString kCQCMedia::strQuery_SeqNum(L"Fld_SeqNum");
const TString kCQCMedia::strQuery_UserRating(L"Fld_UserRating");
const TString kCQCMedia::strQuery_QueryAudioFmt(L"QueryAudFmt");
const TString kCQCMedia::strQuery_Name(L"Fld_Name");
const TString kCQCMedia::strQuery_CurPLItem(L"QCurPLItem");
const TString kCQCMedia::strQuery_PLItems(L"QPLItems");
const TString kCQCMedia::strQuery_BinMediaDump(L"QBinMediaDump");
const TString kCQCMedia::strQuery_XMLMediaDump(L"QXMLMediaDump");
const TString kCQCMedia::strQuery_QueryCurPLItemId(L"QCurPLItemId");
const TString kCQCMedia::strQuery_ProtoVer(L"QueryProtoVer");
const TString kCQCMedia::strQuery_MediaTypes(L"QMediaTypes");
const TString kCQCMedia::strQuery_ColLoc(L"QColLoc");
const TString kCQCMedia::strQuery_QueryArt(L"QArt");
const TString kCQCMedia::strQuery_QueryTitleArt(L"QTitleArt");
const TString kCQCMedia::strQuery_QueryItemArt(L"QItemArt");
const TString kCQCMedia::strQuery_QueryThumbArt(L"QThumbArt");
const TString kCQCMedia::strQuery_QueryTitleThumbArt(L"QTitleThumbArt");
const TString kCQCMedia::strQuery_QueryItemThumbArt(L"QTitleItemArt");
const TString kCQCMedia::strQuery_QueryPosterArt(L"QPosterArt");
const TString kCQCMedia::strQuery_QueryImgById(L"QImgById");
const TString kCQCMedia::strCmd_SetUserRating(L"SetUserRating");
const TString kCQCMedia::strEvId_OnSelectCol(L"StdEvent:OnSelectCol");
const TString kCQCMedia::strEvId_OnSelectItem(L"StdEvent:OnSelectItem");
const TString kCQCMedia::strCmdId_SetCategory(L"MediaCmd:SetCategory");
const TString kCQCMedia::strCmdId_SetTitle(L"MediaCmd:SetTitle");
const TString kCQCMedia::strCmdId_SetTitleCookie(L"MediaCmd:SetTitleCookie");
const TString kCQCMedia::strCmdId_SetMediaType(L"MediaCmd:SetMediaType");
const TString kCQCMedia::strCmdId_SetSortOrder(L"MediaCmd:SetSortOrder");
const TString kCQCMedia::strCmdId_SetColCookie(L"MediaCmd:SetColCookie");
const TString kCQCMedia::strCmdId_GetColLocInfo(L"MediaCmd:GetColLocInfo");
const TString kCQCMedia::strCmdId_GetItemLocInfo(L"MediaCmd:GetColItemInfo");
const TString kCQCMedia::strCmdId_GetSortOrder(L"MediaCmd:GetSortOrder");
const TString kCQCMedia::strCmdId_SearchByArtist(L"MediaCmd:SearchByArtist");
const TString kCQCMedia::strCmdId_SetRepository(L"MediaCmd:SetRepository");
const TString kCQCMedia::strCmdId_GetCatCookie(L"MediaCmd:GetCatCookie");
const TString kCQCMedia::strCmdId_SetTextType(L"MediaCmd:SetTextType");
const TString kCQCMedia::strCmdId_SearchByTitle(L"MediaCmd:SearchByTitle");
const TString kCQCMedia::strCmdId_SearchByActor(L"MediaCmd:SearchByActor");
const TString kCQCMedia::strCmdId_GetMediaType(L"MediaCmd:GetMediaType");
const TString kCQCMedia::strCmdId_GetAudioFmt(L"MediaCmd:GetAudioFmt");
const TString kCQCMedia::strCmdId_SearchByAudioFmt(L"MediaCmd:SearchByAudioFmt");
const TString kCQCMedia::strCmdId_RandomTitleSearch(L"MediaCmd:RandomTitleSearch");
const TString kCQCMedia::strRTVId_CategoryCookie(L"MediaRTV:CategoryCookie");
const TString kCQCMedia::strRTVId_Artist(L"MediaRTV:Artist");
const TString kCQCMedia::strRTVId_CategoryName(L"MediaRTV:CategoryName");
const TString kCQCMedia::strRTVId_ColArtist(L"MediaRTV:ColArtist");
const TString kCQCMedia::strRTVId_ColCookie(L"MediaRTV:ColCookie");
const TString kCQCMedia::strRTVId_ColCount(L"MediaRTV:ColCount");
const TString kCQCMedia::strRTVId_ItemArtist(L"MediaRTV:ItemArtist");
const TString kCQCMedia::strRTVId_ItemArtistList(L"MediaRTV:ItemArtistList");
const TString kCQCMedia::strRTVId_ItemCookie(L"MediaRTV:ItemCookie");
const TString kCQCMedia::strRTVId_ItemCookieList(L"MediaRTV:ItemCookieList");
const TString kCQCMedia::strRTVId_ItemName(L"MediaRTV:ItemName");
const TString kCQCMedia::strRTVId_ItemNameList(L"MediaRTV:ItemNameList");
const TString kCQCMedia::strRTVId_LocInfo(L"MediaRTV:LocInfo");
const TString kCQCMedia::strRTVId_LocType(L"MediaRTV:LocType");
const TString kCQCMedia::strRTVId_MediaType(L"MediaRTV:MediaType");
const TString kCQCMedia::strRTVId_TitleArtist(L"MediaRTV:TitleArtist");
const TString kCQCMedia::strRTVId_TitleCookie(L"MediaRTV:TitleCookie");
const TString kCQCMedia::strRTVId_TitleCount(L"MediaRTV:TitleCount");
const TString kCQCMedia::strRTVId_TitleName(L"MediaRTV:TitleName");
const TString kCQCMedia::strRTVId_TitleNumber(L"MediaRTV:TitleNumber");
const TString kCQCMedia::strRTVId_MediaRepoMoniker(L"MediaRTV:MediaRepoMoniker");
const TString kCQCMedia::strRTVId_MediaFmt(L"MediaRTV:MediaFmt");
const TString kCQCMedia::strRTVId_Name(L"MediaRTV:Name");
const TString kCQCMedia::strRTVId_TopLevel(L"MediaRTV:TopLevel");
const TString kCQCMedia::strRTVId_ListItemId(L"MediaRTV:ListItemId");
const TString kCQCMedia::strMediaFld_DBSerialNum(L"MediaDBSerialNum");


static TEnumMap::TEnumValItem aeitemValues_ECookieTypes[4] = 
{
    {  tCIDLib::TInt4(tCQCMedia::ECookieTypes::Cat), 0, 0,  { L"", L"", L"", L"Cat", L"ECookieTypes::Cat", L"Category" } }
  , {  tCIDLib::TInt4(tCQCMedia::ECookieTypes::Title), 0, 0,  { L"", L"", L"", L"Title", L"ECookieTypes::Title", L"Title" } }
  , {  tCIDLib::TInt4(tCQCMedia::ECookieTypes::Collect), 0, 0,  { L"", L"", L"", L"Collect", L"ECookieTypes::Collect", L"Collect" } }
  , {  tCIDLib::TInt4(tCQCMedia::ECookieTypes::Item), 0, 0,  { L"", L"", L"", L"Item", L"ECookieTypes::Item", L"Item" } }

};

static TEnumMap emapECookieTypes
(
     L"ECookieTypes"
     , 4
     , kCIDLib::False
     , aeitemValues_ECookieTypes
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::ECookieTypes::Count)
);

const TString& tCQCMedia::strXlatECookieTypes(const tCQCMedia::ECookieTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapECookieTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMedia::ECookieTypes tCQCMedia::eXlatECookieTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::ECookieTypes(emapECookieTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::ECookieTypes eVal)
{
    return emapECookieTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ECompTypes[5] = 
{
    {  tCIDLib::TInt4(tCQCMedia::ECompTypes::Eq), 0, 0,  { L"", L"", L"", L"Eq", L"ECompTypes::Eq", L"=" } }
  , {  tCIDLib::TInt4(tCQCMedia::ECompTypes::Lt), 0, 0,  { L"", L"", L"", L"Lt", L"ECompTypes::Lt", L"<" } }
  , {  tCIDLib::TInt4(tCQCMedia::ECompTypes::LtEq), 0, 0,  { L"", L"", L"", L"LtEq", L"ECompTypes::LtEq", L"<=" } }
  , {  tCIDLib::TInt4(tCQCMedia::ECompTypes::Gt), 0, 0,  { L"", L"", L"", L"Gt", L"ECompTypes::Gt", L">" } }
  , {  tCIDLib::TInt4(tCQCMedia::ECompTypes::GtEq), 0, 0,  { L"", L"", L"", L"GtEq", L"ECompTypes::GtEq", L">=" } }

};

static TEnumMap emapECompTypes
(
     L"ECompTypes"
     , 5
     , kCIDLib::False
     , aeitemValues_ECompTypes
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::ECompTypes::Count)
);

const TString& tCQCMedia::strXlatECompTypes(const tCQCMedia::ECompTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapECompTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMedia::ECompTypes tCQCMedia::eXlatECompTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::ECompTypes(emapECompTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

tCQCMedia::ECompTypes operator++(tCQCMedia::ECompTypes& eVal, int)
{
    tCQCMedia::ECompTypes eTmp = eVal;
    eVal = tCQCMedia::ECompTypes(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::ECompTypes eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::ECompTypes& eVal)
{
    eVal = tCQCMedia::ECompTypes(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::ECompTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::ECompTypes(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::ECompTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::ECompTypes eVal)
{
    return emapECompTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EDataTypes[5] = 
{
    {  tCIDLib::TInt4(tCQCMedia::EDataTypes::Cat), 0, 0,  { L"", L"", L"", L"Cat", L"EDataTypes::Cat", L"category" } }
  , {  tCIDLib::TInt4(tCQCMedia::EDataTypes::Collect), 0, 0,  { L"", L"", L"", L"Collect", L"EDataTypes::Collect", L"collect" } }
  , {  tCIDLib::TInt4(tCQCMedia::EDataTypes::Image), 0, 0,  { L"", L"", L"", L"Image", L"EDataTypes::Image", L"image" } }
  , {  tCIDLib::TInt4(tCQCMedia::EDataTypes::Item), 0, 0,  { L"", L"", L"", L"Item", L"EDataTypes::Item", L"item" } }
  , {  tCIDLib::TInt4(tCQCMedia::EDataTypes::TitleSet), 0, 0,  { L"", L"", L"", L"TitleSet", L"EDataTypes::TitleSet", L"titleset" } }

};

static TEnumMap emapEDataTypes
(
     L"EDataTypes"
     , 5
     , kCIDLib::False
     , aeitemValues_EDataTypes
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::EDataTypes::Count)
);

const TString& tCQCMedia::strXlatEDataTypes(const tCQCMedia::EDataTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEDataTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMedia::EDataTypes tCQCMedia::eXlatEDataTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::EDataTypes(emapEDataTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::EDataTypes eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::EDataTypes& eVal)
{
    eVal = tCQCMedia::EDataTypes(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::EDataTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::EDataTypes(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::EDataTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::EDataTypes eVal)
{
    return emapEDataTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ELoadStatus[4] = 
{
    {  tCIDLib::TInt4(tCQCMedia::ELoadStatus::Init), 0, 0,  { L"", L"", L"", L"Init", L"ELoadStatus::Init", L"Initializing" } }
  , {  tCIDLib::TInt4(tCQCMedia::ELoadStatus::Loading), 0, 0,  { L"", L"", L"", L"Loading", L"ELoadStatus::Loading", L"Loading" } }
  , {  tCIDLib::TInt4(tCQCMedia::ELoadStatus::Ready), 0, 0,  { L"", L"", L"", L"Ready", L"ELoadStatus::Ready", L"Ready" } }
  , {  tCIDLib::TInt4(tCQCMedia::ELoadStatus::Failed), 0, 0,  { L"", L"", L"", L"Failed", L"ELoadStatus::Failed", L"Failed" } }

};

static TEnumMap emapELoadStatus
(
     L"ELoadStatus"
     , 4
     , kCIDLib::False
     , aeitemValues_ELoadStatus
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::ELoadStatus::Count)
);

const TString& tCQCMedia::strXlatELoadStatus(const tCQCMedia::ELoadStatus eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapELoadStatus.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMedia::ELoadStatus tCQCMedia::eXlatELoadStatus(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::ELoadStatus(emapELoadStatus.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::ELoadStatus eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::ELoadStatus& eVal)
{
    eVal = tCQCMedia::ELoadStatus(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::ELoadStatus* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::ELoadStatus(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::ELoadStatus* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::ELoadStatus eVal)
{
    return emapELoadStatus.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ELocTypes[3] = 
{
    {  tCIDLib::TInt4(tCQCMedia::ELocTypes::FileCol), 0, kMedMsgs::midLoc_FileCol,  { L"", L"", L"", L"FileCol", L"ELocTypes::FileCol", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::ELocTypes::FileItem), 0, kMedMsgs::midLoc_FileItem,  { L"", L"", L"", L"FileItem", L"ELocTypes::FileItem", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::ELocTypes::Changer), 0, kMedMsgs::midLoc_Changer,  { L"", L"", L"", L"Changer", L"ELocTypes::Changer", L"" } }

};

static TEnumMap emapELocTypes
(
     L"ELocTypes"
     , 3
     , kCIDLib::False
     , aeitemValues_ELocTypes
     , &facCQCMedia()
     , tCIDLib::TCard4(tCQCMedia::ELocTypes::Count)
);

const TString& tCQCMedia::strAltXlatELocTypes(const tCQCMedia::ELocTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapELocTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCQCMedia::ELocTypes tCQCMedia::eAltXlatELocTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::ELocTypes(emapELocTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

const TString& tCQCMedia::strXlatELocTypes(const tCQCMedia::ELocTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapELocTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMedia::ELocTypes tCQCMedia::eXlatELocTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::ELocTypes(emapELocTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::ELocTypes eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::ELocTypes& eVal)
{
    eVal = tCQCMedia::ELocTypes(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::ELocTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::ELocTypes(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::ELocTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::ELocTypes eVal)
{
    return emapELocTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EEndStates[3] = 
{
    {  tCIDLib::TInt4(tCQCMedia::EEndStates::Running), 0, 0,  { L"", L"", L"", L"Running", L"EEndStates::Running", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EEndStates::Ended), 0, 0,  { L"", L"", L"", L"Ended", L"EEndStates::Ended", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EEndStates::Failed), 0, 0,  { L"", L"", L"", L"Failed", L"EEndStates::Failed", L"" } }

};

static TEnumMap emapEEndStates
(
     L"EEndStates"
     , 3
     , kCIDLib::False
     , aeitemValues_EEndStates
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::EEndStates::Count)
);

const TString& tCQCMedia::strXlatEEndStates(const tCQCMedia::EEndStates eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEEndStates.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCQCMedia::EEndStates tCQCMedia::eXlatEEndStates(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::EEndStates(emapEEndStates.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::EEndStates eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::EEndStates& eVal)
{
    eVal = tCQCMedia::EEndStates(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::EEndStates* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::EEndStates(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::EEndStates* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::EEndStates eVal)
{
    return emapEEndStates.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EMediaStates[6] = 
{
    {  tCIDLib::TInt4(tCQCMedia::EMediaStates::Undefined), 0, 0,  { L"", L"", L"", L"Undefined", L"EMediaStates::Undefined", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMediaStates::Buffering), 0, 0,  { L"", L"", L"", L"Buffering", L"EMediaStates::Buffering", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMediaStates::Loading), 0, 0,  { L"", L"", L"", L"Loading", L"EMediaStates::Loading", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMediaStates::Playing), 0, 0,  { L"", L"", L"", L"Playing", L"EMediaStates::Playing", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMediaStates::Paused), 0, 0,  { L"", L"", L"", L"Paused", L"EMediaStates::Paused", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMediaStates::Stopped), 0, 0,  { L"", L"", L"", L"Stopped", L"EMediaStates::Stopped", L"" } }

};

static TEnumMap emapEMediaStates
(
     L"EMediaStates"
     , 6
     , kCIDLib::False
     , aeitemValues_EMediaStates
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::EMediaStates::Count)
);

const TString& tCQCMedia::strXlatEMediaStates(const tCQCMedia::EMediaStates eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEMediaStates.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCQCMedia::EMediaStates tCQCMedia::eXlatEMediaStates(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::EMediaStates(emapEMediaStates.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCQCMedia::EMediaStates operator++(tCQCMedia::EMediaStates& eVal, int)
{
    tCQCMedia::EMediaStates eTmp = eVal;
    eVal = tCQCMedia::EMediaStates(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::EMediaStates eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::EMediaStates& eVal)
{
    eVal = tCQCMedia::EMediaStates(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::EMediaStates* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::EMediaStates(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::EMediaStates* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::EMediaStates eVal)
{
    return emapEMediaStates.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EMImgAttrs[7] = 
{
    {  tCIDLib::TInt4(tCQCMedia::EMImgAttrs::CoverArtLrg), 0, kMedMsgs::midMImg_CoverArtLrg,  { L"", L"", L"", L"CoverArtLrg", L"EMImgAttrs::CoverArtLrg", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMImgAttrs::CoverArtSml), 0, kMedMsgs::midMImg_CoverArtSml,  { L"", L"", L"", L"CoverArtSml", L"EMImgAttrs::CoverArtSml", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMImgAttrs::RatingLg), 0, kMedMsgs::midMImg_RatingLg,  { L"", L"", L"", L"RatingLg", L"EMImgAttrs::RatingLg", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMImgAttrs::RatingSm), 0, kMedMsgs::midMImg_RatingSm,  { L"", L"", L"", L"RatingSm", L"EMImgAttrs::RatingSm", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMImgAttrs::RatingLgWh), 0, kMedMsgs::midMImg_RatingLgWh,  { L"", L"", L"", L"RatingLgWh", L"EMImgAttrs::RatingLgWh", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMImgAttrs::RatingSmWh), 0, kMedMsgs::midMImg_RatingSmWh,  { L"", L"", L"", L"RatingSmWh", L"EMImgAttrs::RatingSmWh", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMImgAttrs::PosterArt), 0, kMedMsgs::midMImg_PosterArt,  { L"", L"", L"", L"PosterArt", L"EMImgAttrs::PosterArt", L"" } }

};

static TEnumMap emapEMImgAttrs
(
     L"EMImgAttrs"
     , 7
     , kCIDLib::False
     , aeitemValues_EMImgAttrs
     , &facCQCMedia()
     , tCIDLib::TCard4(tCQCMedia::EMImgAttrs::Count)
);

tCIDLib::TVoid tCQCMedia::FormatEMImgAttrs(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEMImgAttrs.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCQCMedia::strXlatEMImgAttrs(const tCQCMedia::EMImgAttrs eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEMImgAttrs.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMedia::EMImgAttrs tCQCMedia::eXlatEMImgAttrs(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::EMImgAttrs(emapEMImgAttrs.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

tCQCMedia::EMImgAttrs operator++(tCQCMedia::EMImgAttrs& eVal, int)
{
    tCQCMedia::EMImgAttrs eTmp = eVal;
    eVal = tCQCMedia::EMImgAttrs(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::EMImgAttrs eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::EMImgAttrs& eVal)
{
    eVal = tCQCMedia::EMImgAttrs(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::EMImgAttrs* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::EMImgAttrs(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::EMImgAttrs* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::EMImgAttrs eVal)
{
    return emapEMImgAttrs.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EMTextAttrs[20] = 
{
    {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::AspectRatio), 0, kMedMsgs::midMText_AspectRatio,  { L"", L"", L"", L"AspectRatio", L"EMTextAttrs::AspectRatio", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::Cast), 0, kMedMsgs::midMText_Cast,  { L"", L"", L"", L"Cast", L"EMTextAttrs::Cast", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::Description), 0, kMedMsgs::midMText_Descr,  { L"", L"", L"", L"Description", L"EMTextAttrs::Description", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::Label), 0, kMedMsgs::midMText_Label,  { L"", L"", L"", L"Label", L"EMTextAttrs::Label", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::Rating), 0, kMedMsgs::midMText_Rating,  { L"", L"", L"", L"Rating", L"EMTextAttrs::Rating", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::RunTime), 0, kMedMsgs::midMText_Runtime,  { L"", L"", L"", L"RunTime", L"EMTextAttrs::RunTime", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::Title), 0, kMedMsgs::midMText_Title,  { L"", L"", L"", L"Title", L"EMTextAttrs::Title", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::Year), 0, kMedMsgs::midMText_Year,  { L"", L"", L"", L"Year", L"EMTextAttrs::Year", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::Artist), 0, kMedMsgs::midMText_Artist,  { L"", L"", L"", L"Artist", L"EMTextAttrs::Artist", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::LeadActor), 0, kMedMsgs::midMText_LeadActor,  { L"", L"", L"", L"LeadActor", L"EMTextAttrs::LeadActor", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::MediaFmt), 0, kMedMsgs::midMText_MediaFmt,  { L"", L"", L"", L"MediaFmt", L"EMTextAttrs::MediaFmt", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::RawRunTime), 0, kMedMsgs::midMText_RawRuntime,  { L"", L"", L"", L"RawRunTime", L"EMTextAttrs::RawRunTime", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::BitDepth), 0, kMedMsgs::midMText_BitDepth,  { L"", L"", L"", L"BitDepth", L"EMTextAttrs::BitDepth", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::BitRate), 0, kMedMsgs::midMText_BitRate,  { L"", L"", L"", L"BitRate", L"EMTextAttrs::BitRate", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::Channels), 0, kMedMsgs::midMText_Channels,  { L"", L"", L"", L"Channels", L"EMTextAttrs::Channels", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::DateAdded), 0, kMedMsgs::midMText_DateAdded,  { L"", L"", L"", L"DateAdded", L"EMTextAttrs::DateAdded", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::SampleRate), 0, kMedMsgs::midMText_SampleRate,  { L"", L"", L"", L"SampleRate", L"EMTextAttrs::SampleRate", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::SeqNum), 0, kMedMsgs::midMText_SeqNum,  { L"", L"", L"", L"SeqNum", L"EMTextAttrs::SeqNum", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::UserRating), 0, kMedMsgs::midMText_UserRating,  { L"", L"", L"", L"UserRating", L"EMTextAttrs::UserRating", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTextAttrs::Name), 0, kMedMsgs::midMText_Name,  { L"", L"", L"", L"Name", L"EMTextAttrs::Name", L"" } }

};

static TEnumMap emapEMTextAttrs
(
     L"EMTextAttrs"
     , 20
     , kCIDLib::False
     , aeitemValues_EMTextAttrs
     , &facCQCMedia()
     , tCIDLib::TCard4(tCQCMedia::EMTextAttrs::Count)
);

tCIDLib::TVoid tCQCMedia::FormatEMTextAttrs(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEMTextAttrs.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCQCMedia::strXlatEMTextAttrs(const tCQCMedia::EMTextAttrs eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEMTextAttrs.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMedia::EMTextAttrs tCQCMedia::eXlatEMTextAttrs(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::EMTextAttrs(emapEMTextAttrs.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

tCQCMedia::EMTextAttrs operator++(tCQCMedia::EMTextAttrs& eVal, int)
{
    tCQCMedia::EMTextAttrs eTmp = eVal;
    eVal = tCQCMedia::EMTextAttrs(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::EMTextAttrs eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::EMTextAttrs& eVal)
{
    eVal = tCQCMedia::EMTextAttrs(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::EMTextAttrs* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::EMTextAttrs(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::EMTextAttrs* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::EMTextAttrs eVal)
{
    return emapEMTextAttrs.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EMediaTypes[3] = 
{
    {  tCIDLib::TInt4(tCQCMedia::EMediaTypes::Movie), 0, 0,  { L"", L"", L"", L"Movie", L"EMediaTypes::Movie", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMediaTypes::Music), 0, 0,  { L"", L"", L"", L"Music", L"EMediaTypes::Music", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMediaTypes::Pic), 0, 0,  { L"", L"", L"", L"Pic", L"EMediaTypes::Pic", L"" } }

};

static TEnumMap emapEMediaTypes
(
     L"EMediaTypes"
     , 3
     , kCIDLib::False
     , aeitemValues_EMediaTypes
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::EMediaTypes::Count)
);

tCIDLib::TVoid tCQCMedia::FormatEMediaTypes(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEMediaTypes.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCQCMedia::strXlatEMediaTypes(const tCQCMedia::EMediaTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEMediaTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCQCMedia::EMediaTypes tCQCMedia::eXlatEMediaTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::EMediaTypes(emapEMediaTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCQCMedia::EMediaTypes operator++(tCQCMedia::EMediaTypes& eVal, int)
{
    tCQCMedia::EMediaTypes eTmp = eVal;
    eVal = tCQCMedia::EMediaTypes(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::EMediaTypes eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::EMediaTypes& eVal)
{
    eVal = tCQCMedia::EMediaTypes(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::EMediaTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::EMediaTypes(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::EMediaTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::EMediaTypes eVal)
{
    return emapEMediaTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EMTFlags[4] = 
{
    {  tCIDLib::TInt4(tCQCMedia::EMTFlags::Movie), 0, 0,  { L"", L"", L"", L"Movie", L"EMTFlags::Movie", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTFlags::Music), 0, 0,  { L"", L"", L"", L"Music", L"EMTFlags::Music", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTFlags::Pic), 0, 0,  { L"", L"", L"", L"Pic", L"EMTFlags::Pic", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EMTFlags::MultiMedia), 0, 0,  { L"", L"", L"", L"MultiMedia", L"EMTFlags::MultiMedia", L"" } }

};

static TEnumMap emapEMTFlags
(
     L"EMTFlags"
     , 4
     , kCIDLib::True
     , aeitemValues_EMTFlags
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::EMTFlags::None)
);

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::EMTFlags eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::EMTFlags& eVal)
{
    eVal = tCQCMedia::EMTFlags(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::EMTFlags* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::EMTFlags(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::EMTFlags* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::EMTFlags eVal)
{
    return emapEMTFlags.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EPLModes[4] = 
{
    {  tCIDLib::TInt4(tCQCMedia::EPLModes::Normal), 0, 0,  { L"", L"", L"", L"Normal", L"EPLModes::Normal", L"Normal" } }
  , {  tCIDLib::TInt4(tCQCMedia::EPLModes::Jukebox), 0, 0,  { L"", L"", L"", L"Jukebox", L"EPLModes::Jukebox", L"Jukebox" } }
  , {  tCIDLib::TInt4(tCQCMedia::EPLModes::Shuffle), 0, 0,  { L"", L"", L"", L"Shuffle", L"EPLModes::Shuffle", L"Shuffle" } }
  , {  tCIDLib::TInt4(tCQCMedia::EPLModes::RandomCat), 0, 0,  { L"", L"", L"", L"RandomCat", L"EPLModes::RandomCat", L"Random Category" } }

};

static TEnumMap emapEPLModes
(
     L"EPLModes"
     , 4
     , kCIDLib::False
     , aeitemValues_EPLModes
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::EPLModes::Count)
);

const TString& tCQCMedia::strXlatEPLModes(const tCQCMedia::EPLModes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEPLModes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMedia::EPLModes tCQCMedia::eXlatEPLModes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::EPLModes(emapEPLModes.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

tCQCMedia::EPLModes operator++(tCQCMedia::EPLModes& eVal, int)
{
    tCQCMedia::EPLModes eTmp = eVal;
    eVal = tCQCMedia::EPLModes(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::EPLModes eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::EPLModes& eVal)
{
    eVal = tCQCMedia::EPLModes(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::EPLModes* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::EPLModes(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::EPLModes* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::EPLModes eVal)
{
    return emapEPLModes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EPLMgrActs[5] = 
{
    {  tCIDLib::TInt4(tCQCMedia::EPLMgrActs::Rejected), 0, 0,  { L"", L"", L"", L"Rejected", L"EPLMgrActs::Rejected", L"Rejected" } }
  , {  tCIDLib::TInt4(tCQCMedia::EPLMgrActs::NoAction), 0, 0,  { L"", L"", L"", L"NoAction", L"EPLMgrActs::NoAction", L"NoAction" } }
  , {  tCIDLib::TInt4(tCQCMedia::EPLMgrActs::NewItem), 0, 0,  { L"", L"", L"", L"NewItem", L"EPLMgrActs::NewItem", L"NewItem" } }
  , {  tCIDLib::TInt4(tCQCMedia::EPLMgrActs::NewSelection), 0, 0,  { L"", L"", L"", L"NewSelection", L"EPLMgrActs::NewSelection", L"NewItem" } }
  , {  tCIDLib::TInt4(tCQCMedia::EPLMgrActs::Stop), 0, 0,  { L"", L"", L"", L"Stop", L"EPLMgrActs::Stop", L"Stop" } }

};

static TEnumMap emapEPLMgrActs
(
     L"EPLMgrActs"
     , 5
     , kCIDLib::False
     , aeitemValues_EPLMgrActs
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::EPLMgrActs::Count)
);

const TString& tCQCMedia::strXlatEPLMgrActs(const tCQCMedia::EPLMgrActs eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEPLMgrActs.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMedia::EPLMgrActs tCQCMedia::eXlatEPLMgrActs(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::EPLMgrActs(emapEPLMgrActs.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::EPLMgrActs eVal)
{
    return emapEPLMgrActs.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EPLMgrSelRes[3] = 
{
    {  tCIDLib::TInt4(tCQCMedia::EPLMgrSelRes::Empty), 0, 0,  { L"", L"", L"", L"Empty", L"EPLMgrSelRes::Empty", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EPLMgrSelRes::NewItem), 0, 0,  { L"", L"", L"", L"NewItem", L"EPLMgrSelRes::NewItem", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::EPLMgrSelRes::NewAndChanged), 0, 0,  { L"", L"", L"", L"NewAndChanged", L"EPLMgrSelRes::NewAndChanged", L"" } }

};

static TEnumMap emapEPLMgrSelRes
(
     L"EPLMgrSelRes"
     , 3
     , kCIDLib::False
     , aeitemValues_EPLMgrSelRes
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::EPLMgrSelRes::Count)
);

tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::EPLMgrSelRes eVal)
{
    return emapEPLMgrSelRes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ERArtTypes[3] = 
{
    {  tCIDLib::TInt4(tCQCMedia::ERArtTypes::SmlCover), 0, 0,  { L"", L"", L"", L"SmlCover", L"ERArtTypes::SmlCover", L"Thumbnail" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERArtTypes::LrgCover), 0, 0,  { L"", L"", L"", L"LrgCover", L"ERArtTypes::LrgCover", L"Large" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERArtTypes::Poster), 0, 0,  { L"", L"", L"", L"Poster", L"ERArtTypes::Poster", L"Poster" } }

};

static TEnumMap emapERArtTypes
(
     L"ERArtTypes"
     , 3
     , kCIDLib::False
     , aeitemValues_ERArtTypes
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::ERArtTypes::Count)
);

const TString& tCQCMedia::strXlatERArtTypes(const tCQCMedia::ERArtTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapERArtTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMedia::ERArtTypes tCQCMedia::eXlatERArtTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::ERArtTypes(emapERArtTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::ERArtTypes eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::ERArtTypes& eVal)
{
    eVal = tCQCMedia::ERArtTypes(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::ERArtTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::ERArtTypes(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::ERArtTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::ERArtTypes eVal)
{
    return emapERArtTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ERendFlds[39] = 
{
    {  tCIDLib::TInt4(tCQCMedia::ERendFlds::ActiveRepo), 0, 0,  { L"", L"MREND#ActiveRepository", L"", L"ActiveRepo", L"ERendFlds::ActiveRepo", L"ActiveRepository" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::ClearPL), 0, 0,  { L"", L"MREND#ClearPlaylist", L"", L"ClearPL", L"ERendFlds::ClearPL", L"ClearPlaylist" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurAspect), 0, 0,  { L"", L"MREND#CurAspectRatio", L"", L"CurAspect", L"ERendFlds::CurAspect", L"CurAspectRatio" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurCast), 0, 0,  { L"", L"MREND#CurCast", L"", L"CurCast", L"ERendFlds::CurCast", L"CurCast" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurColArtist), 0, 0,  { L"", L"MREND#CurColArtist", L"", L"CurColArtist", L"ERendFlds::CurColArtist", L"CurColArtist" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurColCookie), 0, 0,  { L"", L"MREND#CurColCookie", L"", L"CurColCookie", L"ERendFlds::CurColCookie", L"CurColCookie" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurColName), 0, 0,  { L"", L"MREND#CurColName", L"", L"CurColName", L"ERendFlds::CurColName", L"CurColName" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurDescr), 0, 0,  { L"", L"MREND#CurDescr", L"", L"CurDescr", L"ERendFlds::CurDescr", L"CurDescr" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurItName), 0, 0,  { L"", L"MREND#CurItemName", L"", L"CurItName", L"ERendFlds::CurItName", L"CurItemName" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurItArtist), 0, 0,  { L"", L"MREND#CurItemArtist", L"", L"CurItArtist", L"ERendFlds::CurItArtist", L"CurItemArtist" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurItCookie), 0, 0,  { L"", L"MREND#CurItemCookie", L"", L"CurItCookie", L"ERendFlds::CurItCookie", L"CurItemCookie" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurItTime), 0, 0,  { L"", L"MREND#CurItemTime", L"", L"CurItTime", L"ERendFlds::CurItTime", L"CurItemTime" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurItTotal), 0, 0,  { L"", L"MREND#CurItemTotal", L"", L"CurItTotal", L"ERendFlds::CurItTotal", L"CurItemTotal" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurLabel), 0, 0,  { L"", L"MREND#CurLabel", L"", L"CurLabel", L"ERendFlds::CurLabel", L"CurLabel" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurLeadActor), 0, 0,  { L"", L"MREND#CurLeadActor", L"", L"CurLeadActor", L"ERendFlds::CurLeadActor", L"CurLeadActor" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurRating), 0, 0,  { L"", L"MREND#CurRating", L"", L"CurRating", L"ERendFlds::CurRating", L"CurRating" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurTiName), 0, 0,  { L"", L"MREND#CurTitleName", L"", L"CurTiName", L"ERendFlds::CurTiName", L"CurTitleName" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurTiCookie), 0, 0,  { L"", L"MREND#CurTitleCookie", L"", L"CurTiCookie", L"ERendFlds::CurTiCookie", L"CurTitleCookie" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::CurYear), 0, 0,  { L"", L"MREND#CurYear", L"", L"CurYear", L"ERendFlds::CurYear", L"CurYear" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::DelPLItem), 0, 0,  { L"", L"MREND#DelPlaylistItem", L"", L"DelPLItem", L"ERendFlds::DelPLItem", L"DelPlaylistItem" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::EnqMedia), 0, 0,  { L"", L"MREND#EnqueueMedia", L"", L"EnqMedia", L"ERendFlds::EnqMedia", L"EnqueueMedia" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::PBPercent), 0, 0,  { L"", L"MREND#PBPercent", L"", L"PBPercent", L"ERendFlds::PBPercent", L"PBPercent" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::PlayMedia), 0, 0,  { L"", L"MREND#PlayMedia", L"", L"PlayMedia", L"ERendFlds::PlayMedia", L"PlayMedia" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::PLItemCnt), 0, 0,  { L"", L"MREND#PLItemCnt", L"", L"PLItemCnt", L"ERendFlds::PLItemCnt", L"PLItemCnt" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::PLItemKey), 0, 0,  { L"", L"MREND#PLItemKey", L"", L"PLItemKey", L"ERendFlds::PLItemKey", L"PLItemKey" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::PLIndex), 0, 0,  { L"", L"MREND#PLIndex", L"", L"PLIndex", L"ERendFlds::PLIndex", L"PLIndex" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::PLMode), 0, 0,  { L"", L"MREND#PlaylistMode", L"", L"PLMode", L"ERendFlds::PLMode", L"PlaylistMode" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::PLSerialNum), 0, 0,  { L"", L"MREND#PLSerialNum", L"", L"PLSerialNum", L"ERendFlds::PLSerialNum", L"PLSerialNum" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::SelPLItem), 0, 0,  { L"", L"MREND#SelPlaylistItem", L"", L"SelPLItem", L"ERendFlds::SelPLItem", L"SelPlaylistItem" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::SetRandomCat), 0, 0,  { L"", L"MREND#SetRandomCat", L"", L"SetRandomCat", L"ERendFlds::SetRandomCat", L"SetRandomCat" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::SetRepo), 0, 0,  { L"", L"MREND#SetRepository", L"", L"SetRepo", L"ERendFlds::SetRepo", L"SetRepository" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::ZoneNum), 0, 0,  { L"", L"MREND#ZoneNum", L"", L"ZoneNum", L"ERendFlds::ZoneNum", L"ZoneNum" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::Power), 0, 0,  { L"", L"PWR#Power", L"", L"Power", L"ERendFlds::Power", L"Power" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::PowerStatus), 0, 0,  { L"", L"PWR#Status", L"", L"PowerStatus", L"ERendFlds::PowerStatus", L"Status" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::AdjustVolume), 0, 0,  { L"", L"AUD#AdjustVolume", L"", L"AdjustVolume", L"ERendFlds::AdjustVolume", L"AdjustVolume" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::Mute), 0, 0,  { L"", L"AUD#Mute", L"", L"Mute", L"ERendFlds::Mute", L"Mute" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::Volume), 0, 0,  { L"", L"AUD#Volume", L"", L"Volume", L"ERendFlds::Volume", L"Volume" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::MediaState), 0, 0,  { L"", L"MTRANS#MediaState", L"", L"MediaState", L"ERendFlds::MediaState", L"MediaState" } }
  , {  tCIDLib::TInt4(tCQCMedia::ERendFlds::Transport), 0, 0,  { L"", L"MTRANS#Transport", L"", L"Transport", L"ERendFlds::Transport", L"Transport" } }

};

static TEnumMap emapERendFlds
(
     L"ERendFlds"
     , 39
     , kCIDLib::False
     , aeitemValues_ERendFlds
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::ERendFlds::Count)
);

const TString& tCQCMedia::strAltXlatERendFlds(const tCQCMedia::ERendFlds eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapERendFlds.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::AltText, bThrowIfNot);
}

tCQCMedia::ERendFlds tCQCMedia::eAltXlatERendFlds(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::ERendFlds(emapERendFlds.i4MapEnumText(strVal, TEnumMap::ETextVals::AltText, bThrowIfNot));
}

const TString& tCQCMedia::strXlatERendFlds(const tCQCMedia::ERendFlds eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapERendFlds.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMedia::ERendFlds tCQCMedia::eXlatERendFlds(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::ERendFlds(emapERendFlds.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

tCQCMedia::ERendFlds operator++(tCQCMedia::ERendFlds& eVal, int)
{
    tCQCMedia::ERendFlds eTmp = eVal;
    eVal = tCQCMedia::ERendFlds(int(eVal)+1);
    return eTmp;
}

tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::ERendFlds eVal)
{
    return emapERendFlds.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ESortOrders[14] = 
{
    {  tCIDLib::TInt4(tCQCMedia::ESortOrders::Artist), 0, 0,  { L"", L"", L"", L"Artist", L"ESortOrders::Artist", L"By Artist" } }
  , {  tCIDLib::TInt4(tCQCMedia::ESortOrders::BitDepth), 0, 0,  { L"", L"", L"", L"BitDepth", L"ESortOrders::BitDepth", L"By Bit Depth" } }
  , {  tCIDLib::TInt4(tCQCMedia::ESortOrders::BitRate), 0, 0,  { L"", L"", L"", L"BitRate", L"ESortOrders::BitRate", L"By Bit Rate" } }
  , {  tCIDLib::TInt4(tCQCMedia::ESortOrders::Channels), 0, 0,  { L"", L"", L"", L"Channels", L"ESortOrders::Channels", L"By Channels" } }
  , {  tCIDLib::TInt4(tCQCMedia::ESortOrders::DateAdded), 0, 0,  { L"", L"", L"", L"DateAdded", L"ESortOrders::DateAdded", L"By Date Added" } }
  , {  tCIDLib::TInt4(tCQCMedia::ESortOrders::DateAddedDesc), 0, 0,  { L"", L"", L"", L"DateAddedDesc", L"ESortOrders::DateAddedDesc", L"By Date Added Desc" } }
  , {  tCIDLib::TInt4(tCQCMedia::ESortOrders::SampleRate), 0, 0,  { L"", L"", L"", L"SampleRate", L"ESortOrders::SampleRate", L"By Sample Rate" } }
  , {  tCIDLib::TInt4(tCQCMedia::ESortOrders::SeqNum), 0, 0,  { L"", L"", L"", L"SeqNum", L"ESortOrders::SeqNum", L"By Seq Number" } }
  , {  tCIDLib::TInt4(tCQCMedia::ESortOrders::SeqNumDesc), 0, 0,  { L"", L"", L"", L"SeqNumDesc", L"ESortOrders::SeqNumDesc", L"By Seq Number Desc" } }
  , {  tCIDLib::TInt4(tCQCMedia::ESortOrders::Title), 0, 0,  { L"", L"", L"", L"Title", L"ESortOrders::Title", L"By Title" } }
  , {  tCIDLib::TInt4(tCQCMedia::ESortOrders::UserRating), 0, 0,  { L"", L"", L"", L"UserRating", L"ESortOrders::UserRating", L"By User Rating" } }
  , {  tCIDLib::TInt4(tCQCMedia::ESortOrders::UserRatingDesc), 0, 0,  { L"", L"", L"", L"UserRatingDesc", L"ESortOrders::UserRatingDesc", L"By User Rating Desc" } }
  , {  tCIDLib::TInt4(tCQCMedia::ESortOrders::Year), 0, 0,  { L"", L"", L"", L"Year", L"ESortOrders::Year", L"By Year" } }
  , {  tCIDLib::TInt4(tCQCMedia::ESortOrders::YearDesc), 0, 0,  { L"", L"", L"", L"YearDesc", L"ESortOrders::YearDesc", L"By Year Desc" } }

};

static TEnumMap emapESortOrders
(
     L"ESortOrders"
     , 14
     , kCIDLib::False
     , aeitemValues_ESortOrders
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::ESortOrders::Count)
);

tCIDLib::TVoid tCQCMedia::FormatESortOrders(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapESortOrders.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tCQCMedia::strXlatESortOrders(const tCQCMedia::ESortOrders eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapESortOrders.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMedia::ESortOrders tCQCMedia::eXlatESortOrders(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::ESortOrders(emapESortOrders.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

tCQCMedia::ESortOrders operator++(tCQCMedia::ESortOrders& eVal, int)
{
    tCQCMedia::ESortOrders eTmp = eVal;
    eVal = tCQCMedia::ESortOrders(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::ESortOrders eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::ESortOrders& eVal)
{
    eVal = tCQCMedia::ESortOrders(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::ESortOrders* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::ESortOrders(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::ESortOrders* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::ESortOrders eVal)
{
    return emapESortOrders.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ETransCmds[7] = 
{
    {  tCIDLib::TInt4(tCQCMedia::ETransCmds::Pause), 0, 0,  { L"", L"", L"", L"Pause", L"ETransCmds::Pause", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::ETransCmds::Play), 0, 0,  { L"", L"", L"", L"Play", L"ETransCmds::Play", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::ETransCmds::Stop), 0, 0,  { L"", L"", L"", L"Stop", L"ETransCmds::Stop", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::ETransCmds::Next), 0, 0,  { L"", L"", L"", L"Next", L"ETransCmds::Next", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::ETransCmds::Previous), 0, 0,  { L"", L"", L"", L"Previous", L"ETransCmds::Previous", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::ETransCmds::FF), 0, 0,  { L"", L"", L"", L"FF", L"ETransCmds::FF", L"" } }
  , {  tCIDLib::TInt4(tCQCMedia::ETransCmds::Rewind), 0, 0,  { L"", L"", L"", L"Rewind", L"ETransCmds::Rewind", L"" } }

};

static TEnumMap emapETransCmds
(
     L"ETransCmds"
     , 7
     , kCIDLib::False
     , aeitemValues_ETransCmds
     , nullptr
     , tCIDLib::TCard4(tCQCMedia::ETransCmds::Count)
);

const TString& tCQCMedia::strXlatETransCmds(const tCQCMedia::ETransCmds eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapETransCmds.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tCQCMedia::ETransCmds tCQCMedia::eXlatETransCmds(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMedia::ETransCmds(emapETransCmds.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCQCMedia::ETransCmds operator++(tCQCMedia::ETransCmds& eVal, int)
{
    tCQCMedia::ETransCmds eTmp = eVal;
    eVal = tCQCMedia::ETransCmds(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const tCQCMedia::ETransCmds eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, tCQCMedia::ETransCmds& eVal)
{
    eVal = tCQCMedia::ETransCmds(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMedia::ETransCmds* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMedia::ETransCmds(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMedia::ETransCmds* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMedia::bIsValidEnum(const tCQCMedia::ETransCmds eVal)
{
    return emapETransCmds.bIsValidEnum(tCIDLib::TCard4(eVal));

}

