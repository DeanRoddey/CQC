// ----------------------------------------------------------------------------
//  FILE: CQCSrvFW_Shared.hpp
//  DATE: Tue, Jul 14 18:35:59 2020 -0400
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------
#pragma once

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tCQCSrvFW
{
    
    // ------------------------------------------------------------------------
    //  The derived class sends us one of these when it calls our ctor, and
    //  we use it to do some setup on his behalf and cleanup of those things
    //  on the way down of course.
    //                  
    // ------------------------------------------------------------------------
    enum class ESrvOpts : tCIDLib::TCard4
    {
        EventsIn = 0x00000001
        , EventsOut = 0x00000002
        , LogIn = 0x00000008
        , Count = 3
        , None = 0
        , AllBits = 0xB
        , AllEvents = 0x00000003
    };
    CQCSRVFWEXPORT ESrvOpts eXlatESrvOpts(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CQCSRVFWEXPORT const TString& strXlatESrvOpts(const ESrvOpts eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCSRVFWEXPORT tCIDLib::TBoolean bIsValidEnum(const ESrvOpts eVal);

    
    // ------------------------------------------------------------------------
    //  This is used to keep up with the state of the server, so that we can
    //  continue working towards the correct state, and so we know what we
    //  need to undo if we give up before we get there. This also gives us a
    //  descriptive name to log and such.
    //                  
    // ------------------------------------------------------------------------
    enum class ESrvStates
    {
        Start
        , LoadEnv
        , CreateEvent
        , SetSigHandler
        , InitClientOrb
        , InstallLogger
        , ParseParms
        , MakeDirs
        , LogIn
        , InitServerOrb
        , LoadConfig
        , WaitPrereqs
        , PreRegInit
        , RegSrvObjects
        , StartWorkers
        , PreBindInit
        , StartRebinder
        , EnableEvents
        , Ready
        , Count
        , Min = Start
        , Max = Ready
    };
    CQCSRVFWEXPORT ESrvStates eXlatESrvStates(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CQCSRVFWEXPORT const TString& strXlatESrvStates(const ESrvStates eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCSRVFWEXPORT tCIDLib::TBoolean bIsValidEnum(const ESrvStates eVal);

    
    // ------------------------------------------------------------------------
    //  Some of the virtuals the base framework class calls can return this
    //  status to indicate it worked or the derived class would like to
    //  try it again after a period of time.
    //                  
    // ------------------------------------------------------------------------
    enum class EStateRes
    {
        Success
        , Retry
        , Failed
        , Count
        , Min = Success
        , Max = Failed
    };
    CQCSRVFWEXPORT EStateRes eXlatEStateRes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    CQCSRVFWEXPORT const TString& strXlatEStateRes(const EStateRes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    CQCSRVFWEXPORT tCIDLib::TBoolean bIsValidEnum(const EStateRes eVal);

}

#pragma CIDLIB_POPPACK

constexpr tCQCSrvFW::ESrvOpts operator|(const tCQCSrvFW::ESrvOpts eLHS, const tCQCSrvFW::ESrvOpts eRHS)
{    
    return tCQCSrvFW::ESrvOpts(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
}
constexpr tCQCSrvFW::ESrvOpts& operator|=(tCQCSrvFW::ESrvOpts& eLHS, const tCQCSrvFW::ESrvOpts eRHS)
{    
    eLHS = tCQCSrvFW::ESrvOpts(tCIDLib::TEnumMaskType(eLHS) | tCIDLib::TEnumMaskType(eRHS));
    return eLHS;
}
constexpr tCQCSrvFW::ESrvOpts operator&(const tCQCSrvFW::ESrvOpts eLHS, const tCQCSrvFW::ESrvOpts eRHS)
{    
    return tCQCSrvFW::ESrvOpts(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
}
constexpr tCQCSrvFW::ESrvOpts& operator&=(tCQCSrvFW::ESrvOpts& eLHS, const tCQCSrvFW::ESrvOpts eRHS)
{    
    eLHS = tCQCSrvFW::ESrvOpts(tCIDLib::TEnumMaskType(eLHS) & tCIDLib::TEnumMaskType(eRHS));
    return eLHS;
}

CQCSRVFWEXPORT tCQCSrvFW::ESrvStates operator++(tCQCSrvFW::ESrvStates& eVal, int);
CQCSRVFWEXPORT tCQCSrvFW::ESrvStates operator--(tCQCSrvFW::ESrvStates& eVal, int);


