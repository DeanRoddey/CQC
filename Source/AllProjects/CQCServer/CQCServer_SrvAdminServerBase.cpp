// ----------------------------------------------------------------------------
//  FILE: CQCServer_SrvAdminServerBase.cpp
//  DATE: Fri, Feb 12 21:14:16 2021 -0500
//    ID: 1657103AEC7B0F90-32ED41A37653A3E1
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCServer.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
RTTIDecls(TCQCSrvAdminServerBase,TOrbServerBase)


// ----------------------------------------------------------------------------
// Public, static data
// ----------------------------------------------------------------------------
const TString TCQCSrvAdminServerBase::strInterfaceId(L"1657103AEC7B0F90-32ED41A37653A3E1");
const TString TCQCSrvAdminServerBase::strAdminScope(L"/CQC/CQCServer/Admins");
const TString TCQCSrvAdminServerBase::strDrvScope(L"/CQC/CQCServer/Drivers");
const TString TCQCSrvAdminServerBase::strCoreAdminScope(L"/CQC/CQCServer/CoreAdmins");
const TString TCQCSrvAdminServerBase::strCoreAdminBinding(L"/CQC/CQCServer/CoreAdmins/%(h)");


// ----------------------------------------------------------------------------
// TCQCSrvAdminServerBase: Destructor
// ----------------------------------------------------------------------------
TCQCSrvAdminServerBase::~TCQCSrvAdminServerBase()
{
}

// ----------------------------------------------------------------------------
// TCQCSrvAdminServerBase: Protected Constructors
// ----------------------------------------------------------------------------
TCQCSrvAdminServerBase::TCQCSrvAdminServerBase() :
    TOrbServerBase(strInterfaceId, L"TCQCSrvAdminClientProxy" )
{
}

TCQCSrvAdminServerBase::TCQCSrvAdminServerBase(const TOrbObjId& ooidThis) :
    TOrbServerBase(ooidThis)
{
}

// ----------------------------------------------------------------------------
// TCQCSrvAdminServerBase: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TCQCSrvAdminServerBase::Dispatch(const TString& strMethodName, TOrbCmd& orbcToDispatch)
{
    if (strMethodName == L"bCheckFieldExists")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TBoolean bDevExists = {};
        TString strField;
        orbcToDispatch.strmIn() >> strField;
        tCIDLib::TBoolean bFldExists = {};
        tCIDLib::TBoolean retVal = bCheckFieldExists
        (
            strMoniker
          , bDevExists
          , strField
          , bFldExists
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << bDevExists;
        orbcToDispatch.strmOut() << bFldExists;
    }
     else if (strMethodName == L"bCheckForAllNewFields")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        TFundVector<tCIDLib::TCard8> fcolIds;
        orbcToDispatch.strmIn() >> fcolIds;
        tCIDLib::TBoolean retVal = bCheckForAllNewFields
        (
            c4DriverListId
          , fcolIds
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bCheckForNewFields")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        tCIDLib::TCard4 c4DriverId;
        orbcToDispatch.strmIn() >> c4DriverId;
        tCIDLib::TCard4 c4FieldListId;
        orbcToDispatch.strmIn() >> c4FieldListId;
        tCIDLib::TBoolean retVal = bCheckForNewFields
        (
            c4DriverListId
          , c4DriverId
          , c4FieldListId
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bCheckForNewDrivers")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        tCIDLib::TBoolean retVal = bCheckForNewDrivers
        (
            c4DriverListId
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bHasQueuedTimedWrite")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strField;
        orbcToDispatch.strmIn() >> strField;
        tCIDLib::TCard8 c8EndTime = {};
        tCIDLib::TBoolean retVal = bHasQueuedTimedWrite
        (
            strMoniker
          , strField
          , c8EndTime
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c8EndTime;
    }
     else if (strMethodName == L"bLoadDrivers")
    {
        TVector<TString> colMonikers;
        orbcToDispatch.strmIn() >> colMonikers;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bLoadDrivers
        (
            colMonikers
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bQueryCommPorts")
    {
        TVector<TString> colToFill;
        tCIDLib::TBoolean bLocalOnly;
        orbcToDispatch.strmIn() >> bLocalOnly;
        tCIDLib::TBoolean bAvailOnly;
        orbcToDispatch.strmIn() >> bAvailOnly;
        tCIDLib::TBoolean retVal = bQueryCommPorts
        (
            colToFill
          , bLocalOnly
          , bAvailOnly
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"bQueryData")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strQueryType;
        orbcToDispatch.strmIn() >> strQueryType;
        TString strDataName;
        orbcToDispatch.strmIn() >> strDataName;
        tCIDLib::TCard4 c4BufSz_mbufToFill = 0;
        THeapBuf mbufToFill;
        tCIDLib::TBoolean retVal = bQueryData
        (
            strMoniker
          , strQueryType
          , strDataName
          , c4BufSz_mbufToFill
          , mbufToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4BufSz_mbufToFill;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufToFill, c4BufSz_mbufToFill);
    }
     else if (strMethodName == L"bQueryData2")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strQueryType;
        orbcToDispatch.strmIn() >> strQueryType;
        tCIDLib::TCard4 c4BufSz_mbufIO;
        orbcToDispatch.strmIn() >> c4BufSz_mbufIO;
        THeapBuf mbufIO(c4BufSz_mbufIO + 1);
        orbcToDispatch.strmIn().c4ReadBuffer(mbufIO, c4BufSz_mbufIO);
        tCIDLib::TBoolean retVal = bQueryData2
        (
            strMoniker
          , strQueryType
          , c4BufSz_mbufIO
          , mbufIO
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4BufSz_mbufIO;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufIO, c4BufSz_mbufIO);
    }
     else if (strMethodName == L"bQueryDriverInfo")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TCQCDriverObjCfg cqcdcToFill;
        tCIDLib::TBoolean retVal = bQueryDriverInfo
        (
            strMoniker
          , cqcdcToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << cqcdcToFill;
    }
     else if (strMethodName == L"bQueryDriverStates")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        TFundVector<tCIDLib::TCard4> fcolIds;
        TFundVector<tCQCKit::EDrvStates> fcolStates;
        tCIDLib::TBoolean retVal = bQueryDriverStates
        (
            c4DriverListId
          , fcolIds
          , fcolStates
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << fcolIds;
        orbcToDispatch.strmOut() << fcolStates;
    }
     else if (strMethodName == L"bQueryTextVal")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strQueryType;
        orbcToDispatch.strmIn() >> strQueryType;
        TString strDataName;
        orbcToDispatch.strmIn() >> strDataName;
        TString strToFill;
        tCIDLib::TBoolean retVal = bQueryTextVal
        (
            strMoniker
          , strQueryType
          , strDataName
          , strToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << strToFill;
    }
     else if (strMethodName == L"bQueryVal")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strValId;
        orbcToDispatch.strmIn() >> strValId;
        tCIDLib::TBoolean bNoQueue;
        orbcToDispatch.strmIn() >> bNoQueue;
        tCIDLib::TBoolean retVal = bQueryVal
        (
            strMoniker
          , strValId
          , bNoQueue
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bQueryVal2")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strValId;
        orbcToDispatch.strmIn() >> strValId;
        TString strValName;
        orbcToDispatch.strmIn() >> strValName;
        tCIDLib::TBoolean bNoQueue;
        orbcToDispatch.strmIn() >> bNoQueue;
        tCIDLib::TBoolean retVal = bQueryVal2
        (
            strMoniker
          , strValId
          , strValName
          , bNoQueue
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"bReadField")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        tCIDLib::TCard4 c4DriverId;
        orbcToDispatch.strmIn() >> c4DriverId;
        tCIDLib::TCard4 c4FieldListId;
        orbcToDispatch.strmIn() >> c4FieldListId;
        tCIDLib::TCard4 c4FieldId;
        orbcToDispatch.strmIn() >> c4FieldId;
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TString strValue;
        tCQCKit::EFldTypes eType;
        tCIDLib::TBoolean retVal = bReadField
        (
            c4DriverListId
          , c4DriverId
          , c4FieldListId
          , c4FieldId
          , c4SerialNum
          , strValue
          , eType
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4SerialNum;
        orbcToDispatch.strmOut() << strValue;
        orbcToDispatch.strmOut() << eType;
    }
     else if (strMethodName == L"bReadField1")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        tCIDLib::TCard4 c4DriverId;
        orbcToDispatch.strmIn() >> c4DriverId;
        tCIDLib::TCard4 c4FieldListId;
        orbcToDispatch.strmIn() >> c4FieldListId;
        tCIDLib::TCard4 c4FieldId;
        orbcToDispatch.strmIn() >> c4FieldId;
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        tCIDLib::TCard4 c4BufSz_mbufValue = 0;
        THeapBuf mbufValue;
        tCQCKit::EFldTypes eType;
        tCIDLib::TBoolean retVal = bReadField
        (
            c4DriverListId
          , c4DriverId
          , c4FieldListId
          , c4FieldId
          , c4SerialNum
          , c4BufSz_mbufValue
          , mbufValue
          , eType
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4SerialNum;
        orbcToDispatch.strmOut() << c4BufSz_mbufValue;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufValue, c4BufSz_mbufValue);
        orbcToDispatch.strmOut() << eType;
    }
     else if (strMethodName == L"bReadFieldByName")
    {
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        TString strToFill;
        tCQCKit::EFldTypes eType;
        tCIDLib::TBoolean retVal = bReadFieldByName
        (
            c4SerialNum
          , strMoniker
          , strFldName
          , strToFill
          , eType
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4SerialNum;
            orbcToDispatch.strmOut() << strToFill;
            orbcToDispatch.strmOut() << eType;
        }
    }
     else if (strMethodName == L"bReadFieldByName1")
    {
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        tCIDLib::TCard4 c4BufSz_mbufValue = 0;
        THeapBuf mbufValue;
        tCQCKit::EFldTypes eType;
        tCIDLib::TBoolean retVal = bReadFieldByName
        (
            c4SerialNum
          , strMoniker
          , strFldName
          , c4BufSz_mbufValue
          , mbufValue
          , eType
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4SerialNum;
            orbcToDispatch.strmOut() << c4BufSz_mbufValue;
            orbcToDispatch.strmOut().c4WriteBuffer(mbufValue, c4BufSz_mbufValue);
            orbcToDispatch.strmOut() << eType;
        }
    }
     else if (strMethodName == L"bReadBoolByName")
    {
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        tCIDLib::TBoolean bToFill = {};
        tCIDLib::TBoolean retVal = bReadBoolByName
        (
            c4SerialNum
          , strMoniker
          , strFldName
          , bToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4SerialNum;
            orbcToDispatch.strmOut() << bToFill;
        }
    }
     else if (strMethodName == L"bReadCardByName")
    {
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        tCIDLib::TCard4 c4ToFill = {};
        tCIDLib::TBoolean retVal = bReadCardByName
        (
            c4SerialNum
          , strMoniker
          , strFldName
          , c4ToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4SerialNum;
            orbcToDispatch.strmOut() << c4ToFill;
        }
    }
     else if (strMethodName == L"bReadFloatByName")
    {
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        tCIDLib::TFloat8 f8ToFill = {};
        tCIDLib::TBoolean retVal = bReadFloatByName
        (
            c4SerialNum
          , strMoniker
          , strFldName
          , f8ToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4SerialNum;
            orbcToDispatch.strmOut() << f8ToFill;
        }
    }
     else if (strMethodName == L"bReadIntByName")
    {
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        tCIDLib::TInt4 i4ToFill = {};
        tCIDLib::TBoolean retVal = bReadIntByName
        (
            c4SerialNum
          , strMoniker
          , strFldName
          , i4ToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4SerialNum;
            orbcToDispatch.strmOut() << i4ToFill;
        }
    }
     else if (strMethodName == L"bReadSListByName")
    {
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        TVector<TString> colValue;
        tCIDLib::TBoolean retVal = bReadSListByName
        (
            c4SerialNum
          , strMoniker
          , strFldName
          , colValue
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4SerialNum;
        orbcToDispatch.strmOut() << colValue;
    }
     else if (strMethodName == L"bReadStringByName")
    {
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        TString strToFill;
        tCIDLib::TBoolean retVal = bReadStringByName
        (
            c4SerialNum
          , strMoniker
          , strFldName
          , strToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4SerialNum;
            orbcToDispatch.strmOut() << strToFill;
        }
    }
     else if (strMethodName == L"bReadTimeByName")
    {
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        tCIDLib::TCard8 c8ToFill = {};
        tCIDLib::TBoolean retVal = bReadTimeByName
        (
            c4SerialNum
          , strMoniker
          , strFldName
          , c8ToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        if (retVal)
        {
            orbcToDispatch.strmOut() << c4SerialNum;
            orbcToDispatch.strmOut() << c8ToFill;
        }
    }
     else if (strMethodName == L"bSendData")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strSendType;
        orbcToDispatch.strmIn() >> strSendType;
        TString strDataName;
        orbcToDispatch.strmIn() >> strDataName;
        tCIDLib::TCard4 c4BufSz_mbufIO;
        orbcToDispatch.strmIn() >> c4BufSz_mbufIO;
        THeapBuf mbufIO(c4BufSz_mbufIO + 1);
        orbcToDispatch.strmIn().c4ReadBuffer(mbufIO, c4BufSz_mbufIO);
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TBoolean retVal = bSendData
        (
            strMoniker
          , strSendType
          , strDataName
          , c4BufSz_mbufIO
          , mbufIO
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << strDataName;
        orbcToDispatch.strmOut() << c4BufSz_mbufIO;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufIO, c4BufSz_mbufIO);
    }
     else if (strMethodName == L"c4QueryAudioDevs")
    {
        TVector<TString> colToFill;
        tCIDLib::TCard4 retVal = c4QueryAudioDevs
        (
            colToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"c4QueryDriverConfigObjs")
    {
        TVector<TCQCDriverObjCfg> colToFill;
        tCIDLib::TCard4 c4DriverListId = {};
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TCard4 retVal = c4QueryDriverConfigObjs
        (
            colToFill
          , c4DriverListId
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
        orbcToDispatch.strmOut() << c4DriverListId;
    }
     else if (strMethodName == L"c4QueryDriverId")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4DriverListId = {};
        tCIDLib::TCard4 retVal = c4QueryDriverId
        (
            strMoniker
          , c4DriverListId
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4DriverListId;
    }
     else if (strMethodName == L"c4QueryDriverIds")
    {
        TVector<TString> colMonikers;
        orbcToDispatch.strmIn() >> colMonikers;
        TFundVector<tCIDLib::TCard4> fcolIds;
        TVector<TKeyValuePair> colToFill;
        tCIDLib::TCard4 retVal = c4QueryDriverIds
        (
            colMonikers
          , fcolIds
          , colToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << fcolIds;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"c4QueryDriverIdList")
    {
        TVector<TString> colMonikers;
        TFundVector<tCIDLib::TCard4> fcolIds;
        TVector<TKeyValuePair> colToFill;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TCard4 retVal = c4QueryDriverIdList
        (
            colMonikers
          , fcolIds
          , colToFill
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colMonikers;
        orbcToDispatch.strmOut() << fcolIds;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"c4QueryDriverIdList2")
    {
        TVector<TString> colMonikers;
        TFundVector<tCIDLib::TCard4> fcolIds;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TCard4 retVal = c4QueryDriverIdList2
        (
            colMonikers
          , fcolIds
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colMonikers;
        orbcToDispatch.strmOut() << fcolIds;
    }
     else if (strMethodName == L"c4QueryFields")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCQCKit::EDrvStates eState;
        TVector<TCQCFldDef> colToFill;
        tCIDLib::TCard4 c4FldListId = {};
        tCIDLib::TCard4 c4DriverId = {};
        tCIDLib::TCard4 c4DriverListId = {};
        tCIDLib::TCard4 retVal = c4QueryFields
        (
            strMoniker
          , eState
          , colToFill
          , c4FldListId
          , c4DriverId
          , c4DriverListId
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << eState;
        orbcToDispatch.strmOut() << colToFill;
        orbcToDispatch.strmOut() << c4FldListId;
        orbcToDispatch.strmOut() << c4DriverId;
        orbcToDispatch.strmOut() << c4DriverListId;
    }
     else if (strMethodName == L"c4QueryFieldNames")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TVector<TString> colToFill;
        tCQCKit::EReqAccess eReqAccess;
        orbcToDispatch.strmIn() >> eReqAccess;
        tCIDLib::TCard4 retVal = c4QueryFieldNames
        (
            strMoniker
          , colToFill
          , eReqAccess
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"c4QueryFieldNamesRX")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TVector<TCQCFldDef> colToFill;
        TString strFldNameRegEx;
        orbcToDispatch.strmIn() >> strFldNameRegEx;
        tCQCKit::EReqAccess eReqAccess;
        orbcToDispatch.strmIn() >> eReqAccess;
        tCIDLib::TCard4 retVal = c4QueryFieldNamesRX
        (
            strMoniker
          , colToFill
          , strFldNameRegEx
          , eReqAccess
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"c4QuerySemFields")
    {
        TFundVector<tCQCKit::EFldSTypes> folTypes;
        orbcToDispatch.strmIn() >> folTypes;
        tCQCKit::EReqAccess eReqAccess;
        orbcToDispatch.strmIn() >> eReqAccess;
        TVector<TCQCDrvFldDef> colToFill;
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 retVal = c4QuerySemFields
        (
            folTypes
          , eReqAccess
          , colToFill
          , strMoniker
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"c4QueryTTSVoices")
    {
        TVector<TString> colToFill;
        tCIDLib::TCard4 retVal = c4QueryTTSVoices
        (
            colToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"c4QueryVal")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strValId;
        orbcToDispatch.strmIn() >> strValId;
        tCIDLib::TBoolean bNoQueue;
        orbcToDispatch.strmIn() >> bNoQueue;
        tCIDLib::TCard4 retVal = c4QueryVal
        (
            strMoniker
          , strValId
          , bNoQueue
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"c4QueryVal2")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strValId;
        orbcToDispatch.strmIn() >> strValId;
        TString strValName;
        orbcToDispatch.strmIn() >> strValName;
        tCIDLib::TBoolean bNoQueue;
        orbcToDispatch.strmIn() >> bNoQueue;
        tCIDLib::TCard4 retVal = c4QueryVal2
        (
            strMoniker
          , strValId
          , strValName
          , bNoQueue
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"c4SendCmd")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strCmdId;
        orbcToDispatch.strmIn() >> strCmdId;
        TString strParms;
        orbcToDispatch.strmIn() >> strParms;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCIDLib::TCard4 retVal = c4SendCmd
        (
            strMoniker
          , strCmdId
          , strParms
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"CancelTimedWrite")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strField;
        orbcToDispatch.strmIn() >> strField;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        CancelTimedWrite
        (
            strMoniker
          , strField
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"ClearDrvStats")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        ClearDrvStats
        (
            strMoniker
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"DoTimedWrite")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strField;
        orbcToDispatch.strmIn() >> strField;
        TString strNewVal;
        orbcToDispatch.strmIn() >> strNewVal;
        TString strFinalVal;
        orbcToDispatch.strmIn() >> strFinalVal;
        tCIDLib::TCard4 Seconds;
        orbcToDispatch.strmIn() >> Seconds;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        DoTimedWrite
        (
            strMoniker
          , strField
          , strNewVal
          , strFinalVal
          , Seconds
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"i4QueryVal")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strValId;
        orbcToDispatch.strmIn() >> strValId;
        tCIDLib::TBoolean bNoQueue;
        orbcToDispatch.strmIn() >> bNoQueue;
        tCIDLib::TInt4 retVal = i4QueryVal
        (
            strMoniker
          , strValId
          , bNoQueue
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"i4QueryVal2")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strValId;
        orbcToDispatch.strmIn() >> strValId;
        TString strValName;
        orbcToDispatch.strmIn() >> strValName;
        tCIDLib::TBoolean bNoQueue;
        orbcToDispatch.strmIn() >> bNoQueue;
        tCIDLib::TInt4 retVal = i4QueryVal2
        (
            strMoniker
          , strValId
          , strValName
          , bNoQueue
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
    }
     else if (strMethodName == L"QueryConfig")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4BufSz_mbufData = 0;
        THeapBuf mbufData;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        QueryConfig
        (
            strMoniker
          , c4BufSz_mbufData
          , mbufData
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4BufSz_mbufData;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufData, c4BufSz_mbufData);
    }
     else if (strMethodName == L"QueryDriverInfo")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCQCKit::EDrvStates eStatus;
        tCIDLib::TCard4 c4ArchVer = {};
        TFundVector<tCQCKit::EDevClasses> fcolDevClasses;
        TString strMake;
        TString strModel;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        QueryDriverInfo
        (
            strMoniker
          , eStatus
          , c4ArchVer
          , fcolDevClasses
          , strMake
          , strModel
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << eStatus;
        orbcToDispatch.strmOut() << c4ArchVer;
        orbcToDispatch.strmOut() << fcolDevClasses;
        orbcToDispatch.strmOut() << strMake;
        orbcToDispatch.strmOut() << strModel;
    }
     else if (strMethodName == L"QueryDriverState")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCQCKit::EDrvStates eStatus;
        tCQCKit::EVerboseLvls eVerboseLvl;
        tCIDLib::TCard4 c4ThreadId = {};
        QueryDriverState
        (
            strMoniker
          , eStatus
          , eVerboseLvl
          , c4ThreadId
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << eStatus;
        orbcToDispatch.strmOut() << eVerboseLvl;
        orbcToDispatch.strmOut() << c4ThreadId;
    }
     else if (strMethodName == L"QueryDriverStats")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TCQCDrvStats cdstats;
        QueryDriverStats
        (
            strMoniker
          , cdstats
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << cdstats;
    }
     else if (strMethodName == L"QueryFieldDef")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strField;
        orbcToDispatch.strmIn() >> strField;
        TCQCFldDef flddToFill;
        QueryFieldDef
        (
            strMoniker
          , strField
          , flddToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << flddToFill;
    }
     else if (strMethodName == L"QueryFieldInfo")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strField;
        orbcToDispatch.strmIn() >> strField;
        tCIDLib::TCard4 c4DriverListId = {};
        tCIDLib::TCard4 c4DriverId = {};
        tCIDLib::TCard4 c4FieldListId = {};
        tCIDLib::TCard4 c4FieldId = {};
        tCQCKit::EFldTypes eType;
        QueryFieldInfo
        (
            strMoniker
          , strField
          , c4DriverListId
          , c4DriverId
          , c4FieldListId
          , c4FieldId
          , eType
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4DriverListId;
        orbcToDispatch.strmOut() << c4DriverId;
        orbcToDispatch.strmOut() << c4FieldListId;
        orbcToDispatch.strmOut() << c4FieldId;
        orbcToDispatch.strmOut() << eType;
    }
     else if (strMethodName == L"QueryPowerStates")
    {
        TVector<TKeyValuePair> colDrvNames;
        orbcToDispatch.strmIn() >> colDrvNames;
        TFundVector<tCQCKit::EPowerStatus> fcolStates;
        QueryPowerStates
        (
            colDrvNames
          , fcolStates
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << fcolStates;
    }
     else if (strMethodName == L"QueryStatusReport")
    {
        TString strErrList;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        QueryStatusReport
        (
            strErrList
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << strErrList;
    }
     else if (strMethodName == L"PauseResumeDrv")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TBoolean bPause;
        orbcToDispatch.strmIn() >> bPause;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        PauseResumeDrv
        (
            strMoniker
          , bPause
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"ReadDriverFields")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        tCIDLib::TCard4 c4DriverId;
        orbcToDispatch.strmIn() >> c4DriverId;
        tCIDLib::TCard4 c4FieldListId;
        orbcToDispatch.strmIn() >> c4FieldListId;
        TFundVector<tCIDLib::TCard4> fcolFldIds;
        orbcToDispatch.strmIn() >> fcolFldIds;
        TFundVector<tCIDLib::TCard4> fcolSerialNums;
        orbcToDispatch.strmIn() >> fcolSerialNums;
        tCIDLib::TCard4 c4BufSz_mbufData = 0;
        THeapBuf mbufData;
        ReadDriverFields
        (
            c4DriverListId
          , c4DriverId
          , c4FieldListId
          , fcolFldIds
          , fcolSerialNums
          , c4BufSz_mbufData
          , mbufData
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4BufSz_mbufData;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufData, c4BufSz_mbufData);
    }
     else if (strMethodName == L"ReadFields")
    {
        TFldIOPacket fiopInfo;
        orbcToDispatch.strmIn() >> fiopInfo;
        tCIDLib::TCard4 c4BufSz_mbufData = 0;
        THeapBuf mbufData;
        ReadFields
        (
            fiopInfo
          , c4BufSz_mbufData
          , mbufData
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4BufSz_mbufData;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufData, c4BufSz_mbufData);
    }
     else if (strMethodName == L"ReadFieldsByName")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TVector<TString> colFieldNames;
        orbcToDispatch.strmIn() >> colFieldNames;
        tCIDLib::TCard4 c4BufSz_mbufData = 0;
        THeapBuf mbufData;
        ReadFieldsByName
        (
            strMoniker
          , colFieldNames
          , c4BufSz_mbufData
          , mbufData
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4BufSz_mbufData;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufData, c4BufSz_mbufData);
    }
     else if (strMethodName == L"ReconfigDriver")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        ReconfigDriver
        (
            strMoniker
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"RefreshCfg")
    {
        TString strCfgType;
        orbcToDispatch.strmIn() >> strCfgType;
        RefreshCfg
        (
            strCfgType
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetConfig")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCIDLib::TCard4 c4BufSz_mbufNewCfg;
        orbcToDispatch.strmIn() >> c4BufSz_mbufNewCfg;
        THeapBuf mbufNewCfg(c4BufSz_mbufNewCfg + 1);
        orbcToDispatch.strmIn().c4ReadBuffer(mbufNewCfg, c4BufSz_mbufNewCfg);
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        SetConfig
        (
            strMoniker
          , c4BufSz_mbufNewCfg
          , mbufNewCfg
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetVerboseLevel")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        tCQCKit::EVerboseLvls eToSet;
        orbcToDispatch.strmIn() >> eToSet;
        SetVerboseLevel
        (
            strMoniker
          , eToSet
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"UnloadAllDrivers")
    {
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        UnloadAllDrivers
        (
            sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"UnloadDriver")
    {
        TString strMonikerToUnload;
        orbcToDispatch.strmIn() >> strMonikerToUnload;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        UnloadDriver
        (
            strMonikerToUnload
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"UpdateTriggers")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        UpdateTriggers
        (
            strMoniker
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteFieldByName")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        TString strValue;
        orbcToDispatch.strmIn() >> strValue;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteFieldByName
        (
            strMoniker
          , strFldName
          , strValue
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteBoolByName")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        tCIDLib::TBoolean bValue;
        orbcToDispatch.strmIn() >> bValue;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteBoolByName
        (
            strMoniker
          , strFldName
          , bValue
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteBoolFld")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        tCIDLib::TCard4 c4DriverId;
        orbcToDispatch.strmIn() >> c4DriverId;
        tCIDLib::TCard4 c4FieldListId;
        orbcToDispatch.strmIn() >> c4FieldListId;
        tCIDLib::TCard4 c4FieldId;
        orbcToDispatch.strmIn() >> c4FieldId;
        tCIDLib::TBoolean bValue;
        orbcToDispatch.strmIn() >> bValue;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteBoolFld
        (
            c4DriverListId
          , c4DriverId
          , c4FieldListId
          , c4FieldId
          , bValue
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteCardByName")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        tCIDLib::TCard4 c4Value;
        orbcToDispatch.strmIn() >> c4Value;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteCardByName
        (
            strMoniker
          , strFldName
          , c4Value
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteCardFld")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        tCIDLib::TCard4 c4DriverId;
        orbcToDispatch.strmIn() >> c4DriverId;
        tCIDLib::TCard4 c4FieldListId;
        orbcToDispatch.strmIn() >> c4FieldListId;
        tCIDLib::TCard4 c4FieldId;
        orbcToDispatch.strmIn() >> c4FieldId;
        tCIDLib::TCard4 c4Value;
        orbcToDispatch.strmIn() >> c4Value;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteCardFld
        (
            c4DriverListId
          , c4DriverId
          , c4FieldListId
          , c4FieldId
          , c4Value
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteFloatByName")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        tCIDLib::TFloat8 f8Value;
        orbcToDispatch.strmIn() >> f8Value;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteFloatByName
        (
            strMoniker
          , strFldName
          , f8Value
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteFloatFld")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        tCIDLib::TCard4 c4DriverId;
        orbcToDispatch.strmIn() >> c4DriverId;
        tCIDLib::TCard4 c4FieldListId;
        orbcToDispatch.strmIn() >> c4FieldListId;
        tCIDLib::TCard4 c4FieldId;
        orbcToDispatch.strmIn() >> c4FieldId;
        tCIDLib::TFloat8 f8Value;
        orbcToDispatch.strmIn() >> f8Value;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteFloatFld
        (
            c4DriverListId
          , c4DriverId
          , c4FieldListId
          , c4FieldId
          , f8Value
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteIntByName")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        tCIDLib::TInt4 i4Value;
        orbcToDispatch.strmIn() >> i4Value;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteIntByName
        (
            strMoniker
          , strFldName
          , i4Value
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteIntFld")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        tCIDLib::TCard4 c4DriverId;
        orbcToDispatch.strmIn() >> c4DriverId;
        tCIDLib::TCard4 c4FieldListId;
        orbcToDispatch.strmIn() >> c4FieldListId;
        tCIDLib::TCard4 c4FieldId;
        orbcToDispatch.strmIn() >> c4FieldId;
        tCIDLib::TInt4 i4Value;
        orbcToDispatch.strmIn() >> i4Value;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteIntFld
        (
            c4DriverListId
          , c4DriverId
          , c4FieldListId
          , c4FieldId
          , i4Value
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteStringByName")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        TString strValue;
        orbcToDispatch.strmIn() >> strValue;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteStringByName
        (
            strMoniker
          , strFldName
          , strValue
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteStringFld")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        tCIDLib::TCard4 c4DriverId;
        orbcToDispatch.strmIn() >> c4DriverId;
        tCIDLib::TCard4 c4FieldListId;
        orbcToDispatch.strmIn() >> c4FieldListId;
        tCIDLib::TCard4 c4FieldId;
        orbcToDispatch.strmIn() >> c4FieldId;
        TString strValue;
        orbcToDispatch.strmIn() >> strValue;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteStringFld
        (
            c4DriverListId
          , c4DriverId
          , c4FieldListId
          , c4FieldId
          , strValue
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteSListByName")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        TVector<TString> colValue;
        orbcToDispatch.strmIn() >> colValue;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteSListByName
        (
            strMoniker
          , strFldName
          , colValue
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteSListFld")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        tCIDLib::TCard4 c4DriverId;
        orbcToDispatch.strmIn() >> c4DriverId;
        tCIDLib::TCard4 c4FieldListId;
        orbcToDispatch.strmIn() >> c4FieldListId;
        tCIDLib::TCard4 c4FieldId;
        orbcToDispatch.strmIn() >> c4FieldId;
        TVector<TString> colValue;
        orbcToDispatch.strmIn() >> colValue;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteSListFld
        (
            c4DriverListId
          , c4DriverId
          , c4FieldListId
          , c4FieldId
          , colValue
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteTimeByName")
    {
        TString strMoniker;
        orbcToDispatch.strmIn() >> strMoniker;
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        tCIDLib::TCard8 c8Value;
        orbcToDispatch.strmIn() >> c8Value;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteTimeByName
        (
            strMoniker
          , strFldName
          , c8Value
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"WriteTimeFld")
    {
        tCIDLib::TCard4 c4DriverListId;
        orbcToDispatch.strmIn() >> c4DriverListId;
        tCIDLib::TCard4 c4DriverId;
        orbcToDispatch.strmIn() >> c4DriverId;
        tCIDLib::TCard4 c4FieldListId;
        orbcToDispatch.strmIn() >> c4FieldListId;
        tCIDLib::TCard4 c4FieldId;
        orbcToDispatch.strmIn() >> c4FieldId;
        tCIDLib::TCard8 c8Value;
        orbcToDispatch.strmIn() >> c8Value;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        tCQCKit::EDrvCmdWaits eWait;
        orbcToDispatch.strmIn() >> eWait;
        WriteTimeFld
        (
            c4DriverListId
          , c4DriverId
          , c4FieldListId
          , c4FieldId
          , c8Value
          , sectUser
          , eWait
        );
        orbcToDispatch.strmOut().Reset();
    }
     else
    {
         TParent::Dispatch(strMethodName, orbcToDispatch);
    }
}

