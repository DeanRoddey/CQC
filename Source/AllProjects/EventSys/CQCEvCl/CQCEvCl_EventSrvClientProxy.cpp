// ----------------------------------------------------------------------------
//  FILE: CQCEvCl_EventSrvClientProxy.cpp
//  DATE: Fri, Feb 14 18:49:45 2020 -0500
//    ID: A57BF7129F2FC717-185A358D14B4D696
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCEvCl_.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
AdvRTTIDecls(TEventSrvClientProxy,TOrbClientBase)


// ----------------------------------------------------------------------------
// TEventSrvClientProxy: Public, static data
// ----------------------------------------------------------------------------
const TString TEventSrvClientProxy::strInterfaceId(L"A57BF7129F2FC717-185A358D14B4D696");
const TString TEventSrvClientProxy::strBinding(L"/CQC/CQCEventSrv/EventServerObj");
const TString TEventSrvClientProxy::strRTVEventText(L"EvRTV:EventText");
const TString TEventSrvClientProxy::strCoreAdminBinding(L"/CQC/CQCEventSrv/CoreAdmin");



// ----------------------------------------------------------------------------
// TEventSrvClientProxy: Constructors and Destructor
// ----------------------------------------------------------------------------
TEventSrvClientProxy::TEventSrvClientProxy()
{
}

TEventSrvClientProxy::
TEventSrvClientProxy(const TOrbObjId& ooidSrc, const TString& strNSBinding)
{
    #if CID_DEBUG_ON
    if (!ooidSrc.oidKey().bIsInterfaceId(strInterfaceId))
    {
        facCIDOrb().ThrowErr
        (
            CID_FILE
            , CID_LINE
            , kOrbErrs::errcClient_BadIntfId
            , tCIDLib::ESeverities::Failed
            , tCIDLib::EErrClasses::BadParms
            , ooidSrc.oidKey().mhashInterface()
            , strInterfaceId
        );
    }
    #endif
    SetObjId(ooidSrc, strNSBinding, kCIDLib::False);
}

TEventSrvClientProxy::~TEventSrvClientProxy()
{
}

// ----------------------------------------------------------------------------
// TEventSrvClientProxy: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TEventSrvClientProxy::DumpEvents
(
    const TString& strTarFile)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"DumpEvents");
        ocmdToUse.strmOut() << strTarFile;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TEventSrvClientProxy::AddEvent
(
    const tCQCKit::EEvSrvTypes eEventType
    , const TString& strRelPath
    , tCIDLib::TCard4& c4ChangeSerNum
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"AddEvent");
        ocmdToUse.strmOut() << eEventType;
        ocmdToUse.strmOut() << strRelPath;
        ocmdToUse.strmOut() << c4ChangeSerNum;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4ChangeSerNum;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TEventSrvClientProxy::DeleteEvent
(
    const tCQCKit::EEvSrvTypes eEventType
    , const TString& strRelPath
    , tCIDLib::TCard4& c4ChangeSerNum
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"DeleteEvent");
        ocmdToUse.strmOut() << eEventType;
        ocmdToUse.strmOut() << strRelPath;
        ocmdToUse.strmOut() << c4ChangeSerNum;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4ChangeSerNum;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TEventSrvClientProxy::PauseEvent
(
    const tCQCKit::EEvSrvTypes eEventType
    , const TString& strRelPath
    , tCIDLib::TCard4& c4ChangeSerNum
    , const tCIDLib::TBoolean bPause
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"PauseEvent");
        ocmdToUse.strmOut() << eEventType;
        ocmdToUse.strmOut() << strRelPath;
        ocmdToUse.strmOut() << c4ChangeSerNum;
        ocmdToUse.strmOut() << bPause;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4ChangeSerNum;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TEventSrvClientProxy::RenameEvent
(
    const tCQCKit::EEvSrvTypes eEventType
    , const TString& strRelParPath
    , const TString& strOldName
    , const TString& strNewName
    , tCIDLib::TCard4& c4ChangeSerNum
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"RenameEvent");
        ocmdToUse.strmOut() << eEventType;
        ocmdToUse.strmOut() << strRelParPath;
        ocmdToUse.strmOut() << strOldName;
        ocmdToUse.strmOut() << strNewName;
        ocmdToUse.strmOut() << c4ChangeSerNum;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4ChangeSerNum;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TEventSrvClientProxy::RenameScope
(
    const tCQCKit::EEvSrvTypes eEventType
    , const TString& strRelParPath
    , const TString& strOldName
    , const TString& strNewName
    , tCIDLib::TCard4& c4ChangeSerNum
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"RenameScope");
        ocmdToUse.strmOut() << eEventType;
        ocmdToUse.strmOut() << strRelParPath;
        ocmdToUse.strmOut() << strOldName;
        ocmdToUse.strmOut() << strNewName;
        ocmdToUse.strmOut() << c4ChangeSerNum;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4ChangeSerNum;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TEventSrvClientProxy::UpdateEvent
(
    const tCQCKit::EEvSrvTypes eEventType
    , const TString& strRelPath
    , tCIDLib::TCard4& c4ChangeSerNum
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"UpdateEvent");
        ocmdToUse.strmOut() << eEventType;
        ocmdToUse.strmOut() << strRelPath;
        ocmdToUse.strmOut() << c4ChangeSerNum;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4ChangeSerNum;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TEventSrvClientProxy::Ping()
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"Ping");
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TEventSrvClientProxy::QueryPerEvInfo
(
    const TString& strPath
    , tCQCKit::ESchTypes& eType
    , tCIDLib::TCard8& enctStart
    , tCIDLib::TCard4& c4Period
    , tCIDLib::TBoolean& bPaused)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryPerEvInfo");
        ocmdToUse.strmOut() << strPath;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> eType;
        ocmdToUse.strmIn() >> enctStart;
        ocmdToUse.strmIn() >> c4Period;
        ocmdToUse.strmIn() >> bPaused;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TEventSrvClientProxy::QuerySchEvInfo
(
    const TString& strPath
    , tCQCKit::ESchTypes& eType
    , tCIDLib::TCard4& c4Day
    , tCIDLib::TCard4& c4Hour
    , tCIDLib::TCard4& c4Minute
    , tCIDLib::TCard4& c4Mask
    , tCIDLib::TBoolean& bPaused)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QuerySchEvInfo");
        ocmdToUse.strmOut() << strPath;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> eType;
        ocmdToUse.strmIn() >> c4Day;
        ocmdToUse.strmIn() >> c4Hour;
        ocmdToUse.strmIn() >> c4Minute;
        ocmdToUse.strmIn() >> c4Mask;
        ocmdToUse.strmIn() >> bPaused;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TEventSrvClientProxy::QuerySunBasedEvInfo
(
    const TString& strPath
    , tCIDLib::TInt4& i4Offset
    , tCIDLib::TBoolean& bPaused)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QuerySunBasedEvInfo");
        ocmdToUse.strmOut() << strPath;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> i4Offset;
        ocmdToUse.strmIn() >> bPaused;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TEventSrvClientProxy::ReloadList
(
    const tCQCKit::EEvSrvTypes eToReload)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"ReloadList");
        ocmdToUse.strmOut() << eToReload;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TEventSrvClientProxy::SetLocInfo
(
    const tCIDLib::TFloat8 f8Lat
    , const tCIDLib::TFloat8 f8Long
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"SetLocInfo");
        ocmdToUse.strmOut() << f8Lat;
        ocmdToUse.strmOut() << f8Long;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

