// ----------------------------------------------------------------------------
//  FILE: CQCEventSrv_ProtoServerBase.cpp
//  DATE: Wed, Jun 26 17:43:39 2019 -0400
//    ID: A57BF7129F2FC717-185A358D14B4D696
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCEventSrv.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
RTTIDecls(TEventSrvServerBase,TOrbServerBase)


// ----------------------------------------------------------------------------
// Public, static data
// ----------------------------------------------------------------------------
const TString TEventSrvServerBase::strInterfaceId(L"A57BF7129F2FC717-185A358D14B4D696");
const TString TEventSrvServerBase::strBinding(L"/CQC/CQCEventSrv/EventServerObj");
const TString TEventSrvServerBase::strRTVEventText(L"EvRTV:EventText");
const TString TEventSrvServerBase::strCoreAdminBinding(L"/CQC/CQCEventSrv/CoreAdmin");


// ----------------------------------------------------------------------------
// TEventSrvServerBase: Destructor
// ----------------------------------------------------------------------------
TEventSrvServerBase::~TEventSrvServerBase()
{
}

// ----------------------------------------------------------------------------
// TEventSrvServerBase: Protected Constructors
// ----------------------------------------------------------------------------
TEventSrvServerBase::TEventSrvServerBase() :
    TOrbServerBase(strInterfaceId, L"TEventSrvClientProxy" )
{
}

TEventSrvServerBase::TEventSrvServerBase(const TOrbObjId& ooidThis) :
    TOrbServerBase(ooidThis)
{
}

// ----------------------------------------------------------------------------
// TEventSrvServerBase: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TEventSrvServerBase::Dispatch(const TString& strMethodName, TOrbCmd& orbcToDispatch)
{
    if (strMethodName == L"DumpEvents")
    {
        TString strTarFile;
        orbcToDispatch.strmIn() >> strTarFile;
        DumpEvents
        (
            strTarFile
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"AddEvent")
    {
        tCQCKit::EEvSrvTypes eEventType;
        orbcToDispatch.strmIn() >> eEventType;
        TString strRelPath;
        orbcToDispatch.strmIn() >> strRelPath;
        tCIDLib::TCard4 c4ChangeSerNum;
        orbcToDispatch.strmIn() >> c4ChangeSerNum;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        AddEvent
        (
            eEventType
          , strRelPath
          , c4ChangeSerNum
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4ChangeSerNum;
    }
     else if (strMethodName == L"DeleteEvent")
    {
        tCQCKit::EEvSrvTypes eEventType;
        orbcToDispatch.strmIn() >> eEventType;
        TString strRelPath;
        orbcToDispatch.strmIn() >> strRelPath;
        tCIDLib::TCard4 c4ChangeSerNum;
        orbcToDispatch.strmIn() >> c4ChangeSerNum;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        DeleteEvent
        (
            eEventType
          , strRelPath
          , c4ChangeSerNum
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4ChangeSerNum;
    }
     else if (strMethodName == L"PauseEvent")
    {
        tCQCKit::EEvSrvTypes eEventType;
        orbcToDispatch.strmIn() >> eEventType;
        TString strRelPath;
        orbcToDispatch.strmIn() >> strRelPath;
        tCIDLib::TCard4 c4ChangeSerNum;
        orbcToDispatch.strmIn() >> c4ChangeSerNum;
        tCIDLib::TBoolean bPause;
        orbcToDispatch.strmIn() >> bPause;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        PauseEvent
        (
            eEventType
          , strRelPath
          , c4ChangeSerNum
          , bPause
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4ChangeSerNum;
    }
     else if (strMethodName == L"RenameEvent")
    {
        tCQCKit::EEvSrvTypes eEventType;
        orbcToDispatch.strmIn() >> eEventType;
        TString strRelParPath;
        orbcToDispatch.strmIn() >> strRelParPath;
        TString strOldName;
        orbcToDispatch.strmIn() >> strOldName;
        TString strNewName;
        orbcToDispatch.strmIn() >> strNewName;
        tCIDLib::TCard4 c4ChangeSerNum;
        orbcToDispatch.strmIn() >> c4ChangeSerNum;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        RenameEvent
        (
            eEventType
          , strRelParPath
          , strOldName
          , strNewName
          , c4ChangeSerNum
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4ChangeSerNum;
    }
     else if (strMethodName == L"RenameScope")
    {
        tCQCKit::EEvSrvTypes eEventType;
        orbcToDispatch.strmIn() >> eEventType;
        TString strRelParPath;
        orbcToDispatch.strmIn() >> strRelParPath;
        TString strOldName;
        orbcToDispatch.strmIn() >> strOldName;
        TString strNewName;
        orbcToDispatch.strmIn() >> strNewName;
        tCIDLib::TCard4 c4ChangeSerNum;
        orbcToDispatch.strmIn() >> c4ChangeSerNum;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        RenameScope
        (
            eEventType
          , strRelParPath
          , strOldName
          , strNewName
          , c4ChangeSerNum
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4ChangeSerNum;
    }
     else if (strMethodName == L"UpdateEvent")
    {
        tCQCKit::EEvSrvTypes eEventType;
        orbcToDispatch.strmIn() >> eEventType;
        TString strRelPath;
        orbcToDispatch.strmIn() >> strRelPath;
        tCIDLib::TCard4 c4ChangeSerNum;
        orbcToDispatch.strmIn() >> c4ChangeSerNum;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        UpdateEvent
        (
            eEventType
          , strRelPath
          , c4ChangeSerNum
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4ChangeSerNum;
    }
     else if (strMethodName == L"Ping")
    {
        Ping
        (
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"QueryPerEvInfo")
    {
        TString strPath;
        orbcToDispatch.strmIn() >> strPath;
        tCQCKit::ESchTypes eType;
        tCIDLib::TCard8 enctStart;
        tCIDLib::TCard4 c4Period;
        tCIDLib::TBoolean bPaused;
        QueryPerEvInfo
        (
            strPath
          , eType
          , enctStart
          , c4Period
          , bPaused
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << eType;
        orbcToDispatch.strmOut() << enctStart;
        orbcToDispatch.strmOut() << c4Period;
        orbcToDispatch.strmOut() << bPaused;
    }
     else if (strMethodName == L"QuerySchEvInfo")
    {
        TString strPath;
        orbcToDispatch.strmIn() >> strPath;
        tCQCKit::ESchTypes eType;
        tCIDLib::TCard4 c4Day;
        tCIDLib::TCard4 c4Hour;
        tCIDLib::TCard4 c4Minute;
        tCIDLib::TCard4 c4Mask;
        tCIDLib::TBoolean bPaused;
        QuerySchEvInfo
        (
            strPath
          , eType
          , c4Day
          , c4Hour
          , c4Minute
          , c4Mask
          , bPaused
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << eType;
        orbcToDispatch.strmOut() << c4Day;
        orbcToDispatch.strmOut() << c4Hour;
        orbcToDispatch.strmOut() << c4Minute;
        orbcToDispatch.strmOut() << c4Mask;
        orbcToDispatch.strmOut() << bPaused;
    }
     else if (strMethodName == L"QuerySunBasedEvInfo")
    {
        TString strPath;
        orbcToDispatch.strmIn() >> strPath;
        tCIDLib::TInt4 i4Offset;
        tCIDLib::TBoolean bPaused;
        QuerySunBasedEvInfo
        (
            strPath
          , i4Offset
          , bPaused
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << i4Offset;
        orbcToDispatch.strmOut() << bPaused;
    }
     else if (strMethodName == L"ReloadList")
    {
        tCQCKit::EEvSrvTypes eToReload;
        orbcToDispatch.strmIn() >> eToReload;
        ReloadList
        (
            eToReload
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetLocInfo")
    {
        tCIDLib::TFloat8 f8Lat;
        orbcToDispatch.strmIn() >> f8Lat;
        tCIDLib::TFloat8 f8Long;
        orbcToDispatch.strmIn() >> f8Long;
        TCQCSecToken sectUser;
        orbcToDispatch.strmIn() >> sectUser;
        SetLocInfo
        (
            f8Lat
          , f8Long
          , sectUser
        );
        orbcToDispatch.strmOut().Reset();
    }
     else
    {
         TParent::Dispatch(strMethodName, orbcToDispatch);
    }
}

