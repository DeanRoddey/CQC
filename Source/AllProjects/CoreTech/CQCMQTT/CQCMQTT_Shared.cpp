// ----------------------------------------------------------------------------
//  FILE: CQCMQTT_Shared.cpp
//  DATE: Tue, Jan 19 17:39:55 2021 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

#include "CQCMQTT_.hpp"

const TString kCQCMQTT::strProto_Name(L"MQTT");
const TString kCQCMQTT::strValKey_ClientId(L"ClientId");
const TString kCQCMQTT::strValKey_Password(L"Password");
const TString kCQCMQTT::strValKey_UserName(L"UserName");
const TString kCQCMQTT::strValKey_WillTopic(L"WillTopic");


static TEnumMap::TEnumValItem aeitemValues_EConnAckCodes[6] = 
{
    {  tCIDLib::TInt4(tCQCMQTT::EConnAckCodes::Accept), 0, 0,  { L"", L"", L"", L"Accept", L"EConnAckCodes::Accept", L"Connection Accepted" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EConnAckCodes::ProtoVer), 0, 0,  { L"", L"", L"", L"ProtoVer", L"EConnAckCodes::ProtoVer", L"Bad protocol version" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EConnAckCodes::ClientId), 0, 0,  { L"", L"", L"", L"ClientId", L"EConnAckCodes::ClientId", L"Bad client id" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EConnAckCodes::Unavailable), 0, 0,  { L"", L"", L"", L"Unavailable", L"EConnAckCodes::Unavailable", L"MQTT service unavailable" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EConnAckCodes::Credentials), 0, 0,  { L"", L"", L"", L"Credentials", L"EConnAckCodes::Credentials", L"Invalid name or password" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EConnAckCodes::Unauthorized), 0, 0,  { L"", L"", L"", L"Unauthorized", L"EConnAckCodes::Unauthorized", L"The user is not authorized" } }

};

static TEnumMap emapEConnAckCodes
(
     L"EConnAckCodes"
     , 6
     , kCIDLib::False
     , aeitemValues_EConnAckCodes
     , nullptr
     , tCIDLib::TCard4(tCQCMQTT::EConnAckCodes::Count)
);

const TString& tCQCMQTT::strLoadEConnAckCodes(const tCQCMQTT::EConnAckCodes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEConnAckCodes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}
TTextOutStream& tCQCMQTT::operator<<(TTextOutStream& strmTar, const tCQCMQTT::EConnAckCodes eVal)
{
    strmTar << emapEConnAckCodes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, kCIDLib::False);
    return strmTar;
}
tCIDLib::TBoolean tCQCMQTT::bIsValidEnum(const tCQCMQTT::EConnAckCodes eVal)
{
    return emapEConnAckCodes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EConnFlags[7] = 
{
    {  tCIDLib::TInt4(tCQCMQTT::EConnFlags::CleanSession), 0, 0,  { L"", L"", L"", L"CleanSession", L"EConnFlags::CleanSession", L"" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EConnFlags::WillFlag), 0, 0,  { L"", L"", L"", L"WillFlag", L"EConnFlags::WillFlag", L"" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EConnFlags::WillQOS1), 0, 0,  { L"", L"", L"", L"WillQOS1", L"EConnFlags::WillQOS1", L"" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EConnFlags::WillQOS2), 0, 0,  { L"", L"", L"", L"WillQOS2", L"EConnFlags::WillQOS2", L"" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EConnFlags::WillRetain), 0, 0,  { L"", L"", L"", L"WillRetain", L"EConnFlags::WillRetain", L"" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EConnFlags::Password), 0, 0,  { L"", L"", L"", L"Password", L"EConnFlags::Password", L"" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EConnFlags::UserName), 0, 0,  { L"", L"", L"", L"UserName", L"EConnFlags::UserName", L"" } }

};

static TEnumMap emapEConnFlags
(
     L"EConnFlags"
     , 7
     , kCIDLib::True
     , aeitemValues_EConnFlags
     , nullptr
     , tCIDLib::TCard4(tCQCMQTT::EConnFlags::None)
);

const TString& tCQCMQTT::strLoadEConnFlags(const tCQCMQTT::EConnFlags eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEConnFlags.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}
TTextOutStream& tCQCMQTT::operator<<(TTextOutStream& strmTar, const tCQCMQTT::EConnFlags eVal)
{
    strmTar << emapEConnFlags.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDLib::TBoolean tCQCMQTT::bIsValidEnum(const tCQCMQTT::EConnFlags eVal)
{
    return emapEConnFlags.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EPacketTypes[16] = 
{
    {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::Reserved), 0, 0,  { L"", L"", L"", L"Reserved", L"EPacketTypes::Reserved", L"Reserved 1" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::Connect), 0, 0,  { L"", L"", L"", L"Connect", L"EPacketTypes::Connect", L"Connection" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::ConnAck), 0, 0,  { L"", L"", L"", L"ConnAck", L"EPacketTypes::ConnAck", L"Connection Ack" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::Publish), 0, 0,  { L"", L"", L"", L"Publish", L"EPacketTypes::Publish", L"Publish" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::PubAck), 0, 0,  { L"", L"", L"", L"PubAck", L"EPacketTypes::PubAck", L"Publish Ack" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::PubRec), 0, 0,  { L"", L"", L"", L"PubRec", L"EPacketTypes::PubRec", L"Publish Received" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::PubRel), 0, 0,  { L"", L"", L"", L"PubRel", L"EPacketTypes::PubRel", L"Publish Release" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::PubComp), 0, 0,  { L"", L"", L"", L"PubComp", L"EPacketTypes::PubComp", L"Publish Complete" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::Subscribe), 0, 0,  { L"", L"", L"", L"Subscribe", L"EPacketTypes::Subscribe", L"Topic Subscription" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::SubAck), 0, 0,  { L"", L"", L"", L"SubAck", L"EPacketTypes::SubAck", L"Subscription Ack" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::Unsubscribe), 0, 0,  { L"", L"", L"", L"Unsubscribe", L"EPacketTypes::Unsubscribe", L"Topic Unsubscribe" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::UnsubAck), 0, 0,  { L"", L"", L"", L"UnsubAck", L"EPacketTypes::UnsubAck", L"Unsubscribe Ack" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::PingReq), 0, 0,  { L"", L"", L"", L"PingReq", L"EPacketTypes::PingReq", L"Ping Request" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::PingResp), 0, 0,  { L"", L"", L"", L"PingResp", L"EPacketTypes::PingResp", L"Ping Response" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::Disconnect), 0, 0,  { L"", L"", L"", L"Disconnect", L"EPacketTypes::Disconnect", L"Disconnection" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EPacketTypes::Reserved2), 0, 0,  { L"", L"", L"", L"Reserved2", L"EPacketTypes::Reserved2", L"Reserved 2" } }

};

static TEnumMap emapEPacketTypes
(
     L"EPacketTypes"
     , 16
     , kCIDLib::False
     , aeitemValues_EPacketTypes
     , nullptr
     , tCIDLib::TCard4(tCQCMQTT::EPacketTypes::Count)
);

const TString& tCQCMQTT::strXlatEPacketTypes(const tCQCMQTT::EPacketTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEPacketTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMQTT::EPacketTypes tCQCMQTT::eXlatEPacketTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMQTT::EPacketTypes(emapEPacketTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

TTextOutStream& tCQCMQTT::operator<<(TTextOutStream& strmTar, const tCQCMQTT::EPacketTypes eVal)
{
    strmTar << emapEPacketTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, kCIDLib::False);
    return strmTar;
}
tCIDLib::TBoolean tCQCMQTT::bIsValidEnum(const tCQCMQTT::EPacketTypes eVal)
{
    return emapEPacketTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EQOSLevs[3] = 
{
    {  tCIDLib::TInt4(tCQCMQTT::EQOSLevs::Q0), 0, 0,  { L"", L"", L"", L"Q0", L"EQOSLevs::Q0", L"0" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EQOSLevs::Q1), 0, 0,  { L"", L"", L"", L"Q1", L"EQOSLevs::Q1", L"1" } }
  , {  tCIDLib::TInt4(tCQCMQTT::EQOSLevs::Q2), 0, 0,  { L"", L"", L"", L"Q2", L"EQOSLevs::Q2", L"2" } }

};

static TEnumMap emapEQOSLevs
(
     L"EQOSLevs"
     , 3
     , kCIDLib::False
     , aeitemValues_EQOSLevs
     , nullptr
     , tCIDLib::TCard4(tCQCMQTT::EQOSLevs::Count)
);

const TString& tCQCMQTT::strXlatEQOSLevs(const tCQCMQTT::EQOSLevs eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEQOSLevs.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tCQCMQTT::EQOSLevs tCQCMQTT::eXlatEQOSLevs(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tCQCMQTT::EQOSLevs(emapEQOSLevs.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

TTextOutStream& tCQCMQTT::operator<<(TTextOutStream& strmTar, const tCQCMQTT::EQOSLevs eVal)
{
    strmTar << emapEQOSLevs.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, kCIDLib::False);
    return strmTar;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tCQCMQTT::EQOSLevs* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tCQCMQTT::EQOSLevs(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tCQCMQTT::EQOSLevs* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tCQCMQTT::bIsValidEnum(const tCQCMQTT::EQOSLevs eVal)
{
    return emapEQOSLevs.bIsValidEnum(tCIDLib::TCard4(eVal));

}

