// ----------------------------------------------------------------------------
//  FILE: LutronHWC_Data.cpp
//  DATE: Fri, Feb 14 18:49:47 2020 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

#include "LutronHWC_.hpp"

const TString kLutronHWC::strAttr_Addr(L"/Attr/Addr");
const TString kLutronHWC::strAttr_Name(L"/Attr/Name");
const TString kLutronHWC::strAttr_Number(L"/Attr/Number");


static TEnumMap::TEnumValItem aeitemValues_EListCols[4] = 
{
    {  tCIDLib::TInt4(tLutronHWC::EListCols::Type), 0, 0,  { L"", L"", L"", L"Type", L"EListCols::Type", L"" } }
  , {  tCIDLib::TInt4(tLutronHWC::EListCols::Name), 0, 0,  { L"", L"", L"", L"Name", L"EListCols::Name", L"" } }
  , {  tCIDLib::TInt4(tLutronHWC::EListCols::Address), 0, 0,  { L"", L"", L"", L"Address", L"EListCols::Address", L"" } }
  , {  tCIDLib::TInt4(tLutronHWC::EListCols::Number), 0, 0,  { L"", L"", L"", L"Number", L"EListCols::Number", L"" } }

};

static TEnumMap emapEListCols
(
     L"EListCols"
     , 4
     , kCIDLib::False
     , aeitemValues_EListCols
     , nullptr
     , tCIDLib::TCard4(tLutronHWC::EListCols::Count)
);

const TString& tLutronHWC::strXlatEListCols(const tLutronHWC::EListCols eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEListCols.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tLutronHWC::EListCols tLutronHWC::eXlatEListCols(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tLutronHWC::EListCols(emapEListCols.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tLutronHWC::EListCols operator++(tLutronHWC::EListCols& eVal, int)
{
    tLutronHWC::EListCols eTmp = eVal;
    eVal = tLutronHWC::EListCols(int(eVal)+1);
    return eTmp;
}

tCIDLib::TBoolean tLutronHWC::bIsValidEnum(const tLutronHWC::EListCols eVal)
{
    return emapEListCols.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EItemTypes[3] = 
{
    {  tCIDLib::TInt4(tLutronHWC::EItemTypes::Button), 0, 0,  { L"", L"", L"", L"Button", L"EItemTypes::Button", L"" } }
  , {  tCIDLib::TInt4(tLutronHWC::EItemTypes::Dimmer), 0, 0,  { L"", L"", L"", L"Dimmer", L"EItemTypes::Dimmer", L"" } }
  , {  tCIDLib::TInt4(tLutronHWC::EItemTypes::LED), 0, 0,  { L"", L"", L"", L"LED", L"EItemTypes::LED", L"" } }

};

static TEnumMap emapEItemTypes
(
     L"EItemTypes"
     , 3
     , kCIDLib::False
     , aeitemValues_EItemTypes
     , nullptr
     , tCIDLib::TCard4(tLutronHWC::EItemTypes::Count)
);

const TString& tLutronHWC::strXlatEItemTypes(const tLutronHWC::EItemTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEItemTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tLutronHWC::EItemTypes tLutronHWC::eXlatEItemTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tLutronHWC::EItemTypes(emapEItemTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TTextOutStream& operator<<(TTextOutStream& strmTar, const tLutronHWC::EItemTypes eVal)
{
    strmTar << emapEItemTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tLutronHWC::EItemTypes operator++(tLutronHWC::EItemTypes& eVal, int)
{
    tLutronHWC::EItemTypes eTmp = eVal;
    eVal = tLutronHWC::EItemTypes(int(eVal)+1);
    return eTmp;
}

tCIDLib::TBoolean tLutronHWC::bIsValidEnum(const tLutronHWC::EItemTypes eVal)
{
    return emapEItemTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}

