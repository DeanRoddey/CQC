// ----------------------------------------------------------------------------
//  FILE: LutronHWC_Data.hpp
//  DATE: Tue, Jan 19 17:39:56 2021 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------
#pragma once

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Constants namespace
// ----------------------------------------------------------------------------
namespace kLutronHWC
{
    
    // ------------------------------------------------------------------------
    //  Identifiers for the values we allow the user to edit via the in-place
    //  editing mechanism.
    //                  
    // ------------------------------------------------------------------------
     const extern TString strAttr_Addr;
     const extern TString strAttr_Name;
     const extern TString strAttr_Number;
}

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tLutronHWC
{
    
    // ------------------------------------------------------------------------
    //  The column indices in the multi-column list box. This lets everyone
    //  easily agree on what data is where. We also use this as the column
    //  titles.
    //                  
    // ------------------------------------------------------------------------
    enum class EListCols
    {
        Type
        , Name
        , Address
        , Number
        , Count
        , Min = Type
        , Max = Number
    };
    [[nodiscard]]  EListCols eXlatEListCols(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]]  const TString& strXlatEListCols(const EListCols eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    [[nodiscard]]  tCIDLib::TBoolean bIsValidEnum(const EListCols eVal);

    inline tLutronHWC::EListCols operator++(tLutronHWC::EListCols& eVal, int)
    {
        tLutronHWC::EListCols eTmp = eVal;
        eVal = tLutronHWC::EListCols(int(eVal)+1);
        return eTmp;
    }

    
    // ------------------------------------------------------------------------
    //  This list of item types we currently support.
    //  
    //  THESE MUST be in the order that they are in the file, since we added
    //  more over time and need to be able to use this enum to know when we have
    //  gotten all we are going to get from a given version of the file. They are
    //  in alphabetical order, but that's pure coincidence so far.
    //                  
    // ------------------------------------------------------------------------
    enum class EItemTypes
    {
        Button
        , Dimmer
        , LED
        , Count
        , Min = Button
        , Max = LED
    };
    [[nodiscard]]  EItemTypes eXlatEItemTypes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]]  const TString& strXlatEItemTypes(const EItemTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    [[nodiscard]]  tCIDLib::TBoolean bIsValidEnum(const EItemTypes eVal);

    inline tLutronHWC::EItemTypes operator++(tLutronHWC::EItemTypes& eVal, int)
    {
        tLutronHWC::EItemTypes eTmp = eVal;
        eVal = tLutronHWC::EItemTypes(int(eVal)+1);
        return eTmp;
    }

     TTextOutStream& operator<<(TTextOutStream& strmTar, const tLutronHWC::EItemTypes eToStream);
}

#pragma CIDLIB_POPPACK



