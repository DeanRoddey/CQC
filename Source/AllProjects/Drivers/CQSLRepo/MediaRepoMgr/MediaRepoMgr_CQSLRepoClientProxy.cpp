// ----------------------------------------------------------------------------
//  FILE: MediaRepoMgr_CQSLRepoClientProxy.cpp
//  DATE: Fri, Feb 14 18:49:47 2020 -0500
//    ID: 664424407F8B705F-F0C14316C78994B2
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "MediaRepoMgr.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
AdvRTTIDecls(TCQSLRepoMgrClientProxy,TOrbClientBase)


// ----------------------------------------------------------------------------
// TCQSLRepoMgrClientProxy: Public, static data
// ----------------------------------------------------------------------------
const TString TCQSLRepoMgrClientProxy::strInterfaceId(L"664424407F8B705F-F0C14316C78994B2");
const TString TCQSLRepoMgrClientProxy::strBindingName(L"MgrIntf");
const TString TCQSLRepoMgrClientProxy::strBindingScope(L"/CQC/CQSLRepo/%(m)");



// ----------------------------------------------------------------------------
// TCQSLRepoMgrClientProxy: Constructors and Destructor
// ----------------------------------------------------------------------------
TCQSLRepoMgrClientProxy::TCQSLRepoMgrClientProxy()
{
}

TCQSLRepoMgrClientProxy::
TCQSLRepoMgrClientProxy(const TOrbObjId& ooidSrc, const TString& strNSBinding)
{
    #if CID_DEBUG_ON
    if (!ooidSrc.oidKey().bIsInterfaceId(strInterfaceId))
    {
        facCIDOrb().ThrowErr
        (
            CID_FILE
            , CID_LINE
            , kOrbErrs::errcClient_BadIntfId
            , tCIDLib::ESeverities::Failed
            , tCIDLib::EErrClasses::BadParms
            , ooidSrc.oidKey().mhashInterface()
            , strInterfaceId
        );
    }
    #endif
    SetObjId(ooidSrc, strNSBinding, kCIDLib::False);
}

TCQSLRepoMgrClientProxy::~TCQSLRepoMgrClientProxy()
{
}

// ----------------------------------------------------------------------------
// TCQSLRepoMgrClientProxy: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TBoolean TCQSLRepoMgrClientProxy::bGetLease
(
    const TString& strLeaseId
    , const tCIDLib::TBoolean bOverride)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bGetLease");
        ocmdToUse.strmOut() << strLeaseId;
        ocmdToUse.strmOut() << bOverride;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQSLRepoMgrClientProxy::bQueryArtById
(
    const tCQCMedia::EMediaTypes eMediaType
    , const tCQCMedia::ERArtTypes eArtType
    , const tCIDLib::TCard4 c4Id
    , tCIDLib::TCard4& c4BufSz_mbufArt
    , THeapBuf& mbufArt
    , const tCIDLib::TBoolean bThrowIfNot)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryArtById");
        ocmdToUse.strmOut() << eMediaType;
        ocmdToUse.strmOut() << eArtType;
        ocmdToUse.strmOut() << c4Id;
        ocmdToUse.strmOut() << bThrowIfNot;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> c4BufSz_mbufArt;
        ocmdToUse.strmIn().c4ReadBuffer(mbufArt, c4BufSz_mbufArt);
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQSLRepoMgrClientProxy::bQueryDB
(
    tCIDLib::TCard4& c4BufSz_mbufComp
    , THeapBuf& mbufComp
    , const TString& strDBSerNum
    , TString& strRepoPath)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryDB");
        ocmdToUse.strmOut() << strDBSerNum;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> c4BufSz_mbufComp;
        ocmdToUse.strmIn().c4ReadBuffer(mbufComp, c4BufSz_mbufComp);
        ocmdToUse.strmIn() >> strRepoPath;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQSLRepoMgrClientProxy::bStartUpload
(
    const TString& strLeaseId
    , const tCIDLib::TCard4 c4DBSize
    , const tCIDLib::TCard4 c4ImgCount
    , const tCIDLib::TCard4 c4TrackCount
    , TString& strHostUpload
    , tCIDLib::TCard4& ippnUpload
    , tCIDLib::TCard4& c4Cookie)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bStartUpload");
        ocmdToUse.strmOut() << strLeaseId;
        ocmdToUse.strmOut() << c4DBSize;
        ocmdToUse.strmOut() << c4ImgCount;
        ocmdToUse.strmOut() << c4TrackCount;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> strHostUpload;
        ocmdToUse.strmIn() >> ippnUpload;
        ocmdToUse.strmIn() >> c4Cookie;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TVoid TCQSLRepoMgrClientProxy::DropLease
(
    const TString& strLeaseId)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"DropLease");
        ocmdToUse.strmOut() << strLeaseId;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQSLRepoMgrClientProxy::QueryChangers
(
    TVector<TString>& colMonikersToFill)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryChangers");
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> colMonikersToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

