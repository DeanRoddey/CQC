// ----------------------------------------------------------------------------
//  FILE: HAIOmniTCP2Sh_Shared.hpp
//  DATE: Fri, Feb 14 18:49:47 2020 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------
#pragma once

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Constants namespace
// ----------------------------------------------------------------------------
namespace kHAIOmniTCP2Sh
{
    
    // ------------------------------------------------------------------------
    //  The maximum number of various types of supporting hardware modules
    //  that we have to deal with.
    //  
    //  These are persisted, so add new ones at the end
    //                  
    // ------------------------------------------------------------------------
    constexpr tCIDLib::TCard4 c4MaxAreas = 8;
    constexpr tCIDLib::TCard4 c4MaxButtons = 128;
    constexpr tCIDLib::TCard4 c4MaxEnclosures = 8;
    constexpr tCIDLib::TCard4 c4MaxExps = 8;
    constexpr tCIDLib::TCard4 c4MaxMsgs = 128;
    constexpr tCIDLib::TCard4 c4MaxThermos = 64;
    constexpr tCIDLib::TCard4 c4MaxUnits = 511;
    constexpr tCIDLib::TCard4 c4MaxZones = 176;
}

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tHAIOmniTCP2Sh
{
    
    // ------------------------------------------------------------------------
    //  These are the types of alarm types this Omni supported.
    //                  
    // ------------------------------------------------------------------------
    enum class EAlarmTypes
    {
        Burglary
        , Fire
        , Gas
        , Auxillary
        , Freeze
        , Water
        , Duress
        , Temperature
        , Unknown
        , Count
        , Min = Burglary
        , Max = Unknown
    };
    HAIOMNITCP2SHEXP EAlarmTypes eXlatEAlarmTypes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    HAIOMNITCP2SHEXP const TString& strXlatEAlarmTypes(const EAlarmTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    HAIOMNITCP2SHEXP tCIDLib::TBoolean bIsValidEnum(const EAlarmTypes eVal);

    
    // ------------------------------------------------------------------------
    //  These are the area arming modes supported
    //                  
    // ------------------------------------------------------------------------
    enum class EArmModes
    {
        Off
        , Day
        , Night
        , Away
        , Vacation
        , DayInstant
        , NightDelay
        , Count
        , Min = Off
        , Max = NightDelay
    };
    HAIOMNITCP2SHEXP EArmModes eXlatEArmModes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    HAIOMNITCP2SHEXP const TString& strXlatEArmModes(const EArmModes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    HAIOMNITCP2SHEXP tCIDLib::TVoid FormatEArmModes
        (
                         TString&            strTarget
              , const    TString&            strPrefix
              , const    tCIDLib::TCh        chSepChar
              , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::BaseName
        );
    HAIOMNITCP2SHEXP tCIDLib::TBoolean bIsValidEnum(const EArmModes eVal);

    
    // ------------------------------------------------------------------------
    //  These are the fan modes supported
    //                  
    // ------------------------------------------------------------------------
    enum class EFanModes
    {
        Auto
        , On
        , Cycle
        , Count
        , Min = Auto
        , Max = Cycle
    };
    HAIOMNITCP2SHEXP EFanModes eXlatEFanModes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    HAIOMNITCP2SHEXP const TString& strXlatEFanModes(const EFanModes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    HAIOMNITCP2SHEXP tCIDLib::TVoid FormatEFanModes
        (
                         TString&            strTarget
              , const    TString&            strPrefix
              , const    tCIDLib::TCh        chSepChar
              , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::BaseName
        );
    HAIOMNITCP2SHEXP tCIDLib::TBoolean bIsValidEnum(const EFanModes eVal);

    
    // ------------------------------------------------------------------------
    //  These are the types of modules we support. These are persisted,
    //  so add new ones at the end.
    //                  
    // ------------------------------------------------------------------------
    enum class EItemTypes
    {
        Unknown
        , Area
        , Button
        , Code
        , Msg
        , Thermo
        , Unit
        , Zone
        , Count
        , Min = Unknown
        , Max = Zone
    };
    HAIOMNITCP2SHEXP EItemTypes eXlatEItemTypes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    HAIOMNITCP2SHEXP const TString& strXlatEItemTypes(const EItemTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    HAIOMNITCP2SHEXP tCIDLib::TBoolean bIsValidEnum(const EItemTypes eVal);

    
    // ------------------------------------------------------------------------
    //  These are the thermostat modes supported.
    //                  
    // ------------------------------------------------------------------------
    enum class EThermoModes
    {
        Off
        , Heat
        , Cool
        , Auto
        , EmHeat
        , Count
        , Min = Off
        , Max = EmHeat
    };
    HAIOMNITCP2SHEXP EThermoModes eXlatEThermoModes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    HAIOMNITCP2SHEXP const TString& strXlatEThermoModes(const EThermoModes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    HAIOMNITCP2SHEXP tCIDLib::TVoid FormatEThermoModes
        (
                         TString&            strTarget
              , const    TString&            strPrefix
              , const    tCIDLib::TCh        chSepChar
              , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::Text
        );
    HAIOMNITCP2SHEXP tCIDLib::TBoolean bIsValidEnum(const EThermoModes eVal);

    
    // ------------------------------------------------------------------------
    //  These are the types of thermos, which we get from the Omni or
    //  user. It tells us what capabilities it has.
    //                  
    // ------------------------------------------------------------------------
    enum class EThermoTypes
    {
        Unused
        , AutoHC
        , HeatCool
        , Heat
        , Cool
        , SP
        , Count
        , Min = Unused
        , Max = SP
    };
    HAIOMNITCP2SHEXP EThermoTypes eXlatEThermoTypes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    HAIOMNITCP2SHEXP const TString& strXlatEThermoTypes(const EThermoTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    HAIOMNITCP2SHEXP tCIDLib::TBoolean bIsValidEnum(const EThermoTypes eVal);

    
    // ------------------------------------------------------------------------
    //  Used in units to indicate what type of unit. Unused needs to be the
    //  first value, so that it comes out zero!
    //  
    //  Add new ones at the end! These are presisted.
    //                  
    // ------------------------------------------------------------------------
    enum class EUnitTypes
    {
        Unused
        , Dimmer
        , Flag
        , Switch
        , Count
        , Min = Unused
        , Max = Switch
    };
    HAIOMNITCP2SHEXP EUnitTypes eXlatEUnitTypes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    HAIOMNITCP2SHEXP const TString& strXlatEUnitTypes(const EUnitTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    HAIOMNITCP2SHEXP tCIDLib::TBoolean bIsValidEnum(const EUnitTypes eVal);

    
    // ------------------------------------------------------------------------
    //  The zone arming modes
    //                  
    // ------------------------------------------------------------------------
    enum class EZoneArmModes
    {
        Disarmed
        , Armed
        , BypassUser
        , BypassSystem
        , Count
        , Min = Disarmed
        , Max = BypassSystem
    };
    HAIOMNITCP2SHEXP EZoneArmModes eXlatEZoneArmModes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    HAIOMNITCP2SHEXP const TString& strXlatEZoneArmModes(const EZoneArmModes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    HAIOMNITCP2SHEXP tCIDLib::TVoid FormatEZoneArmModes
        (
                         TString&            strTarget
              , const    TString&            strPrefix
              , const    tCIDLib::TCh        chSepChar
              , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::BaseName
        );
    HAIOMNITCP2SHEXP tCIDLib::TBoolean bIsValidEnum(const EZoneArmModes eVal);

    
    // ------------------------------------------------------------------------
    //  The zone latching modes
    //                  
    // ------------------------------------------------------------------------
    enum class EZoneLatch
    {
        Secure
        , Tripped
        , Reset
        , Count
        , Min = Secure
        , Max = Reset
    };
    HAIOMNITCP2SHEXP EZoneLatch eXlatEZoneLatch(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    HAIOMNITCP2SHEXP const TString& strXlatEZoneLatch(const EZoneLatch eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    HAIOMNITCP2SHEXP tCIDLib::TVoid FormatEZoneLatch
        (
                         TString&            strTarget
              , const    TString&            strPrefix
              , const    tCIDLib::TCh        chSepChar
              , const    TEnumMap::ETextVals eVal = TEnumMap::ETextVals::BaseName
        );
    HAIOMNITCP2SHEXP tCIDLib::TBoolean bIsValidEnum(const EZoneLatch eVal);

    
    // ------------------------------------------------------------------------
    //  Used in zones to indicate what type of zone. Unused needs to be the
    //  first value, so that it comes out zero! There are other zone types
    //  but these are the only ones we support for now.
    //  
    //  Add new ones at the end! These are presisted.
    //                  
    // ------------------------------------------------------------------------
    enum class EZoneTypes
    {
        Unused
        , Alarm
        , Fire
        , Humidity
        , Intrusion
        , Motion
        , Temp
        , Water
        , Count
        , Min = Unused
        , Max = Water
    };
    HAIOMNITCP2SHEXP EZoneTypes eXlatEZoneTypes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    HAIOMNITCP2SHEXP const TString& strXlatEZoneTypes(const EZoneTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    HAIOMNITCP2SHEXP tCIDLib::TBoolean bIsValidEnum(const EZoneTypes eVal);

}

#pragma CIDLIB_POPPACK

HAIOMNITCP2SHEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EAlarmTypes eToStream);
HAIOMNITCP2SHEXP TBinInStream& operator>>(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EAlarmTypes& eToFill);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EAlarmTypes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EAlarmTypes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tHAIOmniTCP2Sh::EAlarmTypes operator++(tHAIOmniTCP2Sh::EAlarmTypes& eVal, int);

HAIOMNITCP2SHEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EArmModes eToStream);
HAIOMNITCP2SHEXP TBinInStream& operator>>(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EArmModes& eToFill);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EArmModes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EArmModes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tHAIOmniTCP2Sh::EArmModes operator++(tHAIOmniTCP2Sh::EArmModes& eVal, int);

HAIOMNITCP2SHEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EFanModes eToStream);
HAIOMNITCP2SHEXP TBinInStream& operator>>(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EFanModes& eToFill);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EFanModes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EFanModes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tHAIOmniTCP2Sh::EFanModes operator++(tHAIOmniTCP2Sh::EFanModes& eVal, int);

HAIOMNITCP2SHEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EItemTypes eToStream);
HAIOMNITCP2SHEXP TBinInStream& operator>>(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EItemTypes& eToFill);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EItemTypes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EItemTypes* const aeList, const tCIDLib::TCard4 c4Count);

HAIOMNITCP2SHEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EThermoModes eToStream);
HAIOMNITCP2SHEXP TBinInStream& operator>>(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EThermoModes& eToFill);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EThermoModes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EThermoModes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tHAIOmniTCP2Sh::EThermoModes operator++(tHAIOmniTCP2Sh::EThermoModes& eVal, int);

HAIOMNITCP2SHEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EThermoTypes eToStream);
HAIOMNITCP2SHEXP TBinInStream& operator>>(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EThermoTypes& eToFill);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EThermoTypes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EThermoTypes* const aeList, const tCIDLib::TCard4 c4Count);

HAIOMNITCP2SHEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EUnitTypes eToStream);
HAIOMNITCP2SHEXP TBinInStream& operator>>(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EUnitTypes& eToFill);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EUnitTypes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EUnitTypes* const aeList, const tCIDLib::TCard4 c4Count);

HAIOMNITCP2SHEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EZoneArmModes eToStream);
HAIOMNITCP2SHEXP TBinInStream& operator>>(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EZoneArmModes& eToFill);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EZoneArmModes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EZoneArmModes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tHAIOmniTCP2Sh::EZoneArmModes operator++(tHAIOmniTCP2Sh::EZoneArmModes& eVal, int);

HAIOMNITCP2SHEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EZoneLatch eToStream);
HAIOMNITCP2SHEXP TBinInStream& operator>>(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EZoneLatch& eToFill);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EZoneLatch* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EZoneLatch* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tHAIOmniTCP2Sh::EZoneLatch operator++(tHAIOmniTCP2Sh::EZoneLatch& eVal, int);

HAIOMNITCP2SHEXP TBinOutStream& operator<<(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EZoneTypes eToStream);
HAIOMNITCP2SHEXP TBinInStream& operator>>(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EZoneTypes& eToFill);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tHAIOmniTCP2Sh::EZoneTypes* const aeList, const tCIDLib::TCard4 c4Count);
HAIOMNITCP2SHEXP tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tHAIOmniTCP2Sh::EZoneTypes* const aeList, const tCIDLib::TCard4 c4Count);

