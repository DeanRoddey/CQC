// ----------------------------------------------------------------------------
//  FILE: MQTTSh_Shared.hpp
//  DATE: Fri, Feb 12 21:14:16 2021 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------
#pragma once

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Constants namespace
// ----------------------------------------------------------------------------
namespace kMQTTSh
{
    constexpr tCIDLib::TCard4 c4CurCfgVer = 1;
}

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tMQTTSh
{
    
    // ------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    enum class EClStates
    {
        LoadConfig
        , Initialize
        , WaitServer
        , Connecting
        , Subscribing
        , Ready
        , Disconnecting
        , Disconnected
        , Count
        , Min = LoadConfig
        , Max = Disconnected
    };
    MQTTSHEXPORT const TString& strLoadEClStates(const EClStates eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] MQTTSHEXPORT tCIDLib::TBoolean bIsValidEnum(const EClStates eVal);

    MQTTSHEXPORT TTextOutStream& operator<<(TTextOutStream& strmTar, const tMQTTSh::EClStates eToStream);
    
    // ------------------------------------------------------------------------
    //  The translation directions for value maps
    //                  
    // ------------------------------------------------------------------------
    enum class EMapDirs
    {
        In
        , Out
        , InOut
        , Count
        , Min = In
        , Max = InOut
    };
    [[nodiscard]] MQTTSHEXPORT EMapDirs eXlatEMapDirs(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] MQTTSHEXPORT const TString& strXlatEMapDirs(const EMapDirs eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    [[nodiscard]] MQTTSHEXPORT tCIDLib::TBoolean bIsValidEnum(const EMapDirs eVal);

    
    // ------------------------------------------------------------------------
    //  The input value mapping stuff returns these values. We can't
    //  just do a boolean because in some cases they want to ignore a msg
    //  that doesn't actually contain info they want to store or a bad
    //  value.
    //                  
    // ------------------------------------------------------------------------
    enum class EInMapRes
    {
        BadVal
        , NotFound
        , Ignore
        , GoodVal
        , Count
        , Min = BadVal
        , Max = GoodVal
    };
    [[nodiscard]] MQTTSHEXPORT EInMapRes eXlatEInMapRes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] MQTTSHEXPORT const TString& strXlatEInMapRes(const EInMapRes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    [[nodiscard]] MQTTSHEXPORT tCIDLib::TBoolean bIsValidEnum(const EInMapRes eVal);

    
    // ------------------------------------------------------------------------
    //  Passed to the trace file methods to indicate who is logging
    //  the msg.
    //                  
    // ------------------------------------------------------------------------
    enum class EMsgSrcs
    {
        None
        , Driver
        , IOThread
        , Count
        , Min = None
        , Max = IOThread
    };
    [[nodiscard]] MQTTSHEXPORT tCIDLib::TBoolean bIsValidEnum(const EMsgSrcs eVal);

    MQTTSHEXPORT TTextOutStream& operator<<(TTextOutStream& strmTar, const tMQTTSh::EMsgSrcs eToStream);
    
    // ------------------------------------------------------------------------
    //  Used by the data representation class to define the basic
    //  format of the payload data. These match the values in the DTD
    //  for the PLType attribute.
    //  
    //  BinText means it's text, but not legal MQTT text, it's just
    //  the characters as raw binary bytes.
    //                  
    // ------------------------------------------------------------------------
    enum class EPLTypes
    {
        BinText
        , Card
        , Int
        , Text
        , Count
        , Min = BinText
        , Max = Text
    };
    [[nodiscard]] MQTTSHEXPORT EPLTypes eXlatEPLTypes(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
    [[nodiscard]] MQTTSHEXPORT const TString& strXlatEPLTypes(const EPLTypes eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
    [[nodiscard]] MQTTSHEXPORT tCIDLib::TBoolean bIsValidEnum(const EPLTypes eVal);

    MQTTSHEXPORT TTextOutStream& operator<<(TTextOutStream& strmTar, const tMQTTSh::EPLTypes eToStream);
}

#pragma CIDLIB_POPPACK






