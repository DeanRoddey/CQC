// ----------------------------------------------------------------------------
//  FILE: ZWaveUSB3S_Internal.cpp
//  DATE: Fri, Feb 14 18:49:47 2020 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

#include "ZWaveUSB3S_.hpp"



static TEnumMap::TEnumValItem aeitemValues_EIOStates[9] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3S::EIOStates::Idle), 0, 0,  { L"", L"", L"", L"Idle", L"EIOStates::Idle", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3S::EIOStates::WaitPingAck), 0, 0,  { L"", L"", L"", L"WaitPingAck", L"EIOStates::WaitPingAck", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3S::EIOStates::WaitPingTransAck), 0, 0,  { L"", L"", L"", L"WaitPingTransAck", L"EIOStates::WaitPingTransAck", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3S::EIOStates::WaitNonceAck), 0, 0,  { L"", L"", L"", L"WaitNonceAck", L"EIOStates::WaitNonceAck", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3S::EIOStates::WaitNonceTransAck), 0, 0,  { L"", L"", L"", L"WaitNonceTransAck", L"EIOStates::WaitNonceTransAck", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3S::EIOStates::WaitNonce), 0, 0,  { L"", L"", L"", L"WaitNonce", L"EIOStates::WaitNonce", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3S::EIOStates::SendEncrypted), 0, 0,  { L"", L"", L"", L"SendEncrypted", L"EIOStates::SendEncrypted", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3S::EIOStates::WaitAck), 0, 0,  { L"", L"", L"", L"WaitAck", L"EIOStates::WaitAck", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3S::EIOStates::WaitCallback), 0, 0,  { L"", L"", L"", L"WaitCallback", L"EIOStates::WaitCallback", L"" } }

};

static TEnumMap emapEIOStates
(
     L"EIOStates"
     , 9
     , kCIDLib::False
     , aeitemValues_EIOStates
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3S::EIOStates::Count)
);

const TString& tZWaveUSB3S::strXlatEIOStates(const tZWaveUSB3S::EIOStates eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEIOStates.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3S::EIOStates tZWaveUSB3S::eXlatEIOStates(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3S::EIOStates(emapEIOStates.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TBoolean tZWaveUSB3S::bIsValidEnum(const tZWaveUSB3S::EIOStates eVal)
{
    return emapEIOStates.bIsValidEnum(tCIDLib::TCard4(eVal));

}

