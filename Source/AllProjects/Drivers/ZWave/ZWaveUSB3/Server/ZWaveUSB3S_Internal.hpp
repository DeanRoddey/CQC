// ----------------------------------------------------------------------------
//  FILE: ZWaveUSB3S_Internal.hpp
//  DATE: Fri, Feb 14 18:49:47 2020 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------
#pragma once

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tZWaveUSB3S
{
    
    // ------------------------------------------------------------------------
    //  The state machine enum used by the Z-Stick object's state machine. We
    //  define it here so that we can easily log state names.
    //  
    //  Idle              - Not currently sending something, so we can look for
    //                      incoming and more to send
    //  WaitPingAck       - We need to send a ping since the target is a frequent
    //                      listener. We are waiting for the initial ack.
    //  WaitPingTransAck  - We asked for a trans ack and callback, so we are waiting
    //                      for the other node to wake up and ack our ping.
    //  SendNonceReq      - We need to send a nonce request for the current msg,
    //                      though we may already have one in which case we will
    //                      encrypt and jump straight to SendEncrypted.
    //  WaitNonceAck      - We are waiting for a nonce request to get initial ack
    //  WaitNonceTransAck - Got the nonce ack, waiting for the transmission ack
    //  WaitNonce         - Got the trans ack, waiting for the actual nonce
    //  SendEncrypted     - The nonce we received, the pending secure msg is
    //                      encrypted and it is waiting to send
    //  WaitAck           - We send a msg (encrypted or not at this point) and
    //                      are waiting for the ack.
    //  WaitCallback      - If the msg indicates it needs a callback, then we are
    //                      waiting for the callback.
    //                  
    // ------------------------------------------------------------------------
    enum class EIOStates
    {
        Idle
        , WaitPingAck
        , WaitPingTransAck
        , WaitNonceAck
        , WaitNonceTransAck
        , WaitNonce
        , SendEncrypted
        , WaitAck
        , WaitCallback
        , Count
        , Min = Idle
        , Max = WaitCallback
    };
     EIOStates eXlatEIOStates(const TString& strToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::False);
     const TString& strXlatEIOStates(const EIOStates eToXlat, const tCIDLib::TBoolean bThrowIfNot = kCIDLib::True);
     tCIDLib::TBoolean bIsValidEnum(const EIOStates eVal);

}

#pragma CIDLIB_POPPACK


