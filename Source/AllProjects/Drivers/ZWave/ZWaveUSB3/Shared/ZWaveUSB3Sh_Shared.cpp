// ----------------------------------------------------------------------------
//  FILE: ZWaveUSB3Sh_Shared.cpp
//  DATE: Tue, Jan 19 17:39:56 2021 -0500
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

#include "ZWaveUSB3Sh_.hpp"

const TString kZWaveUSB3Sh::strInvokeCmd_EnableTrace(L"ApproveNewUnits");
const TString kZWaveUSB3Sh::strInvokeCmd_FlushTrace(L"FlushTrace");
const TString kZWaveUSB3Sh::strInvokeCmd_RecycleTrace(L"RecycleTrace");
const TString kZWaveUSB3Sh::strInvokeCmd_SetCfgParam(L"SetCfgParam");
const TString kZWaveUSB3Sh::strSendData_ApproveNewUnits(L"ApproveNewUnits");
const TString kZWaveUSB3Sh::strSendData_AssocToDrv(L"/Assoc/ToDrv");
const TString kZWaveUSB3Sh::strSendData_DisableUnit(L"/Cmd/DisableUnit");
const TString kZWaveUSB3Sh::strSendData_DoAutoCfg(L"/Cmd/DoAutoCfg");
const TString kZWaveUSB3Sh::strSendData_ForceRescan(L"/Cmd/ForceRescan");
const TString kZWaveUSB3Sh::strSendData_QueryAssoc(L"/Query/Assoc");
const TString kZWaveUSB3Sh::strSendData_QueryConfig(L"/Poll/Config");
const TString kZWaveUSB3Sh::strSendData_QueryCfgParam(L"/Query/CfgParam");
const TString kZWaveUSB3Sh::strSendData_QueryGrpCnt(L"/Query/GrpCnt");
const TString kZWaveUSB3Sh::strSendData_QueryUnitReport(L"/Query/UnitReport");
const TString kZWaveUSB3Sh::strSendData_QueryRepStatus(L"/Query/RepStatus");
const TString kZWaveUSB3Sh::strSendData_QueryStatusInfo(L"/Poll/StatusInfo");
const TString kZWaveUSB3Sh::strSendData_QueryTraceLevel(L"/Query/TraceLevel");
const TString kZWaveUSB3Sh::strSendData_QueryUnitInfo(L"/Query/UnitInfo");
const TString kZWaveUSB3Sh::strSendData_QueryWakeup(L"/Query/Wakeup");
const TString kZWaveUSB3Sh::strSendData_RemoveAssoc(L"/Assoc/Remove");
const TString kZWaveUSB3Sh::strSendData_Replicate(L"/Cmd/Replicate");
const TString kZWaveUSB3Sh::strSendData_ResetUnitCfg(L"/Cmd/ResetUnitCfg");
const TString kZWaveUSB3Sh::strSendData_SetAssoc(L"/Assoc/Set");
const TString kZWaveUSB3Sh::strSendData_SetConfig(L"/Set/Config");
const TString kZWaveUSB3Sh::strSendData_SetCfgParam(L"/Set/CfgParam");
const TString kZWaveUSB3Sh::strSendData_SetTrace(L"/Set/Trace");
const TString kZWaveUSB3Sh::strSendData_Type(L"DrvDataX");
const TString kZWaveUSB3Sh::strSendData_PollPref(L"/Poll/");
const TString kZWaveUSB3Sh::strCCOpt_Whatever(L"/CCOpt/%(i)/Whatever");
const TString kZWaveUSB3Sh::strCCOpt_Prefix(L"/CCOpt/");
const TString kZWaveUSB3Sh::strUAttr_Prefix(L"/UnitAttr/");
const TString kZWaveUSB3Sh::strUAttr_Name(L"/UnitAttr/Name");
const TString kZWaveUSB3Sh::strUOpt_Prefix(L"/UnitOpt/");
const TString kZWaveUSB3Sh::strUOpt_AsLight(L"/UnitOpt/AsLight");
const TString kZWaveUSB3Sh::strUOpt_CurTempMax(L"/UnitOpt/CurTempMax");
const TString kZWaveUSB3Sh::strUOpt_CurTempMin(L"/UnitOpt/CurTempMin");
const TString kZWaveUSB3Sh::strUOpt_SendTrigger(L"/UnitOpt/SendTrigger");
const TString kZWaveUSB3Sh::strUOpt_TempScale(L"/UnitOpt/TempScale");


static TEnumMap::TEnumValItem aeitemValues_EAeonMSTypes[5] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EAeonMSTypes::Humidity), 0, 0,  { L"", L"", L"", L"Humidity", L"EAeonMSTypes::Humidity", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EAeonMSTypes::Lux), 0, 0,  { L"", L"", L"", L"Lux", L"EAeonMSTypes::Lux", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EAeonMSTypes::Motion), 0, 0,  { L"", L"", L"", L"Motion", L"EAeonMSTypes::Motion", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EAeonMSTypes::Temp), 0, 0,  { L"", L"", L"", L"Temp", L"EAeonMSTypes::Temp", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EAeonMSTypes::UV), 0, 0,  { L"", L"", L"", L"UV", L"EAeonMSTypes::UV", L"" } }

};

static TEnumMap emapEAeonMSTypes
(
     L"EAeonMSTypes"
     , 5
     , kCIDLib::False
     , aeitemValues_EAeonMSTypes
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EAeonMSTypes::Count)
);

const TString& tZWaveUSB3Sh::strXlatEAeonMSTypes(const tZWaveUSB3Sh::EAeonMSTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEAeonMSTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::EAeonMSTypes tZWaveUSB3Sh::eXlatEAeonMSTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EAeonMSTypes(emapEAeonMSTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TTextOutStream& tZWaveUSB3Sh::operator<<(TTextOutStream& strmTar, const tZWaveUSB3Sh::EAeonMSTypes eVal)
{
    strmTar << emapEAeonMSTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EAeonMSTypes eVal)
{
    return emapEAeonMSTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EBinSensorTypes[10] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EBinSensorTypes::CO), 0, 0,  { L"", L"", L"", L"CO", L"EBinSensorTypes::CO", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EBinSensorTypes::CO2), 0, 0,  { L"", L"", L"", L"CO2", L"EBinSensorTypes::CO2", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EBinSensorTypes::Door), 0, 0,  { L"", L"", L"", L"Door", L"EBinSensorTypes::Door", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EBinSensorTypes::Glass), 0, 0,  { L"", L"", L"", L"Glass", L"EBinSensorTypes::Glass", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EBinSensorTypes::Heat), 0, 0,  { L"", L"", L"", L"Heat", L"EBinSensorTypes::Heat", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EBinSensorTypes::Intrusion), 0, 0,  { L"", L"", L"", L"Intrusion", L"EBinSensorTypes::Intrusion", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EBinSensorTypes::Leak), 0, 0,  { L"", L"", L"", L"Leak", L"EBinSensorTypes::Leak", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EBinSensorTypes::Motion), 0, 0,  { L"", L"", L"", L"Motion", L"EBinSensorTypes::Motion", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EBinSensorTypes::Smoke), 0, 0,  { L"", L"", L"", L"Smoke", L"EBinSensorTypes::Smoke", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EBinSensorTypes::Tilt), 0, 0,  { L"", L"", L"", L"Tilt", L"EBinSensorTypes::Tilt", L"" } }

};

static TEnumMap emapEBinSensorTypes
(
     L"EBinSensorTypes"
     , 10
     , kCIDLib::False
     , aeitemValues_EBinSensorTypes
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EBinSensorTypes::Count)
);

tCIDLib::TVoid tZWaveUSB3Sh::FormatEBinSensorTypes(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEBinSensorTypes.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
const TString& tZWaveUSB3Sh::strXlatEBinSensorTypes(const tZWaveUSB3Sh::EBinSensorTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEBinSensorTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::EBinSensorTypes tZWaveUSB3Sh::eXlatEBinSensorTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EBinSensorTypes(emapEBinSensorTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EBinSensorTypes eVal)
{
    return emapEBinSensorTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EBinStates[3] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EBinStates::Error), 0, 0,  { L"", L"", L"", L"Error", L"EBinStates::Error", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EBinStates::Off), 0, 0,  { L"", L"", L"", L"Off", L"EBinStates::Off", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EBinStates::On), 0, 0,  { L"", L"", L"", L"On", L"EBinStates::On", L"" } }

};

static TEnumMap emapEBinStates
(
     L"EBinStates"
     , 3
     , kCIDLib::False
     , aeitemValues_EBinStates
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EBinStates::Count)
);

const TString& tZWaveUSB3Sh::strXlatEBinStates(const tZWaveUSB3Sh::EBinStates eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEBinStates.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::EBinStates tZWaveUSB3Sh::eXlatEBinStates(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EBinStates(emapEBinStates.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EBinStates eVal)
{
    return emapEBinStates.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ECClasses[35] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::None), 0, 0,  { L"", L"", L"", L"None", L"ECClasses::None", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::Association), 133, 0,  { L"", L"", L"", L"Association", L"ECClasses::Association", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::AssocGrpInfo), 89, 0,  { L"", L"", L"", L"AssocGrpInfo", L"ECClasses::AssocGrpInfo", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::Basic), 32, 0,  { L"", L"", L"", L"Basic", L"ECClasses::Basic", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::Battery), 128, 0,  { L"", L"", L"", L"Battery", L"ECClasses::Battery", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::BinSensor), 48, 0,  { L"", L"", L"", L"BinSensor", L"ECClasses::BinSensor", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::BinSwitch), 37, 0,  { L"", L"", L"", L"BinSwitch", L"ECClasses::BinSwitch", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::CentralScene), 91, 0,  { L"", L"", L"", L"CentralScene", L"ECClasses::CentralScene", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::ClrSwitch), 51, 0,  { L"", L"", L"", L"ClrSwitch", L"ECClasses::ClrSwitch", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::Config), 112, 0,  { L"", L"", L"", L"Config", L"ECClasses::Config", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::DoorLock), 98, 0,  { L"", L"", L"", L"DoorLock", L"ECClasses::DoorLock", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::EntryCtrl), 111, 0,  { L"", L"", L"", L"EntryCtrl", L"ECClasses::EntryCtrl", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::Indicator), 135, 0,  { L"", L"", L"", L"Indicator", L"ECClasses::Indicator", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::Lock), 118, 0,  { L"", L"", L"", L"Lock", L"ECClasses::Lock", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::ManSpec), 114, 0,  { L"", L"", L"", L"ManSpec", L"ECClasses::ManSpec", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::Meter), 50, 0,  { L"", L"", L"", L"Meter", L"ECClasses::Meter", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::MultiCh), 96, 0,  { L"", L"", L"", L"MultiCh", L"ECClasses::MultiCh", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::MultiChAssoc), 142, 0,  { L"", L"", L"", L"MultiChAssoc", L"ECClasses::MultiChAssoc", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::MLSensor), 49, 0,  { L"", L"", L"", L"MLSensor", L"ECClasses::MLSensor", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::MLSwitch), 38, 0,  { L"", L"", L"", L"MLSwitch", L"ECClasses::MLSwitch", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::Naming), 119, 0,  { L"", L"", L"", L"Naming", L"ECClasses::Naming", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::Notification), 113, 0,  { L"", L"", L"", L"Notification", L"ECClasses::Notification", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::PowerLev), 115, 0,  { L"", L"", L"", L"PowerLev", L"ECClasses::PowerLev", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::SceneAct), 43, 0,  { L"", L"", L"", L"SceneAct", L"ECClasses::SceneAct", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::SceneActConf), 44, 0,  { L"", L"", L"", L"SceneActConf", L"ECClasses::SceneActConf", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::Security), 152, 0,  { L"", L"", L"", L"Security", L"ECClasses::Security", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::SwitchAll), 39, 0,  { L"", L"", L"", L"SwitchAll", L"ECClasses::SwitchAll", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::ThermoFanMode), 68, 0,  { L"", L"", L"", L"ThermoFanMode", L"ECClasses::ThermoFanMode", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::ThermoFanState), 69, 0,  { L"", L"", L"", L"ThermoFanState", L"ECClasses::ThermoFanState", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::ThermoMode), 64, 0,  { L"", L"", L"", L"ThermoMode", L"ECClasses::ThermoMode", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::ThermoState), 66, 0,  { L"", L"", L"", L"ThermoState", L"ECClasses::ThermoState", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::ThermoSetPnt), 67, 0,  { L"", L"", L"", L"ThermoSetPnt", L"ECClasses::ThermoSetPnt", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::Version), 134, 0,  { L"", L"", L"", L"Version", L"ECClasses::Version", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::Wakeup), 132, 0,  { L"", L"", L"", L"Wakeup", L"ECClasses::Wakeup", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ECClasses::ZWPlusInfo), 94, 0,  { L"", L"", L"", L"ZWPlusInfo", L"ECClasses::ZWPlusInfo", L"" } }

};

static TEnumMap emapECClasses
(
     L"ECClasses"
     , 35
     , kCIDLib::False
     , aeitemValues_ECClasses
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::ECClasses::Count)
);

const TString& tZWaveUSB3Sh::strXlatECClasses(const tZWaveUSB3Sh::ECClasses eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapECClasses.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::ECClasses tZWaveUSB3Sh::eXlatECClasses(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::ECClasses(emapECClasses.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TInt4 tZWaveUSB3Sh::i4AltNumECClasses(const tZWaveUSB3Sh::ECClasses eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapECClasses.i4MapEnumAltNum(tCIDLib::c4EnumOrd(eVal), bThrowIfNot);
}

tZWaveUSB3Sh::ECClasses tZWaveUSB3Sh::eAltNumECClasses(const tCIDLib::TInt4 i4Val, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::ECClasses(emapECClasses.eMapEnumAltNum(i4Val, bThrowIfNot));
}

TTextOutStream& tZWaveUSB3Sh::operator<<(TTextOutStream& strmTar, const tZWaveUSB3Sh::ECClasses eVal)
{
    strmTar << emapECClasses.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tZWaveUSB3Sh::ECClasses* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tZWaveUSB3Sh::ECClasses(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tZWaveUSB3Sh::ECClasses* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::ECClasses eVal)
{
    return emapECClasses.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EDevTypes[5] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EDevTypes::None), 0, 0,  { L"", L"", L"", L"None", L"EDevTypes::None", L"None" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EDevTypes::Controller), 1, 0,  { L"", L"", L"", L"Controller", L"EDevTypes::Controller", L"Controller" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EDevTypes::RoutingSlave), 4, 0,  { L"", L"", L"", L"RoutingSlave", L"EDevTypes::RoutingSlave", L"Routing Slave" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EDevTypes::Slave), 3, 0,  { L"", L"", L"", L"Slave", L"EDevTypes::Slave", L"Slave" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EDevTypes::StaticCtrl), 2, 0,  { L"", L"", L"", L"StaticCtrl", L"EDevTypes::StaticCtrl", L"Static Controller" } }

};

static TEnumMap emapEDevTypes
(
     L"EDevTypes"
     , 5
     , kCIDLib::False
     , aeitemValues_EDevTypes
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EDevTypes::Count)
);

const TString& tZWaveUSB3Sh::strXlatEDevTypes(const tZWaveUSB3Sh::EDevTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEDevTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tZWaveUSB3Sh::EDevTypes tZWaveUSB3Sh::eXlatEDevTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EDevTypes(emapEDevTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

tCIDLib::TInt4 tZWaveUSB3Sh::i4AltNumEDevTypes(const tZWaveUSB3Sh::EDevTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEDevTypes.i4MapEnumAltNum(tCIDLib::c4EnumOrd(eVal), bThrowIfNot);
}

tZWaveUSB3Sh::EDevTypes tZWaveUSB3Sh::eAltNumEDevTypes(const tCIDLib::TInt4 i4Val, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EDevTypes(emapEDevTypes.eMapEnumAltNum(i4Val, bThrowIfNot));
}

TTextOutStream& tZWaveUSB3Sh::operator<<(TTextOutStream& strmTar, const tZWaveUSB3Sh::EDevTypes eVal)
{
    strmTar << emapEDevTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, kCIDLib::False);
    return strmTar;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tZWaveUSB3Sh::EDevTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tZWaveUSB3Sh::EDevTypes(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tZWaveUSB3Sh::EDevTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EDevTypes eVal)
{
    return emapEDevTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EDrvStates[7] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EDrvStates::Startup), 0, 0,  { L"", L"", L"", L"Startup", L"EDrvStates::Startup", L"Preparing driver" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EDrvStates::Replicating), 0, 0,  { L"", L"", L"", L"Replicating", L"EDrvStates::Replicating", L"Replicating from the master" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EDrvStates::SecureJoin), 0, 0,  { L"", L"", L"", L"SecureJoin", L"EDrvStates::SecureJoin", L"Waiting to join secure Z-Wave network" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EDrvStates::RepFailed), 0, 0,  { L"", L"", L"", L"RepFailed", L"EDrvStates::RepFailed", L"Replication failed" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EDrvStates::RepSucceeded), 0, 0,  { L"", L"", L"", L"RepSucceeded", L"EDrvStates::RepSucceeded", L"Replication succeeded" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EDrvStates::PrepUnits), 0, 0,  { L"", L"", L"", L"PrepUnits", L"EDrvStates::PrepUnits", L"Prepping units for processing" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EDrvStates::Ready), 0, 0,  { L"", L"", L"", L"Ready", L"EDrvStates::Ready", L"Ready for processing" } }

};

static TEnumMap emapEDrvStates
(
     L"EDrvStates"
     , 7
     , kCIDLib::False
     , aeitemValues_EDrvStates
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EDrvStates::Count)
);

const TString& tZWaveUSB3Sh::strLoadEDrvStates(const tZWaveUSB3Sh::EDrvStates eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEDrvStates.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}
tCIDLib::TVoid tZWaveUSB3Sh::FormatEDrvStates(TString& strToFill, const TString& strPrefix, const tCIDLib::TCh chSepChar, const TEnumMap::ETextVals eVal)
{
    emapEDrvStates.FormatValues(strToFill, strPrefix, chSepChar, eVal);
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tZWaveUSB3Sh::EDrvStates* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tZWaveUSB3Sh::EDrvStates(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tZWaveUSB3Sh::EDrvStates* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EDrvStates eVal)
{
    return emapEDrvStates.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EGenMSTypes[9] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenMSTypes::Humidity), 0, 0,  { L"", L"", L"", L"Humidity", L"EGenMSTypes::Humidity", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenMSTypes::Lux), 0, 0,  { L"", L"", L"", L"Lux", L"EGenMSTypes::Lux", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenMSTypes::Motion), 0, 0,  { L"", L"", L"", L"Motion", L"EGenMSTypes::Motion", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenMSTypes::Temp), 0, 0,  { L"", L"", L"", L"Temp", L"EGenMSTypes::Temp", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenMSTypes::UV), 0, 0,  { L"", L"", L"", L"UV", L"EGenMSTypes::UV", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenMSTypes::DoorWnd), 0, 0,  { L"", L"", L"", L"DoorWnd", L"EGenMSTypes::DoorWnd", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenMSTypes::DigInput), 0, 0,  { L"", L"", L"", L"DigInput", L"EGenMSTypes::DigInput", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenMSTypes::Voltage), 0, 0,  { L"", L"", L"", L"Voltage", L"EGenMSTypes::Voltage", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenMSTypes::Switch), 0, 0,  { L"", L"", L"", L"Switch", L"EGenMSTypes::Switch", L"" } }

};

static TEnumMap emapEGenMSTypes
(
     L"EGenMSTypes"
     , 9
     , kCIDLib::False
     , aeitemValues_EGenMSTypes
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EGenMSTypes::Count)
);

const TString& tZWaveUSB3Sh::strXlatEGenMSTypes(const tZWaveUSB3Sh::EGenMSTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEGenMSTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::EGenMSTypes tZWaveUSB3Sh::eXlatEGenMSTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EGenMSTypes(emapEGenMSTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TTextOutStream& tZWaveUSB3Sh::operator<<(TTextOutStream& strmTar, const tZWaveUSB3Sh::EGenMSTypes eVal)
{
    strmTar << emapEGenMSTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EGenMSTypes eVal)
{
    return emapEGenMSTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EGenTypes[10] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenTypes::None), 0, 0,  { L"", L"", L"", L"None", L"EGenTypes::None", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenTypes::GenCtrl), 1, 0,  { L"", L"", L"", L"GenCtrl", L"EGenTypes::GenCtrl", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenTypes::BinSensor), 32, 0,  { L"", L"", L"", L"BinSensor", L"EGenTypes::BinSensor", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenTypes::BinSwitch), 16, 0,  { L"", L"", L"", L"BinSwitch", L"EGenTypes::BinSwitch", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenTypes::EntryCtrl), 64, 0,  { L"", L"", L"", L"EntryCtrl", L"EGenTypes::EntryCtrl", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenTypes::MLSensor), 33, 0,  { L"", L"", L"", L"MLSensor", L"EGenTypes::MLSensor", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenTypes::MLSwitch), 17, 0,  { L"", L"", L"", L"MLSwitch", L"EGenTypes::MLSwitch", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenTypes::NotSensor), 7, 0,  { L"", L"", L"", L"NotSensor", L"EGenTypes::NotSensor", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenTypes::StaticCtrl), 2, 0,  { L"", L"", L"", L"StaticCtrl", L"EGenTypes::StaticCtrl", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EGenTypes::Thermo), 8, 0,  { L"", L"", L"", L"Thermo", L"EGenTypes::Thermo", L"" } }

};

static TEnumMap emapEGenTypes
(
     L"EGenTypes"
     , 10
     , kCIDLib::False
     , aeitemValues_EGenTypes
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EGenTypes::Count)
);

const TString& tZWaveUSB3Sh::strXlatEGenTypes(const tZWaveUSB3Sh::EGenTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEGenTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::EGenTypes tZWaveUSB3Sh::eXlatEGenTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EGenTypes(emapEGenTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TInt4 tZWaveUSB3Sh::i4AltNumEGenTypes(const tZWaveUSB3Sh::EGenTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEGenTypes.i4MapEnumAltNum(tCIDLib::c4EnumOrd(eVal), bThrowIfNot);
}

tZWaveUSB3Sh::EGenTypes tZWaveUSB3Sh::eAltNumEGenTypes(const tCIDLib::TInt4 i4Val, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EGenTypes(emapEGenTypes.eMapEnumAltNum(i4Val, bThrowIfNot));
}

TTextOutStream& tZWaveUSB3Sh::operator<<(TTextOutStream& strmTar, const tZWaveUSB3Sh::EGenTypes eVal)
{
    strmTar << emapEGenTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, kCIDLib::False);
    return strmTar;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tZWaveUSB3Sh::EGenTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tZWaveUSB3Sh::EGenTypes(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tZWaveUSB3Sh::EGenTypes* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EGenTypes eVal)
{
    return emapEGenTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ENotEvTypes[2] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::ENotEvTypes::NotEvent), 0, 0,  { L"", L"", L"", L"NotEvent", L"ENotEvTypes::NotEvent", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ENotEvTypes::AlarmLevel), 0, 0,  { L"", L"", L"", L"AlarmLevel", L"ENotEvTypes::AlarmLevel", L"" } }

};

static TEnumMap emapENotEvTypes
(
     L"ENotEvTypes"
     , 2
     , kCIDLib::False
     , aeitemValues_ENotEvTypes
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::ENotEvTypes::Count)
);

const TString& tZWaveUSB3Sh::strXlatENotEvTypes(const tZWaveUSB3Sh::ENotEvTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapENotEvTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::ENotEvTypes tZWaveUSB3Sh::eXlatENotEvTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::ENotEvTypes(emapENotEvTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::ENotEvTypes eVal)
{
    return emapENotEvTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ENotIdTypes[3] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::ENotIdTypes::NotType), 0, 0,  { L"", L"", L"", L"NotType", L"ENotIdTypes::NotType", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ENotIdTypes::AlarmType), 0, 0,  { L"", L"", L"", L"AlarmType", L"ENotIdTypes::AlarmType", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ENotIdTypes::BothNew), 0, 0,  { L"", L"", L"", L"BothNew", L"ENotIdTypes::BothNew", L"" } }

};

static TEnumMap emapENotIdTypes
(
     L"ENotIdTypes"
     , 3
     , kCIDLib::False
     , aeitemValues_ENotIdTypes
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::ENotIdTypes::Count)
);

const TString& tZWaveUSB3Sh::strXlatENotIdTypes(const tZWaveUSB3Sh::ENotIdTypes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapENotIdTypes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::ENotIdTypes tZWaveUSB3Sh::eXlatENotIdTypes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::ENotIdTypes(emapENotIdTypes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::ENotIdTypes eVal)
{
    return emapENotIdTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EMsgPrios[9] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgPrios::Async), 0, 0,  { L"", L"", L"", L"Async", L"EMsgPrios::Async", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgPrios::Query), 0, 0,  { L"", L"", L"", L"Query", L"EMsgPrios::Query", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgPrios::Command), 0, 0,  { L"", L"", L"", L"Command", L"EMsgPrios::Command", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgPrios::Reply), 0, 0,  { L"", L"", L"", L"Reply", L"EMsgPrios::Reply", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgPrios::Wakeup), 0, 0,  { L"", L"", L"", L"Wakeup", L"EMsgPrios::Wakeup", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgPrios::SpecialCmd), 0, 0,  { L"", L"", L"", L"SpecialCmd", L"EMsgPrios::SpecialCmd", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgPrios::Security), 0, 0,  { L"", L"", L"", L"Security", L"EMsgPrios::Security", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgPrios::Nonce), 0, 0,  { L"", L"", L"", L"Nonce", L"EMsgPrios::Nonce", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgPrios::Local), 0, 0,  { L"", L"", L"", L"Local", L"EMsgPrios::Local", L"" } }

};

static TEnumMap emapEMsgPrios
(
     L"EMsgPrios"
     , 9
     , kCIDLib::False
     , aeitemValues_EMsgPrios
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EMsgPrios::Count)
);

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EMsgPrios eVal)
{
    return emapEMsgPrios.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EMsgTypes[8] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgTypes::Unknown), 0, 0,  { L"", L"", L"", L"Unknown", L"EMsgTypes::Unknown", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgTypes::Ack), 0, 0,  { L"", L"", L"", L"Ack", L"EMsgTypes::Ack", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgTypes::Can), 0, 0,  { L"", L"", L"", L"Can", L"EMsgTypes::Can", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgTypes::Nak), 0, 0,  { L"", L"", L"", L"Nak", L"EMsgTypes::Nak", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgTypes::Request), 0, 0,  { L"", L"", L"", L"Request", L"EMsgTypes::Request", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgTypes::Response), 0, 0,  { L"", L"", L"", L"Response", L"EMsgTypes::Response", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgTypes::Timeout), 0, 0,  { L"", L"", L"", L"Timeout", L"EMsgTypes::Timeout", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EMsgTypes::TransAck), 0, 0,  { L"", L"", L"", L"TransAck", L"EMsgTypes::TransAck", L"" } }

};

static TEnumMap emapEMsgTypes
(
     L"EMsgTypes"
     , 8
     , kCIDLib::False
     , aeitemValues_EMsgTypes
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EMsgTypes::Count)
);

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EMsgTypes eVal)
{
    return emapEMsgTypes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_ETScales[3] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::ETScales::Actual), 0, 0,  { L"", L"", L"", L"Actual", L"ETScales::Actual", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ETScales::C), 0, 0,  { L"", L"", L"", L"C", L"ETScales::C", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::ETScales::F), 0, 0,  { L"", L"", L"", L"F", L"ETScales::F", L"" } }

};

static TEnumMap emapETScales
(
     L"ETScales"
     , 3
     , kCIDLib::False
     , aeitemValues_ETScales
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::ETScales::Count)
);

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::ETScales eVal)
{
    return emapETScales.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EThermoModes[15] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::Off), 0, 0,  { L"", L"", L"", L"Off", L"EThermoModes::Off", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::Heat), 1, 0,  { L"", L"", L"", L"Heat", L"EThermoModes::Heat", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::Cool), 2, 0,  { L"", L"", L"", L"Cool", L"EThermoModes::Cool", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::Auto), 3, 0,  { L"", L"", L"", L"Auto", L"EThermoModes::Auto", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::Aux), 4, 0,  { L"", L"", L"", L"Aux", L"EThermoModes::Aux", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::Resume), 5, 0,  { L"", L"", L"", L"Resume", L"EThermoModes::Resume", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::Fan), 6, 0,  { L"", L"", L"", L"Fan", L"EThermoModes::Fan", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::Furnace), 7, 0,  { L"", L"", L"", L"Furnace", L"EThermoModes::Furnace", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::Dry), 8, 0,  { L"", L"", L"", L"Dry", L"EThermoModes::Dry", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::Moist), 9, 0,  { L"", L"", L"", L"Moist", L"EThermoModes::Moist", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::AutoChange), 10, 0,  { L"", L"", L"", L"AutoChange", L"EThermoModes::AutoChange", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::EnergyHeat), 11, 0,  { L"", L"", L"", L"EnergyHeat", L"EThermoModes::EnergyHeat", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::EnergyCool), 12, 0,  { L"", L"", L"", L"EnergyCool", L"EThermoModes::EnergyCool", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::Away), 13, 0,  { L"", L"", L"", L"Away", L"EThermoModes::Away", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoModes::Full), 15, 0,  { L"", L"", L"", L"Full", L"EThermoModes::Full", L"" } }

};

static TEnumMap emapEThermoModes
(
     L"EThermoModes"
     , 15
     , kCIDLib::False
     , aeitemValues_EThermoModes
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EThermoModes::Count)
);

const TString& tZWaveUSB3Sh::strXlatEThermoModes(const tZWaveUSB3Sh::EThermoModes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEThermoModes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::EThermoModes tZWaveUSB3Sh::eXlatEThermoModes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EThermoModes(emapEThermoModes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TInt4 tZWaveUSB3Sh::i4AltNumEThermoModes(const tZWaveUSB3Sh::EThermoModes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEThermoModes.i4MapEnumAltNum(tCIDLib::c4EnumOrd(eVal), bThrowIfNot);
}

tZWaveUSB3Sh::EThermoModes tZWaveUSB3Sh::eAltNumEThermoModes(const tCIDLib::TInt4 i4Val, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EThermoModes(emapEThermoModes.eMapEnumAltNum(i4Val, bThrowIfNot));
}

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EThermoModes eVal)
{
    return emapEThermoModes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EThermoFModes[11] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFModes::AutoLow), 0, 0,  { L"", L"", L"", L"AutoLow", L"EThermoFModes::AutoLow", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFModes::Low), 1, 0,  { L"", L"", L"", L"Low", L"EThermoFModes::Low", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFModes::AutoHigh), 2, 0,  { L"", L"", L"", L"AutoHigh", L"EThermoFModes::AutoHigh", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFModes::High), 3, 0,  { L"", L"", L"", L"High", L"EThermoFModes::High", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFModes::AutoMedium), 4, 0,  { L"", L"", L"", L"AutoMedium", L"EThermoFModes::AutoMedium", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFModes::Medium), 5, 0,  { L"", L"", L"", L"Medium", L"EThermoFModes::Medium", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFModes::Circulate), 6, 0,  { L"", L"", L"", L"Circulate", L"EThermoFModes::Circulate", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFModes::HumCirculate), 7, 0,  { L"", L"", L"", L"HumCirculate", L"EThermoFModes::HumCirculate", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFModes::LeftRight), 8, 0,  { L"", L"", L"", L"LeftRight", L"EThermoFModes::LeftRight", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFModes::UpDown), 9, 0,  { L"", L"", L"", L"UpDown", L"EThermoFModes::UpDown", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFModes::Quiet), 10, 0,  { L"", L"", L"", L"Quiet", L"EThermoFModes::Quiet", L"" } }

};

static TEnumMap emapEThermoFModes
(
     L"EThermoFModes"
     , 11
     , kCIDLib::False
     , aeitemValues_EThermoFModes
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EThermoFModes::Count)
);

const TString& tZWaveUSB3Sh::strXlatEThermoFModes(const tZWaveUSB3Sh::EThermoFModes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEThermoFModes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::EThermoFModes tZWaveUSB3Sh::eXlatEThermoFModes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EThermoFModes(emapEThermoFModes.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TInt4 tZWaveUSB3Sh::i4AltNumEThermoFModes(const tZWaveUSB3Sh::EThermoFModes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEThermoFModes.i4MapEnumAltNum(tCIDLib::c4EnumOrd(eVal), bThrowIfNot);
}

tZWaveUSB3Sh::EThermoFModes tZWaveUSB3Sh::eAltNumEThermoFModes(const tCIDLib::TInt4 i4Val, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EThermoFModes(emapEThermoFModes.eMapEnumAltNum(i4Val, bThrowIfNot));
}

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EThermoFModes eVal)
{
    return emapEThermoFModes.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EThermoFStates[9] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFStates::Idle), 0, 0,  { L"", L"", L"", L"Idle", L"EThermoFStates::Idle", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFStates::On), 1, 0,  { L"", L"", L"", L"On", L"EThermoFStates::On", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFStates::OnHigh), 2, 0,  { L"", L"", L"", L"OnHigh", L"EThermoFStates::OnHigh", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFStates::OnMedium), 3, 0,  { L"", L"", L"", L"OnMedium", L"EThermoFStates::OnMedium", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFStates::Circulate), 4, 0,  { L"", L"", L"", L"Circulate", L"EThermoFStates::Circulate", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFStates::HumCirculate), 5, 0,  { L"", L"", L"", L"HumCirculate", L"EThermoFStates::HumCirculate", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFStates::RLCirculate), 6, 0,  { L"", L"", L"", L"RLCirculate", L"EThermoFStates::RLCirculate", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFStates::UDCirculate), 7, 0,  { L"", L"", L"", L"UDCirculate", L"EThermoFStates::UDCirculate", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoFStates::Quiet), 8, 0,  { L"", L"", L"", L"Quiet", L"EThermoFStates::Quiet", L"" } }

};

static TEnumMap emapEThermoFStates
(
     L"EThermoFStates"
     , 9
     , kCIDLib::False
     , aeitemValues_EThermoFStates
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EThermoFStates::Count)
);

const TString& tZWaveUSB3Sh::strXlatEThermoFStates(const tZWaveUSB3Sh::EThermoFStates eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEThermoFStates.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::EThermoFStates tZWaveUSB3Sh::eXlatEThermoFStates(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EThermoFStates(emapEThermoFStates.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TInt4 tZWaveUSB3Sh::i4AltNumEThermoFStates(const tZWaveUSB3Sh::EThermoFStates eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEThermoFStates.i4MapEnumAltNum(tCIDLib::c4EnumOrd(eVal), bThrowIfNot);
}

tZWaveUSB3Sh::EThermoFStates tZWaveUSB3Sh::eAltNumEThermoFStates(const tCIDLib::TInt4 i4Val, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EThermoFStates(emapEThermoFStates.eMapEnumAltNum(i4Val, bThrowIfNot));
}

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EThermoFStates eVal)
{
    return emapEThermoFStates.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EThermoStates[12] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoStates::Idle), 0, 0,  { L"", L"", L"", L"Idle", L"EThermoStates::Idle", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoStates::Heating), 1, 0,  { L"", L"", L"", L"Heating", L"EThermoStates::Heating", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoStates::Cooling), 2, 0,  { L"", L"", L"", L"Cooling", L"EThermoStates::Cooling", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoStates::Fan), 3, 0,  { L"", L"", L"", L"Fan", L"EThermoStates::Fan", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoStates::PendingHeat), 4, 0,  { L"", L"", L"", L"PendingHeat", L"EThermoStates::PendingHeat", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoStates::PendingCool), 5, 0,  { L"", L"", L"", L"PendingCool", L"EThermoStates::PendingCool", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoStates::Vent), 6, 0,  { L"", L"", L"", L"Vent", L"EThermoStates::Vent", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoStates::AuxHeat), 7, 0,  { L"", L"", L"", L"AuxHeat", L"EThermoStates::AuxHeat", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoStates::Heat2), 8, 0,  { L"", L"", L"", L"Heat2", L"EThermoStates::Heat2", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoStates::Cool2), 9, 0,  { L"", L"", L"", L"Cool2", L"EThermoStates::Cool2", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoStates::AuxHeat2), 10, 0,  { L"", L"", L"", L"AuxHeat2", L"EThermoStates::AuxHeat2", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EThermoStates::AuxHeat3), 11, 0,  { L"", L"", L"", L"AuxHeat3", L"EThermoStates::AuxHeat3", L"" } }

};

static TEnumMap emapEThermoStates
(
     L"EThermoStates"
     , 12
     , kCIDLib::False
     , aeitemValues_EThermoStates
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EThermoStates::Count)
);

const TString& tZWaveUSB3Sh::strXlatEThermoStates(const tZWaveUSB3Sh::EThermoStates eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEThermoStates.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::EThermoStates tZWaveUSB3Sh::eXlatEThermoStates(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EThermoStates(emapEThermoStates.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TInt4 tZWaveUSB3Sh::i4AltNumEThermoStates(const tZWaveUSB3Sh::EThermoStates eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEThermoStates.i4MapEnumAltNum(tCIDLib::c4EnumOrd(eVal), bThrowIfNot);
}

tZWaveUSB3Sh::EThermoStates tZWaveUSB3Sh::eAltNumEThermoStates(const tCIDLib::TInt4 i4Val, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EThermoStates(emapEThermoStates.eMapEnumAltNum(i4Val, bThrowIfNot));
}

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EThermoStates eVal)
{
    return emapEThermoStates.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EUnitAcc[4] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitAcc::Read), 0, 0,  { L"", L"", L"", L"Read", L"EUnitAcc::Read", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitAcc::Write), 0, 0,  { L"", L"", L"", L"Write", L"EUnitAcc::Write", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitAcc::ReadOnWake), 0, 0,  { L"", L"", L"", L"ReadOnWake", L"EUnitAcc::ReadOnWake", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitAcc::ReadAfterWrite), 0, 0,  { L"", L"", L"", L"ReadAfterWrite", L"EUnitAcc::ReadAfterWrite", L"" } }

};

static TEnumMap emapEUnitAcc
(
     L"EUnitAcc"
     , 4
     , kCIDLib::True
     , aeitemValues_EUnitAcc
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EUnitAcc::None)
);

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EUnitAcc eVal)
{
    return emapEUnitAcc.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EUnitClasses[19] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TAeonBadMFUnit), 0, 0,  { L"", L"", L"", L"TAeonBadMFUnit", L"EUnitClasses::TAeonBadMFUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TBinNotSensorUnit), 0, 0,  { L"", L"", L"", L"TBinNotSensorUnit", L"EUnitClasses::TBinNotSensorUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TDimmerUnit), 0, 0,  { L"", L"", L"", L"TDimmerUnit", L"EUnitClasses::TDimmerUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TDualBinSensorUnit), 0, 0,  { L"", L"", L"", L"TDualBinSensorUnit", L"EUnitClasses::TDualBinSensorUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TGenBinSensorUnit), 0, 0,  { L"", L"", L"", L"TGenBinSensorUnit", L"EUnitClasses::TGenBinSensorUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TGenDimmerUnit), 0, 0,  { L"", L"", L"", L"TGenDimmerUnit", L"EUnitClasses::TGenDimmerUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TGenLightSwitchUnit), 0, 0,  { L"", L"", L"", L"TGenLightSwitchUnit", L"EUnitClasses::TGenLightSwitchUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TGenSceneActUnit), 0, 0,  { L"", L"", L"", L"TGenSceneActUnit", L"EUnitClasses::TGenSceneActUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TGenRGBWUnit), 0, 0,  { L"", L"", L"", L"TGenRGBWUnit", L"EUnitClasses::TGenRGBWUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TLightSwitchUnit), 0, 0,  { L"", L"", L"", L"TLightSwitchUnit", L"EUnitClasses::TLightSwitchUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TLockUnit), 0, 0,  { L"", L"", L"", L"TLockUnit", L"EUnitClasses::TLockUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TLockNotUnit), 0, 0,  { L"", L"", L"", L"TLockNotUnit", L"EUnitClasses::TLockNotUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TMultiChComboUnit), 0, 0,  { L"", L"", L"", L"TMultiChComboUnit", L"EUnitClasses::TMultiChComboUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TNChOutletUnit), 0, 0,  { L"", L"", L"", L"TNChOutletUnit", L"EUnitClasses::TNChOutletUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TNonMCMultiSensorUnit), 0, 0,  { L"", L"", L"", L"TNonMCMultiSensorUnit", L"EUnitClasses::TNonMCMultiSensorUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TOutletUnit), 0, 0,  { L"", L"", L"", L"TOutletUnit", L"EUnitClasses::TOutletUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TTempSPUnit), 0, 0,  { L"", L"", L"", L"TTempSPUnit", L"EUnitClasses::TTempSPUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TThermoUnit), 0, 0,  { L"", L"", L"", L"TThermoUnit", L"EUnitClasses::TThermoUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitClasses::TZWController), 0, 0,  { L"", L"", L"", L"TZWController", L"EUnitClasses::TZWController", L"" } }

};

static TEnumMap emapEUnitClasses
(
     L"EUnitClasses"
     , 19
     , kCIDLib::False
     , aeitemValues_EUnitClasses
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EUnitClasses::Count)
);

const TString& tZWaveUSB3Sh::strXlatEUnitClasses(const tZWaveUSB3Sh::EUnitClasses eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEUnitClasses.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::EUnitClasses tZWaveUSB3Sh::eXlatEUnitClasses(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EUnitClasses(emapEUnitClasses.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EUnitClasses eVal)
{
    return emapEUnitClasses.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EUnitNameSrcs[3] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitNameSrcs::Default), 0, 0,  { L"", L"", L"", L"Default", L"EUnitNameSrcs::Default", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitNameSrcs::Unit), 0, 0,  { L"", L"", L"", L"Unit", L"EUnitNameSrcs::Unit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitNameSrcs::User), 0, 0,  { L"", L"", L"", L"User", L"EUnitNameSrcs::User", L"" } }

};

static TEnumMap emapEUnitNameSrcs
(
     L"EUnitNameSrcs"
     , 3
     , kCIDLib::False
     , aeitemValues_EUnitNameSrcs
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EUnitNameSrcs::Count)
);

const TString& tZWaveUSB3Sh::strXlatEUnitNameSrcs(const tZWaveUSB3Sh::EUnitNameSrcs eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEUnitNameSrcs.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::EUnitNameSrcs tZWaveUSB3Sh::eXlatEUnitNameSrcs(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EUnitNameSrcs(emapEUnitNameSrcs.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tZWaveUSB3Sh::EUnitNameSrcs* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tZWaveUSB3Sh::EUnitNameSrcs(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tZWaveUSB3Sh::EUnitNameSrcs* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EUnitNameSrcs eVal)
{
    return emapEUnitNameSrcs.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EUnitStates[13] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitStates::Failed), 0, kZW3ShMsgs::midUState_Failed,  { L"", L"", L"", L"Failed", L"EUnitStates::Failed", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitStates::Disabled), 0, kZW3ShMsgs::midUState_Disabled,  { L"", L"", L"", L"Disabled", L"EUnitStates::Disabled", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitStates::InitUnit), 0, kZW3ShMsgs::midUState_InitUnit,  { L"", L"", L"", L"InitUnit", L"EUnitStates::InitUnit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitStates::GetUnitInfo), 0, kZW3ShMsgs::midUState_GetUnitInfo,  { L"", L"", L"", L"GetUnitInfo", L"EUnitStates::GetUnitInfo", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitStates::WaitWakeup), 0, kZW3ShMsgs::midUState_WaitWakeup,  { L"", L"", L"", L"WaitWakeup", L"EUnitStates::WaitWakeup", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitStates::GetSecureCls), 0, kZW3ShMsgs::midUState_GetSecureCls,  { L"", L"", L"", L"GetSecureCls", L"EUnitStates::GetSecureCls", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitStates::GetManSpec), 0, kZW3ShMsgs::midUState_GetManSpec,  { L"", L"", L"", L"GetManSpec", L"EUnitStates::GetManSpec", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitStates::GetName), 0, kZW3ShMsgs::midUState_GetName,  { L"", L"", L"", L"GetName", L"EUnitStates::GetName", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitStates::NoAutoMatch), 0, kZW3ShMsgs::midUState_NoAutoMatch,  { L"", L"", L"", L"NoAutoMatch", L"EUnitStates::NoAutoMatch", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitStates::WaitDevInfo), 0, kZW3ShMsgs::midUState_WaitDevInfo,  { L"", L"", L"", L"WaitDevInfo", L"EUnitStates::WaitDevInfo", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitStates::WaitApprove), 0, kZW3ShMsgs::midUState_WaitApprove,  { L"", L"", L"", L"WaitApprove", L"EUnitStates::WaitApprove", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitStates::GetInitVals), 0, kZW3ShMsgs::midUState_GetInitVals,  { L"", L"", L"", L"GetInitVals", L"EUnitStates::GetInitVals", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EUnitStates::Ready), 0, kZW3ShMsgs::midUState_Ready,  { L"", L"", L"", L"Ready", L"EUnitStates::Ready", L"" } }

};

static TEnumMap emapEUnitStates
(
     L"EUnitStates"
     , 13
     , kCIDLib::False
     , aeitemValues_EUnitStates
     , &facZWaveUSB3Sh()
     , tCIDLib::TCard4(tZWaveUSB3Sh::EUnitStates::Count)
);

const TString& tZWaveUSB3Sh::strAltXlatEUnitStates(const tZWaveUSB3Sh::EUnitStates eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEUnitStates.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

tZWaveUSB3Sh::EUnitStates tZWaveUSB3Sh::eAltXlatEUnitStates(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EUnitStates(emapEUnitStates.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

const TString& tZWaveUSB3Sh::strXlatEUnitStates(const tZWaveUSB3Sh::EUnitStates eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEUnitStates.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

tZWaveUSB3Sh::EUnitStates tZWaveUSB3Sh::eXlatEUnitStates(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EUnitStates(emapEUnitStates.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, tZWaveUSB3Sh::EUnitStates* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = tZWaveUSB3Sh::EUnitStates(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const tZWaveUSB3Sh::EUnitStates* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EUnitStates eVal)
{
    return emapEUnitStates.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EValSrcs[3] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EValSrcs::Unit), 0, 0,  { L"", L"", L"", L"Unit", L"EValSrcs::Unit", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EValSrcs::Driver), 0, 0,  { L"", L"", L"", L"Driver", L"EValSrcs::Driver", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EValSrcs::Program), 0, 0,  { L"", L"", L"", L"Program", L"EValSrcs::Program", L"" } }

};

static TEnumMap emapEValSrcs
(
     L"EValSrcs"
     , 3
     , kCIDLib::False
     , aeitemValues_EValSrcs
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EValSrcs::Count)
);

tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EValSrcs eVal)
{
    return emapEValSrcs.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EZWMakes[35] = 
{
    {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::ACT), 1, 0,  { L"", L"ACT", L"", L"ACT", L"EZWMakes::ACT", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Intermatic), 5, 0,  { L"", L"Intermatic", L"", L"Intermatic", L"EZWMakes::Intermatic", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Intel), 6, 0,  { L"", L"Intel", L"", L"Intel", L"EZWMakes::Intel", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::WayneDalton), 8, 0,  { L"", L"Wayne Dalton", L"", L"WayneDalton", L"EZWMakes::WayneDalton", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Sylvania), 9, 0,  { L"", L"Sylvania", L"", L"Sylvania", L"EZWMakes::Sylvania", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::CasaWorks), 11, 0,  { L"", L"CasaWorks", L"", L"CasaWorks", L"EZWMakes::CasaWorks", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::HomeSeer), 12, 0,  { L"", L"HomeSeer", L"", L"HomeSeer", L"EZWMakes::HomeSeer", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::HomeAutomatedLiving), 13, 0,  { L"", L"Home Automated Living", L"", L"HomeAutomatedLiving", L"EZWMakes::HomeAutomatedLiving", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::RCS), 16, 0,  { L"", L"RCS", L"", L"RCS", L"EZWMakes::RCS", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::CooperWiringDevices), 26, 0,  { L"", L"Cooper Wiring Devices", L"", L"CooperWiringDevices", L"EZWMakes::CooperWiringDevices", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Elk), 27, 0,  { L"", L"Elk", L"", L"Elk", L"EZWMakes::Elk", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Leviton), 29, 0,  { L"", L"Leviton", L"", L"Leviton", L"EZWMakes::Leviton", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Carrier), 46, 0,  { L"", L"Carrier", L"", L"Carrier", L"EZWMakes::Carrier", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Honeywell), 57, 0,  { L"", L"Honeywell", L"", L"Honeywell", L"EZWMakes::Honeywell", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Allegion), 59, 0,  { L"", L"Allegion", L"", L"Allegion", L"EZWMakes::Allegion", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Somfy), 71, 0,  { L"", L"Somfy", L"", L"Somfy", L"EZWMakes::Somfy", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::HAI), 91, 0,  { L"", L"HAI", L"", L"HAI", L"EZWMakes::HAI", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Jasco), 99, 0,  { L"", L"Jasco", L"", L"Jasco", L"EZWMakes::Jasco", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::CooperLighting), 121, 0,  { L"", L"Cooper Lighting", L"", L"CooperLighting", L"EZWMakes::CooperLighting", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::FortrezZ), 132, 0,  { L"", L"FortrezZ LLC", L"", L"FortrezZ", L"EZWMakes::FortrezZ", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::AeonLabs), 134, 0,  { L"", L"Aeon Labs", L"", L"AeonLabs", L"EZWMakes::AeonLabs", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Kwikset), 144, 0,  { L"", L"Kwikset", L"", L"Kwikset", L"EZWMakes::Kwikset", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::VisionSecurity), 265, 0,  { L"", L"Vision Security", L"", L"VisionSecurity", L"EZWMakes::VisionSecurity", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Fibaro), 271, 0,  { L"", L"Fibaro", L"", L"Fibaro", L"EZWMakes::Fibaro", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Yale), 297, 0,  { L"", L"Yale", L"", L"Yale", L"EZWMakes::Yale", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Vesternet), 328, 0,  { L"", L"Vesternet", L"", L"Vesternet", L"EZWMakes::Vesternet", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::EcoLink), 330, 0,  { L"", L"EcoLink", L"", L"EcoLink", L"EZWMakes::EcoLink", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::LinearCorp), 335, 0,  { L"", L"Linear Corp", L"", L"LinearCorp", L"EZWMakes::LinearCorp", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Inovelli), 349, 0,  { L"", L"Inovelli", L"", L"Inovelli", L"EZWMakes::Inovelli", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::LeakIntel), 371, 0,  { L"", L"Leak Intelligence", L"", L"LeakIntel", L"EZWMakes::LeakIntel", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Monoprice), 514, 0,  { L"", L"Monoprice", L"", L"Monoprice", L"EZWMakes::Monoprice", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::StelPro), 569, 0,  { L"", L"StelPro", L"", L"StelPro", L"EZWMakes::StelPro", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Zooz), 634, 0,  { L"", L"Zooz", L"", L"Zooz", L"EZWMakes::Zooz", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::Evalogik), 786, 0,  { L"", L"Evalogik", L"", L"Evalogik", L"EZWMakes::Evalogik", L"" } }
  , {  tCIDLib::TInt4(tZWaveUSB3Sh::EZWMakes::CharmedQuark), 65535, 0,  { L"", L"Charmed Quark", L"", L"CharmedQuark", L"EZWMakes::CharmedQuark", L"" } }

};

static TEnumMap emapEZWMakes
(
     L"EZWMakes"
     , 35
     , kCIDLib::False
     , aeitemValues_EZWMakes
     , nullptr
     , tCIDLib::TCard4(tZWaveUSB3Sh::EZWMakes::Count)
);

const TString& tZWaveUSB3Sh::strXlatEZWMakes(const tZWaveUSB3Sh::EZWMakes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEZWMakes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::AltText, bThrowIfNot);
}

tZWaveUSB3Sh::EZWMakes tZWaveUSB3Sh::eXlatEZWMakes(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EZWMakes(emapEZWMakes.i4MapEnumText(strVal, TEnumMap::ETextVals::AltText, bThrowIfNot));
}

tCIDLib::TInt4 tZWaveUSB3Sh::i4AltNumEZWMakes(const tZWaveUSB3Sh::EZWMakes eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEZWMakes.i4MapEnumAltNum(tCIDLib::c4EnumOrd(eVal), bThrowIfNot);
}

tZWaveUSB3Sh::EZWMakes tZWaveUSB3Sh::eAltNumEZWMakes(const tCIDLib::TInt4 i4Val, const tCIDLib::TBoolean bThrowIfNot)
{
    return tZWaveUSB3Sh::EZWMakes(emapEZWMakes.eMapEnumAltNum(i4Val, bThrowIfNot));
}

TTextOutStream& tZWaveUSB3Sh::operator<<(TTextOutStream& strmTar, const tZWaveUSB3Sh::EZWMakes eVal)
{
    strmTar << emapEZWMakes.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::AltText, kCIDLib::False);
    return strmTar;
}
tCIDLib::TBoolean tZWaveUSB3Sh::bIsValidEnum(const tZWaveUSB3Sh::EZWMakes eVal)
{
    return emapEZWMakes.bIsValidEnum(tCIDLib::TCard4(eVal));

}

