// ----------------------------------------------------------------------------
//  FILE: ZWaveUSBSh_Shared.hpp
//  DATE: Fri, Jun 02 16:46:17 2017 -0400
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

#pragma CIDLIB_PACK(CIDLIBPACK)

// ----------------------------------------------------------------------------
// Constants namespace
// ----------------------------------------------------------------------------
namespace kZWaveUSBSh
{
    
    // ------------------------------------------------------------------------
    //  The maximum number of Z-Wave groups that the Z-Wave driver
    //  supports.
    //                  
    // ------------------------------------------------------------------------
    const tCIDLib::TCard4 c4MaxGroups = 64;
}

// ----------------------------------------------------------------------------
// Types namespace
// ----------------------------------------------------------------------------
namespace tZWaveUSBSh
{
    
    // ------------------------------------------------------------------------
    //  When a replication ends, a value of this type indicates the
    //  status of that replication, so that the client can know
    //  whether it worked or not. If the client cancels, then it
    //  makes no difference since they aren't going to look at the
    //  status. They know they ended it.
    //  
    //  These are not persisted so order does not matter.
    //                  
    // ------------------------------------------------------------------------
    enum ERepRes
    {
        ERepRes_Replicating
       , ERepRes_UpdateCfg
       , ERepRes_OK
       , ERepRes_Failed
       , ERepRes_TimedOut
       , ERepRes_Count
       , ERepRes_Min = 0
       , ERepRes_Max = ERepRes_Count - 1
    };
              ZWUSBSHEXPORT ERepRes eXlatERepRes(const TString& strToXlat);
              ZWUSBSHEXPORT const TString& strXlatERepRes(const ERepRes eToXlat);
              ZWUSBSHEXPORT const TString& strLoadERepRes(const ERepRes eToXlat);

        ZWUSBSHEXPORT tCIDLib::TBoolean bIsValidEnum(const tZWaveUSBSh::ERepRes eVal);
    
    // ------------------------------------------------------------------------
    //  The classes that represent the units (actually the Z-Wave classes that
    //  each unit type can implement), have generic methods for creating get and
    //  set messages to send out. There can be different types of commands for
    //  each class of unit, so we need to be able to send in one of a get of cmds
    //  for it.
    //                  
    // ------------------------------------------------------------------------
    enum EUGetCmds
    {
        EUGetCmd_GetReport
       , EUGetCmd_GetGrpAssoc
       , EUGetCmds_Count
       , EUGetCmds_Min = 0
       , EUGetCmds_Max = EUGetCmds_Count - 1
    };
              ZWUSBSHEXPORT EUGetCmds eXlatEUGetCmds(const TString& strToXlat);
              ZWUSBSHEXPORT const TString& strXlatEUGetCmds(const EUGetCmds eToXlat);
              ZWUSBSHEXPORT const TString& strLoadEUGetCmds(const EUGetCmds eToXlat);

        ZWUSBSHEXPORT tCIDLib::TBoolean bIsValidEnum(const tZWaveUSBSh::EUGetCmds eVal);
    
    // ------------------------------------------------------------------------
    //  The classes that represent the units (actually the Z-Wave classes that
    //  each unit type can implement), have generic methods for creating get and
    //  set messages to send out. There can be different types of commands for
    //  each class of unit, so we need to be able to send in one of a set of cmds
    //  for it to build the appropriate z-wave command for in response to a field
    //  write from a client.
    //                  
    // ------------------------------------------------------------------------
    enum EUSetCmds
    {
        EUSetCmd_AddAssoc
       , EUSetCmd_DelAssoc
       , EUSetCmd_OffOn
       , EUSetCmd_RampEnd
       , EUSetCmd_RampStart
       , EUSetCmd_SetLevel
       , EUSetCmd_WakeUp
       , EUSetCmd_SetCfgParam
       , EUSetCmds_Count
       , EUSetCmds_Min = 0
       , EUSetCmds_Max = EUSetCmds_Count - 1
    };
              ZWUSBSHEXPORT EUSetCmds eXlatEUSetCmds(const TString& strToXlat);
              ZWUSBSHEXPORT const TString& strXlatEUSetCmds(const EUSetCmds eToXlat);
              ZWUSBSHEXPORT const TString& strLoadEUSetCmds(const EUSetCmds eToXlat);

        ZWUSBSHEXPORT tCIDLib::TBoolean bIsValidEnum(const tZWaveUSBSh::EUSetCmds eVal);
}

#pragma CIDLIB_POPPACK




