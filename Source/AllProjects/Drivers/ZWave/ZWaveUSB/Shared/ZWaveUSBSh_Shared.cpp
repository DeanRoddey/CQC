// ----------------------------------------------------------------------------
//  FILE: ZWaveUSBSh_Shared.cpp
//  DATE: Fri, Jun 02 16:46:17 2017 -0400
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

#include "ZWaveUSBSh_.hpp"



static const tCIDLib::TEnumMap<tZWaveUSBSh::ERepRes> aMapERepRes[5] =
{
    { tZWaveUSBSh::ERepRes_Replicating, L"Replicating" }
  , { tZWaveUSBSh::ERepRes_UpdateCfg, L"UpdateCfg" }
  , { tZWaveUSBSh::ERepRes_OK, L"OK" }
  , { tZWaveUSBSh::ERepRes_Failed, L"Failed" }
  , { tZWaveUSBSh::ERepRes_TimedOut, L"TimedOut" }
};

static TString astrERepResText[tCIDLib::c4EnumOrd(tZWaveUSBSh::ERepRes_Count) + 1];

const TString& tZWaveUSBSh::strLoadERepRes(const tZWaveUSBSh::ERepRes eToXlat)
{
    static TAtomicFlag atomInitDone;
    if (!atomInitDone)
    {
        TBaseLock lockInit;
        if (!atomInitDone)
        {
            astrERepResText[0] = facZWaveUSBSh().pszLoadCIDMsg(kZWShMsgs::midRepRes_Replicating);
            astrERepResText[1] = facZWaveUSBSh().pszLoadCIDMsg(kZWShMsgs::midRepRes_UpdateCfg);
            astrERepResText[2] = facZWaveUSBSh().pszLoadCIDMsg(kZWShMsgs::midRepRes_OK);
            astrERepResText[3] = facZWaveUSBSh().pszLoadCIDMsg(kZWShMsgs::midRepRes_Failed);
            astrERepResText[4] = facZWaveUSBSh().pszLoadCIDMsg(kZWShMsgs::midRepRes_TimedOut);
            atomInitDone.Set();
        }
    }
    if (eToXlat >= tZWaveUSBSh::ERepRes_Count)
        TModule::ThrowBadEnum(eToXlat, L"tZWaveUSBSh::ERepRes");
   return astrERepResText[tCIDLib::TCard4(eToXlat)];
}

tZWaveUSBSh::ERepRes tZWaveUSBSh::eXlatERepRes(const TString& strToXlat)
{
    const tCIDLib::TCard4 c4Count = tCIDLib::TCard4(tZWaveUSBSh::ERepRes_Count);
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        if (strToXlat == strLoadERepRes(ERepRes(c4Index)))
            return ERepRes(c4Index);
    }
    return tZWaveUSBSh::ERepRes_Count;
}

const TString& tZWaveUSBSh::strXlatERepRes(const tZWaveUSBSh::ERepRes eToXlat)
{
    if (eToXlat >= tZWaveUSBSh::ERepRes_Count)
        TModule::ThrowBadEnum(eToXlat, L"tZWaveUSBSh::ERepRes");
    return strLoadERepRes(eToXlat);
}

tCIDLib::TBoolean tZWaveUSBSh::bIsValidEnum(const tZWaveUSBSh::ERepRes eVal)
{
    return (eVal >= tZWaveUSBSh::ERepRes_Min) && (eVal <= tZWaveUSBSh::ERepRes_Max);
}



static const tCIDLib::TEnumMap<tZWaveUSBSh::EUGetCmds> aMapEUGetCmds[2] =
{
    { tZWaveUSBSh::EUGetCmd_GetReport, L"EUGetCmd_GetReport" }
  , { tZWaveUSBSh::EUGetCmd_GetGrpAssoc, L"EUGetCmd_GetGrpAssoc" }
};

static TString astrEUGetCmdsText[tCIDLib::c4EnumOrd(tZWaveUSBSh::EUGetCmds_Count) + 1] =
{
     L"EUGetCmd_GetReport"
   , L"EUGetCmd_GetGrpAssoc"
};

const TString& tZWaveUSBSh::strLoadEUGetCmds(const tZWaveUSBSh::EUGetCmds eToXlat)
{
    if (eToXlat >= tZWaveUSBSh::EUGetCmds_Count)
        TModule::ThrowBadEnum(eToXlat, L"tZWaveUSBSh::EUGetCmds");
   return astrEUGetCmdsText[tCIDLib::TCard4(eToXlat)];
}

tZWaveUSBSh::EUGetCmds tZWaveUSBSh::eXlatEUGetCmds(const TString& strToXlat)
{
    const tCIDLib::TCard4 c4Count = tCIDLib::TCard4(tZWaveUSBSh::EUGetCmds_Count);
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        if (strToXlat == aMapEUGetCmds[c4Index].strText)
            return aMapEUGetCmds[c4Index].eValue;
    }
    return tZWaveUSBSh::EUGetCmds_Count;
}

const TString& tZWaveUSBSh::strXlatEUGetCmds(const tZWaveUSBSh::EUGetCmds eToXlat)
{
    if (eToXlat >= tZWaveUSBSh::EUGetCmds_Count)
        TModule::ThrowBadEnum(eToXlat, L"tZWaveUSBSh::EUGetCmds");
    return aMapEUGetCmds[tCIDLib::TCard4(eToXlat)].strText;
}

tCIDLib::TBoolean tZWaveUSBSh::bIsValidEnum(const tZWaveUSBSh::EUGetCmds eVal)
{
    return (eVal >= tZWaveUSBSh::EUGetCmds_Min) && (eVal <= tZWaveUSBSh::EUGetCmds_Max);
}



static const tCIDLib::TEnumMap<tZWaveUSBSh::EUSetCmds> aMapEUSetCmds[8] =
{
    { tZWaveUSBSh::EUSetCmd_AddAssoc, L"EUSetCmd_AddAssoc" }
  , { tZWaveUSBSh::EUSetCmd_DelAssoc, L"EUSetCmd_DelAssoc" }
  , { tZWaveUSBSh::EUSetCmd_OffOn, L"EUSetCmd_OffOn" }
  , { tZWaveUSBSh::EUSetCmd_RampEnd, L"EUSetCmd_RampEnd" }
  , { tZWaveUSBSh::EUSetCmd_RampStart, L"EUSetCmd_RampStart" }
  , { tZWaveUSBSh::EUSetCmd_SetLevel, L"EUSetCmd_SetLevel" }
  , { tZWaveUSBSh::EUSetCmd_WakeUp, L"EUSetCmd_WakeUp" }
  , { tZWaveUSBSh::EUSetCmd_SetCfgParam, L"EUSetCmd_SetCfgParam" }
};

static TString astrEUSetCmdsText[tCIDLib::c4EnumOrd(tZWaveUSBSh::EUSetCmds_Count) + 1] =
{
     L"EUSetCmd_AddAssoc"
   , L"EUSetCmd_DelAssoc"
   , L"EUSetCmd_OffOn"
   , L"EUSetCmd_RampEnd"
   , L"EUSetCmd_RampStart"
   , L"EUSetCmd_SetLevel"
   , L"EUSetCmd_WakeUp"
   , L"EUSetCmd_SetCfgParam"
};

const TString& tZWaveUSBSh::strLoadEUSetCmds(const tZWaveUSBSh::EUSetCmds eToXlat)
{
    if (eToXlat >= tZWaveUSBSh::EUSetCmds_Count)
        TModule::ThrowBadEnum(eToXlat, L"tZWaveUSBSh::EUSetCmds");
   return astrEUSetCmdsText[tCIDLib::TCard4(eToXlat)];
}

tZWaveUSBSh::EUSetCmds tZWaveUSBSh::eXlatEUSetCmds(const TString& strToXlat)
{
    const tCIDLib::TCard4 c4Count = tCIDLib::TCard4(tZWaveUSBSh::EUSetCmds_Count);
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        if (strToXlat == aMapEUSetCmds[c4Index].strText)
            return aMapEUSetCmds[c4Index].eValue;
    }
    return tZWaveUSBSh::EUSetCmds_Count;
}

const TString& tZWaveUSBSh::strXlatEUSetCmds(const tZWaveUSBSh::EUSetCmds eToXlat)
{
    if (eToXlat >= tZWaveUSBSh::EUSetCmds_Count)
        TModule::ThrowBadEnum(eToXlat, L"tZWaveUSBSh::EUSetCmds");
    return aMapEUSetCmds[tCIDLib::TCard4(eToXlat)].strText;
}

tCIDLib::TBoolean tZWaveUSBSh::bIsValidEnum(const tZWaveUSBSh::EUSetCmds eVal)
{
    return (eVal >= tZWaveUSBSh::EUSetCmds_Min) && (eVal <= tZWaveUSBSh::EUSetCmds_Max);
}

