// ----------------------------------------------------------------------------
//  FILE: iTunesRendTMS_iTrayMonPlIntfClientProxy.cpp
//  DATE: Fri, Feb 14 18:49:47 2020 -0500
//    ID: 016EC0A20CCA441C-F05CAF46433D51D7
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "iTunesRendTMS_.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
AdvRTTIDecls(TiTPlayerIntfClientProxy,TOrbClientBase)


// ----------------------------------------------------------------------------
// TiTPlayerIntfClientProxy: Public, static data
// ----------------------------------------------------------------------------
const TString TiTPlayerIntfClientProxy::strInterfaceId(L"016EC0A20CCA441C-F05CAF46433D51D7");
const TString TiTPlayerIntfClientProxy::strImplScope(L"/CQC/CQCTrayMon/");
const TString TiTPlayerIntfClientProxy::strImplBinding(L"/CQC/CQCTrayMon/iTPlayer/%(b)");




static TEnumMap::TEnumValItem aeitemValues_EPlCmds[12] = 
{
    {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlCmds::None), 0, 0,  { L"", L"", L"", L"None", L"EPlCmds::None", L"None" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlCmds::FF), 0, 0,  { L"", L"", L"", L"FF", L"EPlCmds::FF", L"Fast Forward" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlCmds::FullScrOff), 0, 0,  { L"", L"", L"", L"FullScrOff", L"EPlCmds::FullScrOff", L"Full Screen Off" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlCmds::FullScrOn), 0, 0,  { L"", L"", L"", L"FullScrOn", L"EPlCmds::FullScrOn", L"Full Screen On" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlCmds::Next), 0, 0,  { L"", L"", L"", L"Next", L"EPlCmds::Next", L"Next" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlCmds::Pause), 0, 0,  { L"", L"", L"", L"Pause", L"EPlCmds::Pause", L"Pause" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlCmds::Play), 0, 0,  { L"", L"", L"", L"Play", L"EPlCmds::Play", L"Play" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlCmds::Previous), 0, 0,  { L"", L"", L"", L"Previous", L"EPlCmds::Previous", L"Previous" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlCmds::Rewind), 0, 0,  { L"", L"", L"", L"Rewind", L"EPlCmds::Rewind", L"Rewind" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlCmds::Stop), 0, 0,  { L"", L"", L"", L"Stop", L"EPlCmds::Stop", L"Stop" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlCmds::VisualsOff), 0, 0,  { L"", L"", L"", L"VisualsOff", L"EPlCmds::VisualsOff", L"Visual Off" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlCmds::VisualsOn), 0, 0,  { L"", L"", L"", L"VisualsOn", L"EPlCmds::VisualsOn", L"Visual On" } }

};

static TEnumMap emapEPlCmds
(
     L"EPlCmds"
     , 12
     , kCIDLib::False
     , aeitemValues_EPlCmds
     , nullptr
     , tCIDLib::TCard4(TiTPlayerIntfClientProxy::EPlCmds::Count)
);

const TString& TiTPlayerIntfClientProxy::strXlatEPlCmds(const TiTPlayerIntfClientProxy::EPlCmds eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEPlCmds.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::Text, bThrowIfNot);
}

TiTPlayerIntfClientProxy::EPlCmds TiTPlayerIntfClientProxy::eXlatEPlCmds(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return TiTPlayerIntfClientProxy::EPlCmds(emapEPlCmds.i4MapEnumText(strVal, TEnumMap::ETextVals::Text, bThrowIfNot));
}

TiTPlayerIntfClientProxy::EPlCmds operator++(TiTPlayerIntfClientProxy::EPlCmds& eVal, int)
{
    TiTPlayerIntfClientProxy::EPlCmds eTmp = eVal;
    eVal = TiTPlayerIntfClientProxy::EPlCmds(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const TiTPlayerIntfClientProxy::EPlCmds eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, TiTPlayerIntfClientProxy::EPlCmds& eVal)
{
    eVal = TiTPlayerIntfClientProxy::EPlCmds(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, TiTPlayerIntfClientProxy::EPlCmds* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = TiTPlayerIntfClientProxy::EPlCmds(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const TiTPlayerIntfClientProxy::EPlCmds* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean TiTPlayerIntfClientProxy::bIsValidEnum(const TiTPlayerIntfClientProxy::EPlCmds eVal)
{
    return emapEPlCmds.bIsValidEnum(tCIDLib::TCard4(eVal));

}



static TEnumMap::TEnumValItem aeitemValues_EPlStates[4] = 
{
    {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlStates::None), 0, 0,  { L"", L"", L"", L"None", L"EPlStates::None", L"" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlStates::Playing), 0, 0,  { L"", L"", L"", L"Playing", L"EPlStates::Playing", L"" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlStates::Stopped), 0, 0,  { L"", L"", L"", L"Stopped", L"EPlStates::Stopped", L"" } }
  , {  tCIDLib::TInt4(TiTPlayerIntfClientProxy::EPlStates::Unknown), 0, 0,  { L"", L"", L"", L"Unknown", L"EPlStates::Unknown", L"" } }

};

static TEnumMap emapEPlStates
(
     L"EPlStates"
     , 4
     , kCIDLib::False
     , aeitemValues_EPlStates
     , nullptr
     , tCIDLib::TCard4(TiTPlayerIntfClientProxy::EPlStates::Count)
);

const TString& TiTPlayerIntfClientProxy::strXlatEPlStates(const TiTPlayerIntfClientProxy::EPlStates eVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return emapEPlStates.strMapEnumVal(tCIDLib::TCard4(eVal), TEnumMap::ETextVals::BaseName, bThrowIfNot);
}

TiTPlayerIntfClientProxy::EPlStates TiTPlayerIntfClientProxy::eXlatEPlStates(const TString& strVal, const tCIDLib::TBoolean bThrowIfNot)
{
    return TiTPlayerIntfClientProxy::EPlStates(emapEPlStates.i4MapEnumText(strVal, TEnumMap::ETextVals::BaseName, bThrowIfNot));
}

TiTPlayerIntfClientProxy::EPlStates operator++(TiTPlayerIntfClientProxy::EPlStates& eVal, int)
{
    TiTPlayerIntfClientProxy::EPlStates eTmp = eVal;
    eVal = TiTPlayerIntfClientProxy::EPlStates(int(eVal)+1);
    return eTmp;
}

TBinOutStream& operator<<(TBinOutStream& strmTar, const TiTPlayerIntfClientProxy::EPlStates eVal)
{
    strmTar.WriteEnum(tCIDLib::TCard4(eVal));
    return strmTar;
}
TBinInStream& operator>>(TBinInStream& strmSrc, TiTPlayerIntfClientProxy::EPlStates& eVal)
{
    eVal = TiTPlayerIntfClientProxy::EPlStates(strmSrc.c4ReadEnum());
    return strmSrc;
}
tCIDLib::TVoid TBinInStream_ReadArray(TBinInStream& strmSrc, TiTPlayerIntfClientProxy::EPlStates* const aeList, const tCIDLib::TCard4 c4Count)
{
    tCIDLib::TCard4 c4Cur;
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
    {
        strmSrc >> c4Cur;
        aeList[c4Index] = TiTPlayerIntfClientProxy::EPlStates(c4Cur);
    }
}
tCIDLib::TVoid TBinOutStream_WriteArray(TBinOutStream& strmTar, const TiTPlayerIntfClientProxy::EPlStates* const aeList, const tCIDLib::TCard4 c4Count)
{
    for (tCIDLib::TCard4 c4Index = 0; c4Index < c4Count; c4Index++)
        strmTar << tCIDLib::TCard4(aeList[c4Index]);
}
tCIDLib::TBoolean TiTPlayerIntfClientProxy::bIsValidEnum(const TiTPlayerIntfClientProxy::EPlStates eVal)
{
    return emapEPlStates.bIsValidEnum(tCIDLib::TCard4(eVal));

}




// ----------------------------------------------------------------------------
// TiTPlayerIntfClientProxy: Constructors and Destructor
// ----------------------------------------------------------------------------
TiTPlayerIntfClientProxy::TiTPlayerIntfClientProxy()
{
}

TiTPlayerIntfClientProxy::
TiTPlayerIntfClientProxy(const TOrbObjId& ooidSrc, const TString& strNSBinding)
{
    #if CID_DEBUG_ON
    if (!ooidSrc.oidKey().bIsInterfaceId(strInterfaceId))
    {
        facCIDOrb().ThrowErr
        (
            CID_FILE
            , CID_LINE
            , kOrbErrs::errcClient_BadIntfId
            , tCIDLib::ESeverities::Failed
            , tCIDLib::EErrClasses::BadParms
            , ooidSrc.oidKey().mhashInterface()
            , strInterfaceId
        );
    }
    #endif
    SetObjId(ooidSrc, strNSBinding, kCIDLib::False);
}

TiTPlayerIntfClientProxy::~TiTPlayerIntfClientProxy()
{
}

// ----------------------------------------------------------------------------
// TiTPlayerIntfClientProxy: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TBoolean TiTPlayerIntfClientProxy::bGetPlayerState
(
    tCIDLib::TCard4& c4Serial
    , tCIDLib::TBoolean& bConnected
    , tCIDLib::TCard4& c4Volume
    , TiTPlayerIntfClientProxy::EPlStates& ePlState
    , tCIDLib::TBoolean& bMute
    , tCIDLib::TCard8& enctTotal
    , tCIDLib::TCard8& enctCur
    , TString& strCurAlbum
    , TString& strCurArtist
    , TString& strCurTrack)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bGetPlayerState");
        ocmdToUse.strmOut() << c4Serial;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4Serial;
            ocmdToUse.strmIn() >> bConnected;
            ocmdToUse.strmIn() >> c4Volume;
            ocmdToUse.strmIn() >> ePlState;
            ocmdToUse.strmIn() >> bMute;
            ocmdToUse.strmIn() >> enctTotal;
            ocmdToUse.strmIn() >> enctCur;
            ocmdToUse.strmIn() >> strCurAlbum;
            ocmdToUse.strmIn() >> strCurArtist;
            ocmdToUse.strmIn() >> strCurTrack;
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TVoid TiTPlayerIntfClientProxy::DoPlayerCmd
(
    const TiTPlayerIntfClientProxy::EPlCmds eCmd)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"DoPlayerCmd");
        ocmdToUse.strmOut() << eCmd;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TiTPlayerIntfClientProxy::SelPLByCookie
(
    const TString& strTitleCookie)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"SelPLByCookie");
        ocmdToUse.strmOut() << strTitleCookie;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TiTPlayerIntfClientProxy::SelTrackByCookie
(
    const TString& strItemCookie)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"SelTrackByCookie");
        ocmdToUse.strmOut() << strItemCookie;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TiTPlayerIntfClientProxy::SetMute
(
    const tCIDLib::TBoolean bToSet)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"SetMute");
        ocmdToUse.strmOut() << bToSet;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TiTPlayerIntfClientProxy::SetVolume
(
    const tCIDLib::TCard4 c4ToSet)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"SetVolume");
        ocmdToUse.strmOut() << c4ToSet;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

