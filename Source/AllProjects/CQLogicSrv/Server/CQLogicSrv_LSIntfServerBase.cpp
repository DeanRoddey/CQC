// ----------------------------------------------------------------------------
//  FILE: CQLogicSrv_LSIntfServerBase.cpp
//  DATE: Fri, Feb 12 21:14:16 2021 -0500
//    ID: 2B54D6A15C078D54-8E985C2CDE56A303
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQLogicSrv.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
RTTIDecls(TLogicSrvServerBase,TOrbServerBase)


// ----------------------------------------------------------------------------
// Public, static data
// ----------------------------------------------------------------------------
const TString TLogicSrvServerBase::strInterfaceId(L"2B54D6A15C078D54-8E985C2CDE56A303");
const TString TLogicSrvServerBase::strBinding(L"/CQC/LogicServer/LogServerObj");
const TString TLogicSrvServerBase::strCoreAdminBinding(L"/CQC/LogicServer/CoreAdmin");


// ----------------------------------------------------------------------------
// TLogicSrvServerBase: Destructor
// ----------------------------------------------------------------------------
TLogicSrvServerBase::~TLogicSrvServerBase()
{
}

// ----------------------------------------------------------------------------
// TLogicSrvServerBase: Protected Constructors
// ----------------------------------------------------------------------------
TLogicSrvServerBase::TLogicSrvServerBase() :
    TOrbServerBase(strInterfaceId, L"TLogicSrvClientProxy" )
{
}

TLogicSrvServerBase::TLogicSrvServerBase(const TOrbObjId& ooidThis) :
    TOrbServerBase(ooidThis)
{
}

// ----------------------------------------------------------------------------
// TLogicSrvServerBase: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TVoid TLogicSrvServerBase::Dispatch(const TString& strMethodName, TOrbCmd& orbcToDispatch)
{
    if (strMethodName == L"bQueryFields")
    {
        tCIDLib::TCard4 c4CfgSerialNum;
        orbcToDispatch.strmIn() >> c4CfgSerialNum;
        tCIDLib::TCard4 c4BufSz_mbufData = 0;
        THeapBuf mbufData;
        tCIDLib::TBoolean bReturnAll;
        orbcToDispatch.strmIn() >> bReturnAll;
        tCIDLib::TBoolean retVal = bQueryFields
        (
            c4CfgSerialNum
          , c4BufSz_mbufData
          , mbufData
          , bReturnAll
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4BufSz_mbufData;
        orbcToDispatch.strmOut().c4WriteBuffer(mbufData, c4BufSz_mbufData);
    }
     else if (strMethodName == L"bQueryGraphSamples")
    {
        TString strFldName;
        orbcToDispatch.strmIn() >> strFldName;
        tCIDLib::TCard4 c4CfgSerialNum = {};
        orbcToDispatch.strmIn() >> c4CfgSerialNum;
        tCIDLib::TCard4 c4SerialNum = {};
        orbcToDispatch.strmIn() >> c4SerialNum;
        tCIDLib::TCard4 c4NewSamples = {};
        TFundVector<tCIDLib::TFloat4> fcolNewSamples;
        tCIDLib::TBoolean retVal = bQueryGraphSamples
        (
            strFldName
          , c4CfgSerialNum
          , c4SerialNum
          , c4NewSamples
          , fcolNewSamples
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << c4CfgSerialNum;
        orbcToDispatch.strmOut() << c4SerialNum;
        orbcToDispatch.strmOut() << c4NewSamples;
        orbcToDispatch.strmOut() << fcolNewSamples;
    }
     else if (strMethodName == L"c4QueryGraphFlds")
    {
        TVector<TString> colToFill;
        tCIDLib::TCard4 retVal = c4QueryGraphFlds
        (
            colToFill
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << retVal;
        orbcToDispatch.strmOut() << colToFill;
    }
     else if (strMethodName == L"QueryConfig")
    {
        TCQLogicSrvCfg lscfgToFill;
        tCIDLib::TCard4 c4CfgSerialNum = {};
        QueryConfig
        (
            lscfgToFill
          , c4CfgSerialNum
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << lscfgToFill;
        orbcToDispatch.strmOut() << c4CfgSerialNum;
    }
     else if (strMethodName == L"ResetElTimeFld")
    {
        TString strField;
        orbcToDispatch.strmIn() >> strField;
        ResetElTimeFld
        (
            strField
        );
        orbcToDispatch.strmOut().Reset();
    }
     else if (strMethodName == L"SetConfig")
    {
        TCQLogicSrvCfg lscfgNew;
        orbcToDispatch.strmIn() >> lscfgNew;
        tCIDLib::TCard4 c4CfgSerialNum = {};
        SetConfig
        (
            lscfgNew
          , c4CfgSerialNum
        );
        orbcToDispatch.strmOut().Reset();
        orbcToDispatch.strmOut() << c4CfgSerialNum;
    }
     else
    {
         TParent::Dispatch(strMethodName, orbcToDispatch);
    }
}

