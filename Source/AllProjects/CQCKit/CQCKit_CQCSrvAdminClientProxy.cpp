// ----------------------------------------------------------------------------
//  FILE: CQCKit_CQCSrvAdminClientProxy.cpp
//  DATE: Mon, Sep 07 12:46:04 2020 -0400
//    ID: 1657103AEC7B0F90-32ED41A37653A3E1
//
//  This file was generated by the Charmed Quark CIDIDL compiler. Do not make
//  changes by hand, because they will be lost if the file is regenerated.
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Includes
// ----------------------------------------------------------------------------
#include "CQCKit_.hpp"

// ----------------------------------------------------------------------------
// Magic macros
// ----------------------------------------------------------------------------
AdvRTTIDecls(TCQCSrvAdminClientProxy,TOrbClientBase)


// ----------------------------------------------------------------------------
// TCQCSrvAdminClientProxy: Public, static data
// ----------------------------------------------------------------------------
const TString TCQCSrvAdminClientProxy::strInterfaceId(L"1657103AEC7B0F90-32ED41A37653A3E1");
const TString TCQCSrvAdminClientProxy::strAdminScope(L"/CQC/CQCServer/Admins");
const TString TCQCSrvAdminClientProxy::strDrvScope(L"/CQC/CQCServer/Drivers");
const TString TCQCSrvAdminClientProxy::strCoreAdminScope(L"/CQC/CQCServer/CoreAdmins");
const TString TCQCSrvAdminClientProxy::strCoreAdminBinding(L"/CQC/CQCServer/CoreAdmins/%(h)");



// ----------------------------------------------------------------------------
// TCQCSrvAdminClientProxy: Constructors and Destructor
// ----------------------------------------------------------------------------
TCQCSrvAdminClientProxy::TCQCSrvAdminClientProxy()
{
}

TCQCSrvAdminClientProxy::
TCQCSrvAdminClientProxy(const TOrbObjId& ooidSrc, const TString& strNSBinding)
{
    #if CID_DEBUG_ON
    if (!ooidSrc.oidKey().bIsInterfaceId(strInterfaceId))
    {
        facCIDOrb().ThrowErr
        (
            CID_FILE
            , CID_LINE
            , kOrbErrs::errcClient_BadIntfId
            , tCIDLib::ESeverities::Failed
            , tCIDLib::EErrClasses::BadParms
            , ooidSrc.oidKey().mhashInterface()
            , strInterfaceId
        );
    }
    #endif
    SetObjId(ooidSrc, strNSBinding, kCIDLib::False);
}

TCQCSrvAdminClientProxy::~TCQCSrvAdminClientProxy()
{
}

// ----------------------------------------------------------------------------
// TCQCSrvAdminClientProxy: Public, non-virtual methods
// ----------------------------------------------------------------------------
tCIDLib::TBoolean TCQCSrvAdminClientProxy::bCheckFieldExists
(
    const TString& strMoniker
    , tCIDLib::TBoolean& bDevExists
    , const TString& strField
    , tCIDLib::TBoolean& bFldExists)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bCheckFieldExists");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strField;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> bDevExists;
        ocmdToUse.strmIn() >> bFldExists;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bCheckForAllNewFields
(
    const tCIDLib::TCard4 c4DriverListId
    , const TFundVector<tCIDLib::TCard8>& fcolIds)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bCheckForAllNewFields");
        ocmdToUse.strmOut() << c4DriverListId;
        ocmdToUse.strmOut() << fcolIds;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bCheckForNewFields
(
    const tCIDLib::TCard4 c4DriverListId
    , const tCIDLib::TCard4 c4DriverId
    , const tCIDLib::TCard4 c4FieldListId)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bCheckForNewFields");
        ocmdToUse.strmOut() << c4DriverListId;
        ocmdToUse.strmOut() << c4DriverId;
        ocmdToUse.strmOut() << c4FieldListId;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bCheckForNewDrivers
(
    const tCIDLib::TCard4 c4DriverListId)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bCheckForNewDrivers");
        ocmdToUse.strmOut() << c4DriverListId;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bHasQueuedTimedWrite
(
    const TString& strMoniker
    , const TString& strField
    , tCIDLib::TCard8& c8EndTime)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bHasQueuedTimedWrite");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strField;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> c8EndTime;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bLoadDrivers
(
    const TVector<TString>& colMonikers
    , const TCQCSecToken& sectUser)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bLoadDrivers");
        ocmdToUse.strmOut() << colMonikers;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(45000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bQueryCommPorts
(
    TVector<TString>& colToFill
    , const tCIDLib::TBoolean bLocalOnly
    , const tCIDLib::TBoolean bAvailOnly)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryCommPorts");
        ocmdToUse.strmOut() << bLocalOnly;
        ocmdToUse.strmOut() << bAvailOnly;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> colToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bQueryData
(
    const TString& strMoniker
    , const TString& strQueryType
    , const TString& strDataName
    , tCIDLib::TCard4& c4BufSz_mbufToFill
    , THeapBuf& mbufToFill)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryData");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strQueryType;
        ocmdToUse.strmOut() << strDataName;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> c4BufSz_mbufToFill;
        ocmdToUse.strmIn().c4ReadBuffer(mbufToFill, c4BufSz_mbufToFill);
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bQueryData2
(
    const TString& strMoniker
    , const TString& strQueryType
    , tCIDLib::TCard4& c4BufSz_mbufIO
    , THeapBuf& mbufIO)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryData2");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strQueryType;
        ocmdToUse.strmOut() << c4BufSz_mbufIO;
        ocmdToUse.strmOut().c4WriteBuffer(mbufIO, c4BufSz_mbufIO);
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> c4BufSz_mbufIO;
        ocmdToUse.strmIn().c4ReadBuffer(mbufIO, c4BufSz_mbufIO);
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bQueryDriverInfo
(
    const TString& strMoniker
    , TCQCDriverObjCfg& cqcdcToFill)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryDriverInfo");
        ocmdToUse.strmOut() << strMoniker;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> cqcdcToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bQueryDriverStates
(
    const tCIDLib::TCard4 c4DriverListId
    , TFundVector<tCIDLib::TCard4>& fcolIds
    , TFundVector<tCQCKit::EDrvStates>& fcolStates)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryDriverStates");
        ocmdToUse.strmOut() << c4DriverListId;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> fcolIds;
        ocmdToUse.strmIn() >> fcolStates;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bQueryTextVal
(
    const TString& strMoniker
    , const TString& strQueryType
    , const TString& strDataName
    , TString& strToFill)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryTextVal");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strQueryType;
        ocmdToUse.strmOut() << strDataName;
        Dispatch(45000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> strToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bQueryVal
(
    const TString& strMoniker
    , const TString& strValId
    , const tCIDLib::TBoolean bNoQueue)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryVal");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strValId;
        ocmdToUse.strmOut() << bNoQueue;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bQueryVal2
(
    const TString& strMoniker
    , const TString& strValId
    , const TString& strValName
    , const tCIDLib::TBoolean bNoQueue)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bQueryVal2");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strValId;
        ocmdToUse.strmOut() << strValName;
        ocmdToUse.strmOut() << bNoQueue;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bReadField
(
    const tCIDLib::TCard4 c4DriverListId
    , const tCIDLib::TCard4 c4DriverId
    , const tCIDLib::TCard4 c4FieldListId
    , const tCIDLib::TCard4 c4FieldId
    , tCIDLib::TCard4& c4SerialNum
    , TString& strValue
    , tCQCKit::EFldTypes& eType)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bReadField");
        ocmdToUse.strmOut() << c4DriverListId;
        ocmdToUse.strmOut() << c4DriverId;
        ocmdToUse.strmOut() << c4FieldListId;
        ocmdToUse.strmOut() << c4FieldId;
        ocmdToUse.strmOut() << c4SerialNum;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> c4SerialNum;
        ocmdToUse.strmIn() >> strValue;
        ocmdToUse.strmIn() >> eType;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bReadField
(
    const tCIDLib::TCard4 c4DriverListId
    , const tCIDLib::TCard4 c4DriverId
    , const tCIDLib::TCard4 c4FieldListId
    , const tCIDLib::TCard4 c4FieldId
    , tCIDLib::TCard4& c4SerialNum
    , tCIDLib::TCard4& c4BufSz_mbufValue
    , THeapBuf& mbufValue
    , tCQCKit::EFldTypes& eType)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bReadField1");
        ocmdToUse.strmOut() << c4DriverListId;
        ocmdToUse.strmOut() << c4DriverId;
        ocmdToUse.strmOut() << c4FieldListId;
        ocmdToUse.strmOut() << c4FieldId;
        ocmdToUse.strmOut() << c4SerialNum;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> c4SerialNum;
        ocmdToUse.strmIn() >> c4BufSz_mbufValue;
        ocmdToUse.strmIn().c4ReadBuffer(mbufValue, c4BufSz_mbufValue);
        ocmdToUse.strmIn() >> eType;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bReadFieldByName
(
    tCIDLib::TCard4& c4SerialNum
    , const TString& strMoniker
    , const TString& strFldName
    , TString& strToFill
    , tCQCKit::EFldTypes& eType)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bReadFieldByName");
        ocmdToUse.strmOut() << c4SerialNum;
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4SerialNum;
            ocmdToUse.strmIn() >> strToFill;
            ocmdToUse.strmIn() >> eType;
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bReadFieldByName
(
    tCIDLib::TCard4& c4SerialNum
    , const TString& strMoniker
    , const TString& strFldName
    , tCIDLib::TCard4& c4BufSz_mbufValue
    , THeapBuf& mbufValue
    , tCQCKit::EFldTypes& eType)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bReadFieldByName1");
        ocmdToUse.strmOut() << c4SerialNum;
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4SerialNum;
            ocmdToUse.strmIn() >> c4BufSz_mbufValue;
            ocmdToUse.strmIn().c4ReadBuffer(mbufValue, c4BufSz_mbufValue);
            ocmdToUse.strmIn() >> eType;
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bReadBoolByName
(
    tCIDLib::TCard4& c4SerialNum
    , const TString& strMoniker
    , const TString& strFldName
    , tCIDLib::TBoolean& bToFill)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bReadBoolByName");
        ocmdToUse.strmOut() << c4SerialNum;
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4SerialNum;
            ocmdToUse.strmIn() >> bToFill;
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bReadCardByName
(
    tCIDLib::TCard4& c4SerialNum
    , const TString& strMoniker
    , const TString& strFldName
    , tCIDLib::TCard4& c4ToFill)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bReadCardByName");
        ocmdToUse.strmOut() << c4SerialNum;
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4SerialNum;
            ocmdToUse.strmIn() >> c4ToFill;
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bReadFloatByName
(
    tCIDLib::TCard4& c4SerialNum
    , const TString& strMoniker
    , const TString& strFldName
    , tCIDLib::TFloat8& f8ToFill)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bReadFloatByName");
        ocmdToUse.strmOut() << c4SerialNum;
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4SerialNum;
            ocmdToUse.strmIn() >> f8ToFill;
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bReadIntByName
(
    tCIDLib::TCard4& c4SerialNum
    , const TString& strMoniker
    , const TString& strFldName
    , tCIDLib::TInt4& i4ToFill)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bReadIntByName");
        ocmdToUse.strmOut() << c4SerialNum;
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4SerialNum;
            ocmdToUse.strmIn() >> i4ToFill;
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bReadSListByName
(
    tCIDLib::TCard4& c4SerialNum
    , const TString& strMoniker
    , const TString& strFldName
    , TVector<TString>& colValue)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bReadSListByName");
        ocmdToUse.strmOut() << c4SerialNum;
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> c4SerialNum;
        ocmdToUse.strmIn() >> colValue;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bReadStringByName
(
    tCIDLib::TCard4& c4SerialNum
    , const TString& strMoniker
    , const TString& strFldName
    , TString& strToFill)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bReadStringByName");
        ocmdToUse.strmOut() << c4SerialNum;
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4SerialNum;
            ocmdToUse.strmIn() >> strToFill;
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bReadTimeByName
(
    tCIDLib::TCard4& c4SerialNum
    , const TString& strMoniker
    , const TString& strFldName
    , tCIDLib::TCard8& c8ToFill)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bReadTimeByName");
        ocmdToUse.strmOut() << c4SerialNum;
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        Dispatch(10000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        if (retVal)
        {
            ocmdToUse.strmIn() >> c4SerialNum;
            ocmdToUse.strmIn() >> c8ToFill;
        }
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TBoolean TCQCSrvAdminClientProxy::bSendData
(
    const TString& strMoniker
    , const TString& strSendType
    , TString& strDataName
    , tCIDLib::TCard4& c4BufSz_mbufIO
    , THeapBuf& mbufIO
    , const TCQCSecToken& sectUser)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TBoolean retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"bSendData");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strSendType;
        ocmdToUse.strmOut() << strDataName;
        ocmdToUse.strmOut() << c4BufSz_mbufIO;
        ocmdToUse.strmOut().c4WriteBuffer(mbufIO, c4BufSz_mbufIO);
        ocmdToUse.strmOut() << sectUser;
        Dispatch(60000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> strDataName;
        ocmdToUse.strmIn() >> c4BufSz_mbufIO;
        ocmdToUse.strmIn().c4ReadBuffer(mbufIO, c4BufSz_mbufIO);
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4QueryAudioDevs
(
    TVector<TString>& colToFill)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QueryAudioDevs");
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> colToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4QueryDriverConfigObjs
(
    TVector<TCQCDriverObjCfg>& colToFill
    , tCIDLib::TCard4& c4DriverListId
    , const TCQCSecToken& sectUser)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QueryDriverConfigObjs");
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> colToFill;
        ocmdToUse.strmIn() >> c4DriverListId;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4QueryDriverId
(
    const TString& strMoniker
    , tCIDLib::TCard4& c4DriverListId)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QueryDriverId");
        ocmdToUse.strmOut() << strMoniker;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> c4DriverListId;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4QueryDriverIds
(
    const TVector<TString>& colMonikers
    , TFundVector<tCIDLib::TCard4>& fcolIds
    , TVector<TKeyValuePair>& colToFill)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QueryDriverIds");
        ocmdToUse.strmOut() << colMonikers;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> fcolIds;
        ocmdToUse.strmIn() >> colToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4QueryDriverIdList
(
    TVector<TString>& colMonikers
    , TFundVector<tCIDLib::TCard4>& fcolIds
    , TVector<TKeyValuePair>& colToFill
    , const TCQCSecToken& sectUser)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QueryDriverIdList");
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> colMonikers;
        ocmdToUse.strmIn() >> fcolIds;
        ocmdToUse.strmIn() >> colToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4QueryDriverIdList2
(
    TVector<TString>& colMonikers
    , TFundVector<tCIDLib::TCard4>& fcolIds
    , const TCQCSecToken& sectUser)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QueryDriverIdList2");
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> colMonikers;
        ocmdToUse.strmIn() >> fcolIds;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4QueryFields
(
    const TString& strMoniker
    , tCQCKit::EDrvStates& eState
    , TVector<TCQCFldDef>& colToFill
    , tCIDLib::TCard4& c4FldListId
    , tCIDLib::TCard4& c4DriverId
    , tCIDLib::TCard4& c4DriverListId)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QueryFields");
        ocmdToUse.strmOut() << strMoniker;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> eState;
        ocmdToUse.strmIn() >> colToFill;
        ocmdToUse.strmIn() >> c4FldListId;
        ocmdToUse.strmIn() >> c4DriverId;
        ocmdToUse.strmIn() >> c4DriverListId;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4QueryFieldNames
(
    const TString& strMoniker
    , TVector<TString>& colToFill
    , const tCQCKit::EReqAccess eReqAccess)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QueryFieldNames");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << eReqAccess;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> colToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4QueryFieldNamesRX
(
    const TString& strMoniker
    , TVector<TCQCFldDef>& colToFill
    , const TString& strFldNameRegEx
    , const tCQCKit::EReqAccess eReqAccess)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QueryFieldNamesRX");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldNameRegEx;
        ocmdToUse.strmOut() << eReqAccess;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> colToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4QuerySemFields
(
    const TFundVector<tCQCKit::EFldSTypes>& folTypes
    , const tCQCKit::EReqAccess eReqAccess
    , TVector<TCQCDrvFldDef>& colToFill
    , const TString& strMoniker)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QuerySemFields");
        ocmdToUse.strmOut() << folTypes;
        ocmdToUse.strmOut() << eReqAccess;
        ocmdToUse.strmOut() << strMoniker;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> colToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4QueryTTSVoices
(
    TVector<TString>& colToFill)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QueryTTSVoices");
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        ocmdToUse.strmIn() >> colToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4QueryVal
(
    const TString& strMoniker
    , const TString& strValId
    , const tCIDLib::TBoolean bNoQueue)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QueryVal");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strValId;
        ocmdToUse.strmOut() << bNoQueue;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4QueryVal2
(
    const TString& strMoniker
    , const TString& strValId
    , const TString& strValName
    , const tCIDLib::TBoolean bNoQueue)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4QueryVal2");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strValId;
        ocmdToUse.strmOut() << strValName;
        ocmdToUse.strmOut() << bNoQueue;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TCard4 TCQCSrvAdminClientProxy::c4SendCmd
(
    const TString& strMoniker
    , const TString& strCmdId
    , const TString& strParms
    , const TCQCSecToken& sectUser)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TCard4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"c4SendCmd");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strCmdId;
        ocmdToUse.strmOut() << strParms;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::CancelTimedWrite
(
    const TString& strMoniker
    , const TString& strField
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"CancelTimedWrite");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strField;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::ClearDrvStats
(
    const TString& strMoniker)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"ClearDrvStats");
        ocmdToUse.strmOut() << strMoniker;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::DoTimedWrite
(
    const TString& strMoniker
    , const TString& strField
    , const TString& strNewVal
    , const TString& strFinalVal
    , const tCIDLib::TCard4 Seconds
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"DoTimedWrite");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strField;
        ocmdToUse.strmOut() << strNewVal;
        ocmdToUse.strmOut() << strFinalVal;
        ocmdToUse.strmOut() << Seconds;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TInt4 TCQCSrvAdminClientProxy::i4QueryVal
(
    const TString& strMoniker
    , const TString& strValId
    , const tCIDLib::TBoolean bNoQueue)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TInt4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"i4QueryVal");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strValId;
        ocmdToUse.strmOut() << bNoQueue;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TInt4 TCQCSrvAdminClientProxy::i4QueryVal2
(
    const TString& strMoniker
    , const TString& strValId
    , const TString& strValName
    , const tCIDLib::TBoolean bNoQueue)
{
    #pragma warning(suppress : 26494)
    tCIDLib::TInt4 retVal;
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"i4QueryVal2");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strValId;
        ocmdToUse.strmOut() << strValName;
        ocmdToUse.strmOut() << bNoQueue;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> retVal;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
    return retVal;
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::QueryConfig
(
    const TString& strMoniker
    , tCIDLib::TCard4& c4BufSz_mbufData
    , THeapBuf& mbufData
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryConfig");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4BufSz_mbufData;
        ocmdToUse.strmIn().c4ReadBuffer(mbufData, c4BufSz_mbufData);
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::QueryDriverInfo
(
    const TString& strMoniker
    , tCQCKit::EDrvStates& eStatus
    , tCIDLib::TCard4& c4ArchVer
    , TFundVector<tCQCKit::EDevClasses>& fcolDevClasses
    , TString& strMake
    , TString& strModel
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryDriverInfo");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> eStatus;
        ocmdToUse.strmIn() >> c4ArchVer;
        ocmdToUse.strmIn() >> fcolDevClasses;
        ocmdToUse.strmIn() >> strMake;
        ocmdToUse.strmIn() >> strModel;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::QueryDriverState
(
    const TString& strMoniker
    , tCQCKit::EDrvStates& eStatus
    , tCQCKit::EVerboseLvls& eVerboseLvl
    , tCIDLib::TCard4& c4ThreadId)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryDriverState");
        ocmdToUse.strmOut() << strMoniker;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> eStatus;
        ocmdToUse.strmIn() >> eVerboseLvl;
        ocmdToUse.strmIn() >> c4ThreadId;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::QueryDriverStats
(
    const TString& strMoniker
    , TCQCDrvStats& cdstats)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryDriverStats");
        ocmdToUse.strmOut() << strMoniker;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> cdstats;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::QueryFieldDef
(
    const TString& strMoniker
    , const TString& strField
    , TCQCFldDef& flddToFill)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryFieldDef");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strField;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> flddToFill;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::QueryFieldInfo
(
    const TString& strMoniker
    , const TString& strField
    , tCIDLib::TCard4& c4DriverListId
    , tCIDLib::TCard4& c4DriverId
    , tCIDLib::TCard4& c4FieldListId
    , tCIDLib::TCard4& c4FieldId
    , tCQCKit::EFldTypes& eType)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryFieldInfo");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strField;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4DriverListId;
        ocmdToUse.strmIn() >> c4DriverId;
        ocmdToUse.strmIn() >> c4FieldListId;
        ocmdToUse.strmIn() >> c4FieldId;
        ocmdToUse.strmIn() >> eType;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::QueryPowerStates
(
    const TVector<TKeyValuePair>& colDrvNames
    , TFundVector<tCQCKit::EPowerStatus>& fcolStates)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryPowerStates");
        ocmdToUse.strmOut() << colDrvNames;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> fcolStates;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::QueryStatusReport
(
    TString& strErrList
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"QueryStatusReport");
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> strErrList;
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::PauseResumeDrv
(
    const TString& strMoniker
    , const tCIDLib::TBoolean bPause
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"PauseResumeDrv");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << bPause;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::ReadDriverFields
(
    const tCIDLib::TCard4 c4DriverListId
    , const tCIDLib::TCard4 c4DriverId
    , const tCIDLib::TCard4 c4FieldListId
    , const TFundVector<tCIDLib::TCard4>& fcolFldIds
    , const TFundVector<tCIDLib::TCard4>& fcolSerialNums
    , tCIDLib::TCard4& c4BufSz_mbufData
    , THeapBuf& mbufData)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"ReadDriverFields");
        ocmdToUse.strmOut() << c4DriverListId;
        ocmdToUse.strmOut() << c4DriverId;
        ocmdToUse.strmOut() << c4FieldListId;
        ocmdToUse.strmOut() << fcolFldIds;
        ocmdToUse.strmOut() << fcolSerialNums;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4BufSz_mbufData;
        ocmdToUse.strmIn().c4ReadBuffer(mbufData, c4BufSz_mbufData);
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::ReadFields
(
    const TFldIOPacket& fiopInfo
    , tCIDLib::TCard4& c4BufSz_mbufData
    , THeapBuf& mbufData)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"ReadFields");
        ocmdToUse.strmOut() << fiopInfo;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4BufSz_mbufData;
        ocmdToUse.strmIn().c4ReadBuffer(mbufData, c4BufSz_mbufData);
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::ReadFieldsByName
(
    const TString& strMoniker
    , const TVector<TString>& colFieldNames
    , tCIDLib::TCard4& c4BufSz_mbufData
    , THeapBuf& mbufData)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"ReadFieldsByName");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << colFieldNames;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        ocmdToUse.strmIn() >> c4BufSz_mbufData;
        ocmdToUse.strmIn().c4ReadBuffer(mbufData, c4BufSz_mbufData);
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::ReconfigDriver
(
    const TString& strMoniker
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"ReconfigDriver");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::RefreshCfg
(
    const TString& strCfgType)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"RefreshCfg");
        ocmdToUse.strmOut() << strCfgType;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::SetConfig
(
    const TString& strMoniker
    , const tCIDLib::TCard4 c4BufSz_mbufNewCfg
    , const THeapBuf& mbufNewCfg
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"SetConfig");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << c4BufSz_mbufNewCfg;
        ocmdToUse.strmOut().c4WriteBuffer(mbufNewCfg, c4BufSz_mbufNewCfg);
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::SetVerboseLevel
(
    const TString& strMoniker
    , const tCQCKit::EVerboseLvls eToSet)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"SetVerboseLevel");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << eToSet;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::UnloadAllDrivers
(
    const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"UnloadAllDrivers");
        ocmdToUse.strmOut() << sectUser;
        Dispatch(60000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::UnloadDriver
(
    const TString& strMonikerToUnload
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"UnloadDriver");
        ocmdToUse.strmOut() << strMonikerToUnload;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(60000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::UpdateTriggers
(
    const TString& strMoniker
    , const TCQCSecToken& sectUser)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"UpdateTriggers");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << sectUser;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteFieldByName
(
    const TString& strMoniker
    , const TString& strFldName
    , const TString& strValue
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteFieldByName");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        ocmdToUse.strmOut() << strValue;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteBoolByName
(
    const TString& strMoniker
    , const TString& strFldName
    , const tCIDLib::TBoolean bValue
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteBoolByName");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        ocmdToUse.strmOut() << bValue;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteBoolFld
(
    const tCIDLib::TCard4 c4DriverListId
    , const tCIDLib::TCard4 c4DriverId
    , const tCIDLib::TCard4 c4FieldListId
    , const tCIDLib::TCard4 c4FieldId
    , const tCIDLib::TBoolean bValue
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteBoolFld");
        ocmdToUse.strmOut() << c4DriverListId;
        ocmdToUse.strmOut() << c4DriverId;
        ocmdToUse.strmOut() << c4FieldListId;
        ocmdToUse.strmOut() << c4FieldId;
        ocmdToUse.strmOut() << bValue;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteCardByName
(
    const TString& strMoniker
    , const TString& strFldName
    , const tCIDLib::TCard4 c4Value
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteCardByName");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        ocmdToUse.strmOut() << c4Value;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteCardFld
(
    const tCIDLib::TCard4 c4DriverListId
    , const tCIDLib::TCard4 c4DriverId
    , const tCIDLib::TCard4 c4FieldListId
    , const tCIDLib::TCard4 c4FieldId
    , const tCIDLib::TCard4 c4Value
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteCardFld");
        ocmdToUse.strmOut() << c4DriverListId;
        ocmdToUse.strmOut() << c4DriverId;
        ocmdToUse.strmOut() << c4FieldListId;
        ocmdToUse.strmOut() << c4FieldId;
        ocmdToUse.strmOut() << c4Value;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteFloatByName
(
    const TString& strMoniker
    , const TString& strFldName
    , const tCIDLib::TFloat8 f8Value
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteFloatByName");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        ocmdToUse.strmOut() << f8Value;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteFloatFld
(
    const tCIDLib::TCard4 c4DriverListId
    , const tCIDLib::TCard4 c4DriverId
    , const tCIDLib::TCard4 c4FieldListId
    , const tCIDLib::TCard4 c4FieldId
    , const tCIDLib::TFloat8 f8Value
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteFloatFld");
        ocmdToUse.strmOut() << c4DriverListId;
        ocmdToUse.strmOut() << c4DriverId;
        ocmdToUse.strmOut() << c4FieldListId;
        ocmdToUse.strmOut() << c4FieldId;
        ocmdToUse.strmOut() << f8Value;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteIntByName
(
    const TString& strMoniker
    , const TString& strFldName
    , const tCIDLib::TInt4 i4Value
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteIntByName");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        ocmdToUse.strmOut() << i4Value;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteIntFld
(
    const tCIDLib::TCard4 c4DriverListId
    , const tCIDLib::TCard4 c4DriverId
    , const tCIDLib::TCard4 c4FieldListId
    , const tCIDLib::TCard4 c4FieldId
    , const tCIDLib::TInt4 i4Value
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteIntFld");
        ocmdToUse.strmOut() << c4DriverListId;
        ocmdToUse.strmOut() << c4DriverId;
        ocmdToUse.strmOut() << c4FieldListId;
        ocmdToUse.strmOut() << c4FieldId;
        ocmdToUse.strmOut() << i4Value;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteStringByName
(
    const TString& strMoniker
    , const TString& strFldName
    , const TString& strValue
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteStringByName");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        ocmdToUse.strmOut() << strValue;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteStringFld
(
    const tCIDLib::TCard4 c4DriverListId
    , const tCIDLib::TCard4 c4DriverId
    , const tCIDLib::TCard4 c4FieldListId
    , const tCIDLib::TCard4 c4FieldId
    , const TString& strValue
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteStringFld");
        ocmdToUse.strmOut() << c4DriverListId;
        ocmdToUse.strmOut() << c4DriverId;
        ocmdToUse.strmOut() << c4FieldListId;
        ocmdToUse.strmOut() << c4FieldId;
        ocmdToUse.strmOut() << strValue;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteSListByName
(
    const TString& strMoniker
    , const TString& strFldName
    , const TVector<TString>& colValue
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteSListByName");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        ocmdToUse.strmOut() << colValue;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteSListFld
(
    const tCIDLib::TCard4 c4DriverListId
    , const tCIDLib::TCard4 c4DriverId
    , const tCIDLib::TCard4 c4FieldListId
    , const tCIDLib::TCard4 c4FieldId
    , const TVector<TString>& colValue
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteSListFld");
        ocmdToUse.strmOut() << c4DriverListId;
        ocmdToUse.strmOut() << c4DriverId;
        ocmdToUse.strmOut() << c4FieldListId;
        ocmdToUse.strmOut() << c4FieldId;
        ocmdToUse.strmOut() << colValue;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteTimeByName
(
    const TString& strMoniker
    , const TString& strFldName
    , const tCIDLib::TCard8 c8Value
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteTimeByName");
        ocmdToUse.strmOut() << strMoniker;
        ocmdToUse.strmOut() << strFldName;
        ocmdToUse.strmOut() << c8Value;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

tCIDLib::TVoid TCQCSrvAdminClientProxy::WriteTimeFld
(
    const tCIDLib::TCard4 c4DriverListId
    , const tCIDLib::TCard4 c4DriverId
    , const tCIDLib::TCard4 c4FieldListId
    , const tCIDLib::TCard4 c4FieldId
    , const tCIDLib::TCard8 c8Value
    , const TCQCSecToken& sectUser
    , const tCQCKit::EDrvCmdWaits eWait)
{
    TCmdQItem* pcqiToUse = pcqiGetCmdItem(ooidThis().oidKey());
    TOrbCmd& ocmdToUse = pcqiToUse->ocmdData();
    try
    {
        ocmdToUse.strmOut() << TString(L"WriteTimeFld");
        ocmdToUse.strmOut() << c4DriverListId;
        ocmdToUse.strmOut() << c4DriverId;
        ocmdToUse.strmOut() << c4FieldListId;
        ocmdToUse.strmOut() << c4FieldId;
        ocmdToUse.strmOut() << c8Value;
        ocmdToUse.strmOut() << sectUser;
        ocmdToUse.strmOut() << eWait;
        Dispatch(30000, pcqiToUse);
        ocmdToUse.strmIn().Reset();
        GiveBackCmdItem(pcqiToUse);
    }
    catch(TError& errToCatch)
    {
        GiveBackCmdItem(pcqiToUse);
        errToCatch.AddStackLevel(CID_FILE, CID_LINE);
        throw;
    }
}

